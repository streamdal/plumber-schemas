// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ps_base.proto

package protos

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("ps_base.proto", fileDescriptor_ef931efdbd582aee) }

var fileDescriptor_ef931efdbd582aee = []byte{
	// 628 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x96, 0x4f, 0x6f, 0xd3, 0x4c,
	0x10, 0x87, 0x6f, 0xef, 0x0b, 0x0b, 0x29, 0xc5, 0x07, 0x20, 0x21, 0xa1, 0xe5, 0x03, 0x90, 0x48,
	0x80, 0x38, 0x20, 0x21, 0x51, 0x82, 0xb0, 0x90, 0x90, 0x8a, 0xd2, 0x56, 0x20, 0x2e, 0x91, 0xed,
	0x8c, 0x9a, 0x48, 0x8e, 0xbd, 0x78, 0xd7, 0xf0, 0x9d, 0xf8, 0x94, 0x28, 0x99, 0x75, 0x66, 0x66,
	0xc7, 0xe1, 0x54, 0xf5, 0xf7, 0xec, 0x3e, 0x19, 0xcd, 0xfe, 0xb3, 0x19, 0x58, 0xb7, 0xcc, 0x33,
	0x07, 0x53, 0xdb, 0xd4, 0xbe, 0x4e, 0xfe, 0xdb, 0xff, 0x71, 0xa3, 0x53, 0xeb, 0x96, 0xc5, 0x3a,
	0xab, 0x2a, 0x28, 0x91, 0x60, 0x52, 0x57, 0x15, 0x14, 0x3e, 0x24, 0xbb, 0xa9, 0x0d, 0x64, 0xab,
	0xf0, 0xef, 0x03, 0xeb, 0x96, 0x0e, 0x9a, 0x5f, 0xd0, 0xb0, 0xc0, 0xb7, 0x4c, 0x71, 0x62, 0xdd,
	0xf2, 0x77, 0xb3, 0xf1, 0xe1, 0xc7, 0x5e, 0xfe, 0x49, 0xcc, 0xe0, 0x6b, 0xd9, 0x6e, 0x73, 0x68,
	0xae, 0xf6, 0x13, 0x93, 0xef, 0xe6, 0x61, 0x0a, 0xfe, 0xa2, 0x2c, 0xe7, 0xf8, 0x4b, 0x9b, 0xba,
	0x72, 0xc9, 0x39, 0x0e, 0x77, 0x53, 0x85, 0x16, 0xf0, 0xb3, 0x05, 0xe7, 0x47, 0xcf, 0xff, 0x31,
	0xc2, 0xd9, 0xba, 0x72, 0x90, 0x7c, 0x31, 0x83, 0x14, 0x3c, 0x91, 0x64, 0xcc, 0xe6, 0x50, 0xdc,
	0x19, 0x27, 0x47, 0x68, 0xb0, 0xdd, 0x98, 0xd3, 0x79, 0x03, 0x99, 0x07, 0x26, 0x3c, 0xeb, 0xa6,
	0xc4, 0xa4, 0x73, 0x9e, 0x1f, 0x1f, 0x10, 0xb4, 0x97, 0xe6, 0xe4, 0x1a, 0x1c, 0xaf, 0xf2, 0x50,
	0x87, 0xcc, 0x3b, 0xe5, 0xb3, 0x63, 0x98, 0xea, 0xbc, 0xb1, 0xab, 0x23, 0x75, 0xc6, 0x44, 0xd5,
	0xa9, 0x07, 0x90, 0xf6, 0x23, 0x94, 0xd0, 0xaf, 0x8d, 0x89, 0xd2, 0xea, 0x01, 0x41, 0xfb, 0xd6,
	0xfc, 0x9f, 0x82, 0x5f, 0x40, 0xb6, 0x4a, 0x1e, 0xb1, 0xfe, 0xef, 0x82, 0x4e, 0xf2, 0x58, 0xe5,
	0x61, 0xee, 0xdc, 0x18, 0x5c, 0xfc, 0xfd, 0xf4, 0xa1, 0xdc, 0x10, 0xdc, 0x30, 0xea, 0x43, 0x24,
	0xc1, 0xb5, 0x91, 0x12, 0xca, 0x94, 0x84, 0x23, 0x92, 0x60, 0xe3, 0xa4, 0x84, 0x32, 0x25, 0xe1,
	0x88, 0x24, 0xd8, 0x26, 0x29, 0xa1, 0x4c, 0x49, 0x38, 0x0a, 0x92, 0x77, 0xe6, 0x4e, 0x0a, 0xfe,
	0xdb, 0xee, 0xc4, 0x25, 0xbc, 0x71, 0xfb, 0xa4, 0x13, 0x3c, 0xd1, 0x20, 0x4c, 0xff, 0x64, 0xee,
	0x61, 0x8f, 0xd0, 0x10, 0x35, 0x4e, 0x48, 0x9e, 0xf6, 0x32, 0xf2, 0x60, 0x9b, 0x22, 0x0f, 0x0b,
	0x95, 0x47, 0x30, 0xf2, 0x60, 0xa7, 0x22, 0x0f, 0x0b, 0x95, 0x47, 0x30, 0xf2, 0x60, 0xb3, 0x22,
	0x0f, 0x0b, 0x95, 0x47, 0x30, 0xb1, 0xe5, 0xe6, 0x78, 0x4b, 0x8a, 0x2d, 0x17, 0xb2, 0xbe, 0x2d,
	0x77, 0x40, 0x74, 0xe4, 0xc3, 0xa5, 0x85, 0xc0, 0x25, 0x93, 0xe8, 0x32, 0x0b, 0xb9, 0x3a, 0xf2,
	0x31, 0xa6, 0x8b, 0x2e, 0xdc, 0x2f, 0xa1, 0xb0, 0x71, 0x74, 0xed, 0xc8, 0xda, 0x26, 0x47, 0x28,
	0xd9, 0xc2, 0x2d, 0x10, 0xdb, 0x44, 0xac, 0x6c, 0x11, 0x25, 0x5b, 0x38, 0xfc, 0xb1, 0x4d, 0xc4,
	0xca, 0x16, 0x51, 0x5a, 0xc7, 0x2b, 0x5f, 0xdb, 0xce, 0x75, 0xe8, 0x32, 0x0b, 0xd5, 0x3a, 0x0a,
	0x46, 0x55, 0x2d, 0xc0, 0xb5, 0x5b, 0x5d, 0x95, 0x88, 0x55, 0x55, 0x11, 0x0d, 0xb6, 0xf7, 0xe6,
	0x6e, 0x0a, 0xfe, 0x7a, 0xff, 0xee, 0x25, 0xfc, 0x70, 0x61, 0xd4, 0x59, 0x86, 0x3d, 0x44, 0x3c,
	0x55, 0x17, 0x65, 0x89, 0xb9, 0x13, 0x4f, 0x15, 0xc5, 0x7d, 0x4f, 0x15, 0xa7, 0xc1, 0xf6, 0xd9,
	0xdc, 0xc7, 0xa5, 0x0d, 0x25, 0x45, 0x47, 0x4c, 0x56, 0x35, 0xee, 0x87, 0xb4, 0xe1, 0x77, 0xfd,
	0x0b, 0xa2, 0x21, 0xef, 0xa9, 0xd4, 0x8c, 0xfa, 0x10, 0xd5, 0x83, 0x8d, 0x8b, 0xeb, 0xe1, 0xa9,
	0xaa, 0x47, 0x42, 0x52, 0xe1, 0x3e, 0x8b, 0x55, 0x3c, 0x55, 0x2a, 0x09, 0x49, 0x85, 0x9b, 0x2c,
	0x56, 0xf1, 0x54, 0xa9, 0x24, 0xa4, 0xc7, 0x31, 0x05, 0x8f, 0x1f, 0x34, 0x97, 0x16, 0x3f, 0x61,
	0xce, 0xd8, 0x1a, 0x09, 0xa2, 0x1e, 0x47, 0x3d, 0x00, 0xb5, 0x1f, 0xde, 0xfc, 0x78, 0x7d, 0xbb,
	0xf1, 0xeb, 0x36, 0x9f, 0x16, 0xf5, 0x76, 0x96, 0x67, 0xbe, 0x58, 0x17, 0x75, 0x63, 0x67, 0x16,
	0x3f, 0xa0, 0x5e, 0xb8, 0x62, 0x0d, 0xdb, 0xcc, 0xcd, 0xf2, 0x76, 0x53, 0xae, 0x66, 0xb7, 0xf5,
	0x0c, 0x85, 0x39, 0x7e, 0xd1, 0xbd, 0xfa, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xe3, 0xa2, 0x4d, 0x4d,
	0xe9, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PlumberServerClient is the client API for PlumberServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PlumberServerClient interface {
	// List configured/known connections
	GetAllConnections(ctx context.Context, in *GetAllConnectionsRequest, opts ...grpc.CallOption) (*GetAllConnectionsResponse, error)
	// Fetch a specific connection by ID
	GetConnection(ctx context.Context, in *GetConnectionRequest, opts ...grpc.CallOption) (*GetConnectionResponse, error)
	// Create a connection in plumber
	CreateConnection(ctx context.Context, in *CreateConnectionRequest, opts ...grpc.CallOption) (*CreateConnectionResponse, error)
	// Test a connection before saving its configuration
	TestConnection(ctx context.Context, in *TestConnectionRequest, opts ...grpc.CallOption) (*TestConnectionResponse, error)
	// Any active connections will be restarted
	UpdateConnection(ctx context.Context, in *UpdateConnectionRequest, opts ...grpc.CallOption) (*UpdateConnectionResponse, error)
	// If there are any active connections, delete will cause them to get closed
	DeleteConnection(ctx context.Context, in *DeleteConnectionRequest, opts ...grpc.CallOption) (*DeleteConnectionResponse, error)
	GetRead(ctx context.Context, in *GetReadRequest, opts ...grpc.CallOption) (*GetReadResponse, error)
	GetAllRead(ctx context.Context, in *GetAllReadRequest, opts ...grpc.CallOption) (*GetAllReadResponse, error)
	CreateRead(ctx context.Context, in *CreateReadRequest, opts ...grpc.CallOption) (*CreateReadResponse, error)
	UpdateRead(ctx context.Context, in *UpdateReadRequest, opts ...grpc.CallOption) (*UpdateReadResponse, error)
	DeleteRead(ctx context.Context, in *DeleteReadRequest, opts ...grpc.CallOption) (*DeleteReadResponse, error)
	GetWrite(ctx context.Context, in *GetWriteRequest, opts ...grpc.CallOption) (*GetWriteResponse, error)
	GetAllWrite(ctx context.Context, in *GetAllWriteRequest, opts ...grpc.CallOption) (*GetAllWriteResponse, error)
	CreateWrite(ctx context.Context, in *CreateWriteRequest, opts ...grpc.CallOption) (*CreateWriteResponse, error)
	UpdateWrite(ctx context.Context, in *UpdateWriteRequest, opts ...grpc.CallOption) (*UpdateWriteResponse, error)
	DeleteWrite(ctx context.Context, in *DeleteWriteRequest, opts ...grpc.CallOption) (*DeleteWriteResponse, error)
	GetChannel(ctx context.Context, in *GetChannelRequest, opts ...grpc.CallOption) (*GetChannelResponse, error)
	GetAllChannels(ctx context.Context, in *GetAllChannelsRequest, opts ...grpc.CallOption) (*GetAllChannelsResponse, error)
	CreateChannel(ctx context.Context, in *CreateChannelRequest, opts ...grpc.CallOption) (*CreateChannelResponse, error)
	UpdateChannel(ctx context.Context, in *UpdateChannelRequest, opts ...grpc.CallOption) (*UpdateChannelResponse, error)
	DeleteChannel(ctx context.Context, in *DeleteChannelRequest, opts ...grpc.CallOption) (*DeleteChannelResponse, error)
	StopChannel(ctx context.Context, in *StopChannelRequest, opts ...grpc.CallOption) (*StopChannelResponse, error)
	ResumeChannel(ctx context.Context, in *ResumeChannelRequest, opts ...grpc.CallOption) (*ResumeChannelResponse, error)
	GetTunnel(ctx context.Context, in *GetTunnelRequest, opts ...grpc.CallOption) (*GetTunnelResponse, error)
	GetAllTunnels(ctx context.Context, in *GetAllTunnelsRequest, opts ...grpc.CallOption) (*GetAllTunnelsResponse, error)
	CreateTunnel(ctx context.Context, in *CreateTunnelRequest, opts ...grpc.CallOption) (*CreateTunnelResponse, error)
	StopTunnel(ctx context.Context, in *StopTunnelRequest, opts ...grpc.CallOption) (*StopTunnelResponse, error)
	ResumeTunnel(ctx context.Context, in *ResumeTunnelRequest, opts ...grpc.CallOption) (*ResumeTunnelResponse, error)
	UpdateTunnel(ctx context.Context, in *UpdateTunnelRequest, opts ...grpc.CallOption) (*UpdateTunnelResponse, error)
	DeleteTunnel(ctx context.Context, in *DeleteTunnelRequest, opts ...grpc.CallOption) (*DeleteTunnelResponse, error)
	GetServerOptions(ctx context.Context, in *GetServerOptionsRequest, opts ...grpc.CallOption) (*GetServerOptionsResponse, error)
}

type plumberServerClient struct {
	cc *grpc.ClientConn
}

func NewPlumberServerClient(cc *grpc.ClientConn) PlumberServerClient {
	return &plumberServerClient{cc}
}

func (c *plumberServerClient) GetAllConnections(ctx context.Context, in *GetAllConnectionsRequest, opts ...grpc.CallOption) (*GetAllConnectionsResponse, error) {
	out := new(GetAllConnectionsResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/GetAllConnections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) GetConnection(ctx context.Context, in *GetConnectionRequest, opts ...grpc.CallOption) (*GetConnectionResponse, error) {
	out := new(GetConnectionResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/GetConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) CreateConnection(ctx context.Context, in *CreateConnectionRequest, opts ...grpc.CallOption) (*CreateConnectionResponse, error) {
	out := new(CreateConnectionResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/CreateConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) TestConnection(ctx context.Context, in *TestConnectionRequest, opts ...grpc.CallOption) (*TestConnectionResponse, error) {
	out := new(TestConnectionResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/TestConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) UpdateConnection(ctx context.Context, in *UpdateConnectionRequest, opts ...grpc.CallOption) (*UpdateConnectionResponse, error) {
	out := new(UpdateConnectionResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/UpdateConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) DeleteConnection(ctx context.Context, in *DeleteConnectionRequest, opts ...grpc.CallOption) (*DeleteConnectionResponse, error) {
	out := new(DeleteConnectionResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/DeleteConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) GetRead(ctx context.Context, in *GetReadRequest, opts ...grpc.CallOption) (*GetReadResponse, error) {
	out := new(GetReadResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/GetRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) GetAllRead(ctx context.Context, in *GetAllReadRequest, opts ...grpc.CallOption) (*GetAllReadResponse, error) {
	out := new(GetAllReadResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/GetAllRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) CreateRead(ctx context.Context, in *CreateReadRequest, opts ...grpc.CallOption) (*CreateReadResponse, error) {
	out := new(CreateReadResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/CreateRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) UpdateRead(ctx context.Context, in *UpdateReadRequest, opts ...grpc.CallOption) (*UpdateReadResponse, error) {
	out := new(UpdateReadResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/UpdateRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) DeleteRead(ctx context.Context, in *DeleteReadRequest, opts ...grpc.CallOption) (*DeleteReadResponse, error) {
	out := new(DeleteReadResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/DeleteRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) GetWrite(ctx context.Context, in *GetWriteRequest, opts ...grpc.CallOption) (*GetWriteResponse, error) {
	out := new(GetWriteResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/GetWrite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) GetAllWrite(ctx context.Context, in *GetAllWriteRequest, opts ...grpc.CallOption) (*GetAllWriteResponse, error) {
	out := new(GetAllWriteResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/GetAllWrite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) CreateWrite(ctx context.Context, in *CreateWriteRequest, opts ...grpc.CallOption) (*CreateWriteResponse, error) {
	out := new(CreateWriteResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/CreateWrite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) UpdateWrite(ctx context.Context, in *UpdateWriteRequest, opts ...grpc.CallOption) (*UpdateWriteResponse, error) {
	out := new(UpdateWriteResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/UpdateWrite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) DeleteWrite(ctx context.Context, in *DeleteWriteRequest, opts ...grpc.CallOption) (*DeleteWriteResponse, error) {
	out := new(DeleteWriteResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/DeleteWrite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) GetChannel(ctx context.Context, in *GetChannelRequest, opts ...grpc.CallOption) (*GetChannelResponse, error) {
	out := new(GetChannelResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/GetChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) GetAllChannels(ctx context.Context, in *GetAllChannelsRequest, opts ...grpc.CallOption) (*GetAllChannelsResponse, error) {
	out := new(GetAllChannelsResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/GetAllChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) CreateChannel(ctx context.Context, in *CreateChannelRequest, opts ...grpc.CallOption) (*CreateChannelResponse, error) {
	out := new(CreateChannelResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/CreateChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) UpdateChannel(ctx context.Context, in *UpdateChannelRequest, opts ...grpc.CallOption) (*UpdateChannelResponse, error) {
	out := new(UpdateChannelResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/UpdateChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) DeleteChannel(ctx context.Context, in *DeleteChannelRequest, opts ...grpc.CallOption) (*DeleteChannelResponse, error) {
	out := new(DeleteChannelResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/DeleteChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) StopChannel(ctx context.Context, in *StopChannelRequest, opts ...grpc.CallOption) (*StopChannelResponse, error) {
	out := new(StopChannelResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/StopChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) ResumeChannel(ctx context.Context, in *ResumeChannelRequest, opts ...grpc.CallOption) (*ResumeChannelResponse, error) {
	out := new(ResumeChannelResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/ResumeChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) GetTunnel(ctx context.Context, in *GetTunnelRequest, opts ...grpc.CallOption) (*GetTunnelResponse, error) {
	out := new(GetTunnelResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/GetTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) GetAllTunnels(ctx context.Context, in *GetAllTunnelsRequest, opts ...grpc.CallOption) (*GetAllTunnelsResponse, error) {
	out := new(GetAllTunnelsResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/GetAllTunnels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) CreateTunnel(ctx context.Context, in *CreateTunnelRequest, opts ...grpc.CallOption) (*CreateTunnelResponse, error) {
	out := new(CreateTunnelResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/CreateTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) StopTunnel(ctx context.Context, in *StopTunnelRequest, opts ...grpc.CallOption) (*StopTunnelResponse, error) {
	out := new(StopTunnelResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/StopTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) ResumeTunnel(ctx context.Context, in *ResumeTunnelRequest, opts ...grpc.CallOption) (*ResumeTunnelResponse, error) {
	out := new(ResumeTunnelResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/ResumeTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) UpdateTunnel(ctx context.Context, in *UpdateTunnelRequest, opts ...grpc.CallOption) (*UpdateTunnelResponse, error) {
	out := new(UpdateTunnelResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/UpdateTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) DeleteTunnel(ctx context.Context, in *DeleteTunnelRequest, opts ...grpc.CallOption) (*DeleteTunnelResponse, error) {
	out := new(DeleteTunnelResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/DeleteTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) GetServerOptions(ctx context.Context, in *GetServerOptionsRequest, opts ...grpc.CallOption) (*GetServerOptionsResponse, error) {
	out := new(GetServerOptionsResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/GetServerOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlumberServerServer is the server API for PlumberServer service.
type PlumberServerServer interface {
	// List configured/known connections
	GetAllConnections(context.Context, *GetAllConnectionsRequest) (*GetAllConnectionsResponse, error)
	// Fetch a specific connection by ID
	GetConnection(context.Context, *GetConnectionRequest) (*GetConnectionResponse, error)
	// Create a connection in plumber
	CreateConnection(context.Context, *CreateConnectionRequest) (*CreateConnectionResponse, error)
	// Test a connection before saving its configuration
	TestConnection(context.Context, *TestConnectionRequest) (*TestConnectionResponse, error)
	// Any active connections will be restarted
	UpdateConnection(context.Context, *UpdateConnectionRequest) (*UpdateConnectionResponse, error)
	// If there are any active connections, delete will cause them to get closed
	DeleteConnection(context.Context, *DeleteConnectionRequest) (*DeleteConnectionResponse, error)
	GetRead(context.Context, *GetReadRequest) (*GetReadResponse, error)
	GetAllRead(context.Context, *GetAllReadRequest) (*GetAllReadResponse, error)
	CreateRead(context.Context, *CreateReadRequest) (*CreateReadResponse, error)
	UpdateRead(context.Context, *UpdateReadRequest) (*UpdateReadResponse, error)
	DeleteRead(context.Context, *DeleteReadRequest) (*DeleteReadResponse, error)
	GetWrite(context.Context, *GetWriteRequest) (*GetWriteResponse, error)
	GetAllWrite(context.Context, *GetAllWriteRequest) (*GetAllWriteResponse, error)
	CreateWrite(context.Context, *CreateWriteRequest) (*CreateWriteResponse, error)
	UpdateWrite(context.Context, *UpdateWriteRequest) (*UpdateWriteResponse, error)
	DeleteWrite(context.Context, *DeleteWriteRequest) (*DeleteWriteResponse, error)
	GetChannel(context.Context, *GetChannelRequest) (*GetChannelResponse, error)
	GetAllChannels(context.Context, *GetAllChannelsRequest) (*GetAllChannelsResponse, error)
	CreateChannel(context.Context, *CreateChannelRequest) (*CreateChannelResponse, error)
	UpdateChannel(context.Context, *UpdateChannelRequest) (*UpdateChannelResponse, error)
	DeleteChannel(context.Context, *DeleteChannelRequest) (*DeleteChannelResponse, error)
	StopChannel(context.Context, *StopChannelRequest) (*StopChannelResponse, error)
	ResumeChannel(context.Context, *ResumeChannelRequest) (*ResumeChannelResponse, error)
	GetTunnel(context.Context, *GetTunnelRequest) (*GetTunnelResponse, error)
	GetAllTunnels(context.Context, *GetAllTunnelsRequest) (*GetAllTunnelsResponse, error)
	CreateTunnel(context.Context, *CreateTunnelRequest) (*CreateTunnelResponse, error)
	StopTunnel(context.Context, *StopTunnelRequest) (*StopTunnelResponse, error)
	ResumeTunnel(context.Context, *ResumeTunnelRequest) (*ResumeTunnelResponse, error)
	UpdateTunnel(context.Context, *UpdateTunnelRequest) (*UpdateTunnelResponse, error)
	DeleteTunnel(context.Context, *DeleteTunnelRequest) (*DeleteTunnelResponse, error)
	GetServerOptions(context.Context, *GetServerOptionsRequest) (*GetServerOptionsResponse, error)
}

// UnimplementedPlumberServerServer can be embedded to have forward compatible implementations.
type UnimplementedPlumberServerServer struct {
}

func (*UnimplementedPlumberServerServer) GetAllConnections(ctx context.Context, req *GetAllConnectionsRequest) (*GetAllConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllConnections not implemented")
}
func (*UnimplementedPlumberServerServer) GetConnection(ctx context.Context, req *GetConnectionRequest) (*GetConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnection not implemented")
}
func (*UnimplementedPlumberServerServer) CreateConnection(ctx context.Context, req *CreateConnectionRequest) (*CreateConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnection not implemented")
}
func (*UnimplementedPlumberServerServer) TestConnection(ctx context.Context, req *TestConnectionRequest) (*TestConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestConnection not implemented")
}
func (*UnimplementedPlumberServerServer) UpdateConnection(ctx context.Context, req *UpdateConnectionRequest) (*UpdateConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConnection not implemented")
}
func (*UnimplementedPlumberServerServer) DeleteConnection(ctx context.Context, req *DeleteConnectionRequest) (*DeleteConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConnection not implemented")
}
func (*UnimplementedPlumberServerServer) GetRead(ctx context.Context, req *GetReadRequest) (*GetReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRead not implemented")
}
func (*UnimplementedPlumberServerServer) GetAllRead(ctx context.Context, req *GetAllReadRequest) (*GetAllReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRead not implemented")
}
func (*UnimplementedPlumberServerServer) CreateRead(ctx context.Context, req *CreateReadRequest) (*CreateReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRead not implemented")
}
func (*UnimplementedPlumberServerServer) UpdateRead(ctx context.Context, req *UpdateReadRequest) (*UpdateReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRead not implemented")
}
func (*UnimplementedPlumberServerServer) DeleteRead(ctx context.Context, req *DeleteReadRequest) (*DeleteReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRead not implemented")
}
func (*UnimplementedPlumberServerServer) GetWrite(ctx context.Context, req *GetWriteRequest) (*GetWriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWrite not implemented")
}
func (*UnimplementedPlumberServerServer) GetAllWrite(ctx context.Context, req *GetAllWriteRequest) (*GetAllWriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllWrite not implemented")
}
func (*UnimplementedPlumberServerServer) CreateWrite(ctx context.Context, req *CreateWriteRequest) (*CreateWriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWrite not implemented")
}
func (*UnimplementedPlumberServerServer) UpdateWrite(ctx context.Context, req *UpdateWriteRequest) (*UpdateWriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWrite not implemented")
}
func (*UnimplementedPlumberServerServer) DeleteWrite(ctx context.Context, req *DeleteWriteRequest) (*DeleteWriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWrite not implemented")
}
func (*UnimplementedPlumberServerServer) GetChannel(ctx context.Context, req *GetChannelRequest) (*GetChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannel not implemented")
}
func (*UnimplementedPlumberServerServer) GetAllChannels(ctx context.Context, req *GetAllChannelsRequest) (*GetAllChannelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllChannels not implemented")
}
func (*UnimplementedPlumberServerServer) CreateChannel(ctx context.Context, req *CreateChannelRequest) (*CreateChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChannel not implemented")
}
func (*UnimplementedPlumberServerServer) UpdateChannel(ctx context.Context, req *UpdateChannelRequest) (*UpdateChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannel not implemented")
}
func (*UnimplementedPlumberServerServer) DeleteChannel(ctx context.Context, req *DeleteChannelRequest) (*DeleteChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannel not implemented")
}
func (*UnimplementedPlumberServerServer) StopChannel(ctx context.Context, req *StopChannelRequest) (*StopChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopChannel not implemented")
}
func (*UnimplementedPlumberServerServer) ResumeChannel(ctx context.Context, req *ResumeChannelRequest) (*ResumeChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeChannel not implemented")
}
func (*UnimplementedPlumberServerServer) GetTunnel(ctx context.Context, req *GetTunnelRequest) (*GetTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTunnel not implemented")
}
func (*UnimplementedPlumberServerServer) GetAllTunnels(ctx context.Context, req *GetAllTunnelsRequest) (*GetAllTunnelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTunnels not implemented")
}
func (*UnimplementedPlumberServerServer) CreateTunnel(ctx context.Context, req *CreateTunnelRequest) (*CreateTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTunnel not implemented")
}
func (*UnimplementedPlumberServerServer) StopTunnel(ctx context.Context, req *StopTunnelRequest) (*StopTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopTunnel not implemented")
}
func (*UnimplementedPlumberServerServer) ResumeTunnel(ctx context.Context, req *ResumeTunnelRequest) (*ResumeTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeTunnel not implemented")
}
func (*UnimplementedPlumberServerServer) UpdateTunnel(ctx context.Context, req *UpdateTunnelRequest) (*UpdateTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTunnel not implemented")
}
func (*UnimplementedPlumberServerServer) DeleteTunnel(ctx context.Context, req *DeleteTunnelRequest) (*DeleteTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTunnel not implemented")
}
func (*UnimplementedPlumberServerServer) GetServerOptions(ctx context.Context, req *GetServerOptionsRequest) (*GetServerOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerOptions not implemented")
}

func RegisterPlumberServerServer(s *grpc.Server, srv PlumberServerServer) {
	s.RegisterService(&_PlumberServer_serviceDesc, srv)
}

func _PlumberServer_GetAllConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllConnectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).GetAllConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/GetAllConnections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).GetAllConnections(ctx, req.(*GetAllConnectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_GetConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).GetConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/GetConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).GetConnection(ctx, req.(*GetConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_CreateConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).CreateConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/CreateConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).CreateConnection(ctx, req.(*CreateConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_TestConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).TestConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/TestConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).TestConnection(ctx, req.(*TestConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_UpdateConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).UpdateConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/UpdateConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).UpdateConnection(ctx, req.(*UpdateConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_DeleteConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).DeleteConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/DeleteConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).DeleteConnection(ctx, req.(*DeleteConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_GetRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).GetRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/GetRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).GetRead(ctx, req.(*GetReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_GetAllRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).GetAllRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/GetAllRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).GetAllRead(ctx, req.(*GetAllReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_CreateRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).CreateRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/CreateRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).CreateRead(ctx, req.(*CreateReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_UpdateRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).UpdateRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/UpdateRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).UpdateRead(ctx, req.(*UpdateReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_DeleteRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).DeleteRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/DeleteRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).DeleteRead(ctx, req.(*DeleteReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_GetWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).GetWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/GetWrite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).GetWrite(ctx, req.(*GetWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_GetAllWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).GetAllWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/GetAllWrite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).GetAllWrite(ctx, req.(*GetAllWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_CreateWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).CreateWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/CreateWrite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).CreateWrite(ctx, req.(*CreateWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_UpdateWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).UpdateWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/UpdateWrite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).UpdateWrite(ctx, req.(*UpdateWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_DeleteWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).DeleteWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/DeleteWrite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).DeleteWrite(ctx, req.(*DeleteWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_GetChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).GetChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/GetChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).GetChannel(ctx, req.(*GetChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_GetAllChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).GetAllChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/GetAllChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).GetAllChannels(ctx, req.(*GetAllChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_CreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).CreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/CreateChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).CreateChannel(ctx, req.(*CreateChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_UpdateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).UpdateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/UpdateChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).UpdateChannel(ctx, req.(*UpdateChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_DeleteChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).DeleteChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/DeleteChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).DeleteChannel(ctx, req.(*DeleteChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_StopChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).StopChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/StopChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).StopChannel(ctx, req.(*StopChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_ResumeChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).ResumeChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/ResumeChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).ResumeChannel(ctx, req.(*ResumeChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_GetTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).GetTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/GetTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).GetTunnel(ctx, req.(*GetTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_GetAllTunnels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTunnelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).GetAllTunnels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/GetAllTunnels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).GetAllTunnels(ctx, req.(*GetAllTunnelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_CreateTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).CreateTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/CreateTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).CreateTunnel(ctx, req.(*CreateTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_StopTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).StopTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/StopTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).StopTunnel(ctx, req.(*StopTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_ResumeTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).ResumeTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/ResumeTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).ResumeTunnel(ctx, req.(*ResumeTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_UpdateTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).UpdateTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/UpdateTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).UpdateTunnel(ctx, req.(*UpdateTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_DeleteTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).DeleteTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/DeleteTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).DeleteTunnel(ctx, req.(*DeleteTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_GetServerOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).GetServerOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/GetServerOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).GetServerOptions(ctx, req.(*GetServerOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PlumberServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.PlumberServer",
	HandlerType: (*PlumberServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllConnections",
			Handler:    _PlumberServer_GetAllConnections_Handler,
		},
		{
			MethodName: "GetConnection",
			Handler:    _PlumberServer_GetConnection_Handler,
		},
		{
			MethodName: "CreateConnection",
			Handler:    _PlumberServer_CreateConnection_Handler,
		},
		{
			MethodName: "TestConnection",
			Handler:    _PlumberServer_TestConnection_Handler,
		},
		{
			MethodName: "UpdateConnection",
			Handler:    _PlumberServer_UpdateConnection_Handler,
		},
		{
			MethodName: "DeleteConnection",
			Handler:    _PlumberServer_DeleteConnection_Handler,
		},
		{
			MethodName: "GetRead",
			Handler:    _PlumberServer_GetRead_Handler,
		},
		{
			MethodName: "GetAllRead",
			Handler:    _PlumberServer_GetAllRead_Handler,
		},
		{
			MethodName: "CreateRead",
			Handler:    _PlumberServer_CreateRead_Handler,
		},
		{
			MethodName: "UpdateRead",
			Handler:    _PlumberServer_UpdateRead_Handler,
		},
		{
			MethodName: "DeleteRead",
			Handler:    _PlumberServer_DeleteRead_Handler,
		},
		{
			MethodName: "GetWrite",
			Handler:    _PlumberServer_GetWrite_Handler,
		},
		{
			MethodName: "GetAllWrite",
			Handler:    _PlumberServer_GetAllWrite_Handler,
		},
		{
			MethodName: "CreateWrite",
			Handler:    _PlumberServer_CreateWrite_Handler,
		},
		{
			MethodName: "UpdateWrite",
			Handler:    _PlumberServer_UpdateWrite_Handler,
		},
		{
			MethodName: "DeleteWrite",
			Handler:    _PlumberServer_DeleteWrite_Handler,
		},
		{
			MethodName: "GetChannel",
			Handler:    _PlumberServer_GetChannel_Handler,
		},
		{
			MethodName: "GetAllChannels",
			Handler:    _PlumberServer_GetAllChannels_Handler,
		},
		{
			MethodName: "CreateChannel",
			Handler:    _PlumberServer_CreateChannel_Handler,
		},
		{
			MethodName: "UpdateChannel",
			Handler:    _PlumberServer_UpdateChannel_Handler,
		},
		{
			MethodName: "DeleteChannel",
			Handler:    _PlumberServer_DeleteChannel_Handler,
		},
		{
			MethodName: "StopChannel",
			Handler:    _PlumberServer_StopChannel_Handler,
		},
		{
			MethodName: "ResumeChannel",
			Handler:    _PlumberServer_ResumeChannel_Handler,
		},
		{
			MethodName: "GetTunnel",
			Handler:    _PlumberServer_GetTunnel_Handler,
		},
		{
			MethodName: "GetAllTunnels",
			Handler:    _PlumberServer_GetAllTunnels_Handler,
		},
		{
			MethodName: "CreateTunnel",
			Handler:    _PlumberServer_CreateTunnel_Handler,
		},
		{
			MethodName: "StopTunnel",
			Handler:    _PlumberServer_StopTunnel_Handler,
		},
		{
			MethodName: "ResumeTunnel",
			Handler:    _PlumberServer_ResumeTunnel_Handler,
		},
		{
			MethodName: "UpdateTunnel",
			Handler:    _PlumberServer_UpdateTunnel_Handler,
		},
		{
			MethodName: "DeleteTunnel",
			Handler:    _PlumberServer_DeleteTunnel_Handler,
		},
		{
			MethodName: "GetServerOptions",
			Handler:    _PlumberServer_GetServerOptions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ps_base.proto",
}
