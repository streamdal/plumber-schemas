// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ps_args_aws_kinesis.proto

package args

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AWSKinesisConn struct {
	// @gotags: kong:"env=AWS_DEFAULT_REGION,hidden"
	AwsRegion string `protobuf:"bytes,1,opt,name=aws_region,json=awsRegion,proto3" json:"aws_region,omitempty" kong:"env=AWS_DEFAULT_REGION,hidden"`
	// @gotags: kong:"env=AWS_ACCESS_KEY_ID,hidden"
	AwsAccessKeyId string `protobuf:"bytes,2,opt,name=aws_access_key_id,json=awsAccessKeyId,proto3" json:"aws_access_key_id,omitempty" kong:"env=AWS_ACCESS_KEY_ID,hidden"`
	// @gotags: kong:"env=AWS_SECRET_ACCESS_KEY,hidden"
	AwsSecretAccessKey string `protobuf:"bytes,3,opt,name=aws_secret_access_key,json=awsSecretAccessKey,proto3" json:"aws_secret_access_key,omitempty" kong:"env=AWS_SECRET_ACCESS_KEY,hidden"`
	// @gotags: kong:"env=AWS_PROFILE,hidden"
	AwsProfile           string   `protobuf:"bytes,4,opt,name=aws_profile,json=awsProfile,proto3" json:"aws_profile,omitempty" kong:"env=AWS_PROFILE,hidden"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AWSKinesisConn) Reset()         { *m = AWSKinesisConn{} }
func (m *AWSKinesisConn) String() string { return proto.CompactTextString(m) }
func (*AWSKinesisConn) ProtoMessage()    {}
func (*AWSKinesisConn) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f353884fb0804cc, []int{0}
}

func (m *AWSKinesisConn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AWSKinesisConn.Unmarshal(m, b)
}
func (m *AWSKinesisConn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AWSKinesisConn.Marshal(b, m, deterministic)
}
func (m *AWSKinesisConn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AWSKinesisConn.Merge(m, src)
}
func (m *AWSKinesisConn) XXX_Size() int {
	return xxx_messageInfo_AWSKinesisConn.Size(m)
}
func (m *AWSKinesisConn) XXX_DiscardUnknown() {
	xxx_messageInfo_AWSKinesisConn.DiscardUnknown(m)
}

var xxx_messageInfo_AWSKinesisConn proto.InternalMessageInfo

func (m *AWSKinesisConn) GetAwsRegion() string {
	if m != nil {
		return m.AwsRegion
	}
	return ""
}

func (m *AWSKinesisConn) GetAwsAccessKeyId() string {
	if m != nil {
		return m.AwsAccessKeyId
	}
	return ""
}

func (m *AWSKinesisConn) GetAwsSecretAccessKey() string {
	if m != nil {
		return m.AwsSecretAccessKey
	}
	return ""
}

func (m *AWSKinesisConn) GetAwsProfile() string {
	if m != nil {
		return m.AwsProfile
	}
	return ""
}

type AWSKinesisReadArgs struct {
	// @gotags: kong:"help='Stream Name',required"
	Stream string `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty" kong:"help='Stream Name',required"`
	// @gotags: kong:"help='Shard ID. If empty, will read from all shards'"
	Shard string `protobuf:"bytes,2,opt,name=shard,proto3" json:"shard,omitempty" kong:"help='Shard ID. If empty, will read from all shards'"`
	// @gotags: kong:"help='Maximum number of records to read from kinesis',default=1"
	MaxRecords int64 `protobuf:"varint,3,opt,name=max_records,json=maxRecords,proto3" json:"max_records,omitempty" kong:"help='Maximum number of records to read from kinesis',default=1"`
	// @gotags: kong:"help='Deliver starting at this timestamp',xor=kinesis_delivery_option"
	ReadFromTimestamp int64 `protobuf:"varint,4,opt,name=read_from_timestamp,json=readFromTimestamp,proto3" json:"read_from_timestamp,omitempty" kong:"help='Deliver starting at this timestamp',xor=kinesis_delivery_option"`
	// @gotags: kong:"help='Deliver messages starting at sequence number',xor=kinesis_delivery_option"
	ReadSequenceNumber string `protobuf:"bytes,5,opt,name=read_sequence_number,json=readSequenceNumber,proto3" json:"read_sequence_number,omitempty" kong:"help='Deliver messages starting at sequence number',xor=kinesis_delivery_option"`
	// @gotags: kong:"help='Deliver messages starting after this sequence number',xor=kinesis_delivery_option"
	ReadAfterSequenceNumber string `protobuf:"bytes,6,opt,name=read_after_sequence_number,json=readAfterSequenceNumber,proto3" json:"read_after_sequence_number,omitempty" kong:"help='Deliver messages starting after this sequence number',xor=kinesis_delivery_option"`
	// @gotags: kong:"help='Deliver messages starting at the last untrimmed record in the shard in the system, which is the oldest data record in the shard.',xor=kinesis_delivery_option"
	ReadTrimHorizon bool `protobuf:"varint,7,opt,name=read_trim_horizon,json=readTrimHorizon,proto3" json:"read_trim_horizon,omitempty" kong:"help='Deliver messages starting at the last untrimmed record in the shard in the system, which is the oldest data record in the shard.',xor=kinesis_delivery_option"`
	// @gotags: kong:"help='Deliver messages after the most recent record',xor=kinesis_delivery_option"
	ReadLatest           bool     `protobuf:"varint,8,opt,name=read_latest,json=readLatest,proto3" json:"read_latest,omitempty" kong:"help='Deliver messages after the most recent record',xor=kinesis_delivery_option"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AWSKinesisReadArgs) Reset()         { *m = AWSKinesisReadArgs{} }
func (m *AWSKinesisReadArgs) String() string { return proto.CompactTextString(m) }
func (*AWSKinesisReadArgs) ProtoMessage()    {}
func (*AWSKinesisReadArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f353884fb0804cc, []int{1}
}

func (m *AWSKinesisReadArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AWSKinesisReadArgs.Unmarshal(m, b)
}
func (m *AWSKinesisReadArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AWSKinesisReadArgs.Marshal(b, m, deterministic)
}
func (m *AWSKinesisReadArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AWSKinesisReadArgs.Merge(m, src)
}
func (m *AWSKinesisReadArgs) XXX_Size() int {
	return xxx_messageInfo_AWSKinesisReadArgs.Size(m)
}
func (m *AWSKinesisReadArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_AWSKinesisReadArgs.DiscardUnknown(m)
}

var xxx_messageInfo_AWSKinesisReadArgs proto.InternalMessageInfo

func (m *AWSKinesisReadArgs) GetStream() string {
	if m != nil {
		return m.Stream
	}
	return ""
}

func (m *AWSKinesisReadArgs) GetShard() string {
	if m != nil {
		return m.Shard
	}
	return ""
}

func (m *AWSKinesisReadArgs) GetMaxRecords() int64 {
	if m != nil {
		return m.MaxRecords
	}
	return 0
}

func (m *AWSKinesisReadArgs) GetReadFromTimestamp() int64 {
	if m != nil {
		return m.ReadFromTimestamp
	}
	return 0
}

func (m *AWSKinesisReadArgs) GetReadSequenceNumber() string {
	if m != nil {
		return m.ReadSequenceNumber
	}
	return ""
}

func (m *AWSKinesisReadArgs) GetReadAfterSequenceNumber() string {
	if m != nil {
		return m.ReadAfterSequenceNumber
	}
	return ""
}

func (m *AWSKinesisReadArgs) GetReadTrimHorizon() bool {
	if m != nil {
		return m.ReadTrimHorizon
	}
	return false
}

func (m *AWSKinesisReadArgs) GetReadLatest() bool {
	if m != nil {
		return m.ReadLatest
	}
	return false
}

type AWSKinesisWriteArgs struct {
	// @gotags: kong:"help='Stream Name',required"
	Stream string `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty" kong:"help='Stream Name',required"`
	// @gotags: kong:"help='Partition Key',required"
	PartitionKey string `protobuf:"bytes,2,opt,name=partition_key,json=partitionKey,proto3" json:"partition_key,omitempty" kong:"help='Partition Key',required"`
	// @gotags: kong:"help='Sequence number for ordering'"
	SequenceNumber       string   `protobuf:"bytes,3,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty" kong:"help='Sequence number for ordering'"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AWSKinesisWriteArgs) Reset()         { *m = AWSKinesisWriteArgs{} }
func (m *AWSKinesisWriteArgs) String() string { return proto.CompactTextString(m) }
func (*AWSKinesisWriteArgs) ProtoMessage()    {}
func (*AWSKinesisWriteArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f353884fb0804cc, []int{2}
}

func (m *AWSKinesisWriteArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AWSKinesisWriteArgs.Unmarshal(m, b)
}
func (m *AWSKinesisWriteArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AWSKinesisWriteArgs.Marshal(b, m, deterministic)
}
func (m *AWSKinesisWriteArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AWSKinesisWriteArgs.Merge(m, src)
}
func (m *AWSKinesisWriteArgs) XXX_Size() int {
	return xxx_messageInfo_AWSKinesisWriteArgs.Size(m)
}
func (m *AWSKinesisWriteArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_AWSKinesisWriteArgs.DiscardUnknown(m)
}

var xxx_messageInfo_AWSKinesisWriteArgs proto.InternalMessageInfo

func (m *AWSKinesisWriteArgs) GetStream() string {
	if m != nil {
		return m.Stream
	}
	return ""
}

func (m *AWSKinesisWriteArgs) GetPartitionKey() string {
	if m != nil {
		return m.PartitionKey
	}
	return ""
}

func (m *AWSKinesisWriteArgs) GetSequenceNumber() string {
	if m != nil {
		return m.SequenceNumber
	}
	return ""
}

func init() {
	proto.RegisterType((*AWSKinesisConn)(nil), "protos.args.AWSKinesisConn")
	proto.RegisterType((*AWSKinesisReadArgs)(nil), "protos.args.AWSKinesisReadArgs")
	proto.RegisterType((*AWSKinesisWriteArgs)(nil), "protos.args.AWSKinesisWriteArgs")
}

func init() { proto.RegisterFile("ps_args_aws_kinesis.proto", fileDescriptor_7f353884fb0804cc) }

var fileDescriptor_7f353884fb0804cc = []byte{
	// 453 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x51, 0x6b, 0x13, 0x41,
	0x14, 0x85, 0x49, 0x63, 0x63, 0x7b, 0xab, 0x29, 0x9d, 0x56, 0x5d, 0x05, 0xb1, 0xc4, 0x07, 0xab,
	0x60, 0x56, 0xf1, 0x49, 0xfa, 0x14, 0x05, 0x51, 0x2a, 0x22, 0x9b, 0x42, 0xc1, 0x97, 0x61, 0x76,
	0xf7, 0x66, 0x77, 0x68, 0x66, 0x67, 0xbd, 0x77, 0x42, 0x5a, 0xfd, 0x4f, 0xfe, 0x15, 0xff, 0x92,
	0xcc, 0xdd, 0xb4, 0xd5, 0x0a, 0x7d, 0x5a, 0xe6, 0x9c, 0xef, 0xb0, 0xe7, 0xce, 0x1d, 0x78, 0xd8,
	0xb2, 0x36, 0x54, 0xb1, 0x36, 0x4b, 0xd6, 0xa7, 0xb6, 0x41, 0xb6, 0x3c, 0x6e, 0xc9, 0x07, 0xaf,
	0xb6, 0xe4, 0xc3, 0xe3, 0x68, 0x8f, 0x7e, 0xf5, 0x60, 0x38, 0x39, 0x99, 0x1e, 0x75, 0xc4, 0x7b,
	0xdf, 0x34, 0xea, 0x31, 0x40, 0x0c, 0x11, 0x56, 0xd6, 0x37, 0x49, 0x6f, 0xbf, 0x77, 0xb0, 0x99,
	0x6d, 0x9a, 0x25, 0x67, 0x22, 0xa8, 0xe7, 0xb0, 0x13, 0x6d, 0x53, 0x14, 0xc8, 0xac, 0x4f, 0xf1,
	0x5c, 0xdb, 0x32, 0x59, 0x13, 0x6a, 0x68, 0x96, 0x3c, 0x11, 0xfd, 0x08, 0xcf, 0x3f, 0x95, 0xea,
	0x35, 0xdc, 0x8b, 0x28, 0x63, 0x41, 0x18, 0xfe, 0x4a, 0x24, 0x7d, 0xc1, 0x95, 0x59, 0xf2, 0x54,
	0xbc, 0xcb, 0x90, 0x7a, 0x02, 0x5b, 0x31, 0xd2, 0x92, 0x9f, 0xd9, 0x39, 0x26, 0xb7, 0x04, 0x8c,
	0x7d, 0xbe, 0x76, 0xca, 0xe8, 0xf7, 0x1a, 0xa8, 0xab, 0xc2, 0x19, 0x9a, 0x72, 0x42, 0x15, 0xab,
	0xfb, 0x30, 0xe0, 0x40, 0x68, 0xdc, 0xaa, 0xf0, 0xea, 0xa4, 0xf6, 0x60, 0x9d, 0x6b, 0x43, 0x17,
	0x0d, 0xbb, 0x43, 0xfc, 0x8b, 0x33, 0x67, 0x9a, 0xb0, 0xf0, 0x54, 0xb2, 0xd4, 0xe9, 0x67, 0xe0,
	0xcc, 0x59, 0xd6, 0x29, 0x6a, 0x0c, 0xbb, 0x84, 0xa6, 0xd4, 0x33, 0xf2, 0x4e, 0x07, 0xeb, 0x90,
	0x83, 0x71, 0xad, 0xd4, 0xe9, 0x67, 0x3b, 0xd1, 0xfa, 0x40, 0xde, 0x1d, 0x5f, 0x18, 0xea, 0x15,
	0xec, 0x09, 0xcf, 0xf8, 0x7d, 0x81, 0x4d, 0x81, 0xba, 0x59, 0xb8, 0x1c, 0x29, 0x59, 0xef, 0x06,
	0x8d, 0xde, 0x74, 0x65, 0x7d, 0x11, 0x47, 0x1d, 0xc2, 0x23, 0x49, 0x98, 0x59, 0x40, 0xfa, 0x2f,
	0x37, 0x90, 0xdc, 0x83, 0x48, 0x4c, 0x22, 0x70, 0x2d, 0xfc, 0x02, 0xa4, 0x83, 0x0e, 0x64, 0x9d,
	0xae, 0x3d, 0xd9, 0x1f, 0xbe, 0x49, 0x6e, 0xef, 0xf7, 0x0e, 0x36, 0xb2, 0xed, 0x68, 0x1c, 0x93,
	0x75, 0x1f, 0x3b, 0x39, 0xce, 0x2a, 0xec, 0xdc, 0x04, 0xe4, 0x90, 0x6c, 0x08, 0x05, 0x51, 0xfa,
	0x2c, 0xca, 0xe8, 0x27, 0xec, 0x5e, 0x5d, 0xe8, 0x09, 0xd9, 0x80, 0x37, 0xde, 0xe8, 0x53, 0xb8,
	0xdb, 0x1a, 0x0a, 0x36, 0x58, 0xdf, 0xc8, 0x32, 0xbb, 0x9b, 0xbd, 0x73, 0x29, 0xc6, 0x35, 0x3e,
	0x83, 0xed, 0xeb, 0x23, 0x75, 0x3b, 0x1f, 0xf2, 0x3f, 0x93, 0xbc, 0x3b, 0xfc, 0xf6, 0xb6, 0xb2,
	0xa1, 0x5e, 0xe4, 0xe3, 0xc2, 0xbb, 0x34, 0x37, 0xa1, 0xa8, 0x0b, 0x4f, 0x6d, 0xda, 0xce, 0xc5,
	0x7f, 0xc9, 0x45, 0x8d, 0xce, 0x70, 0x9a, 0x2f, 0xec, 0xbc, 0x4c, 0x2b, 0x9f, 0x76, 0x8f, 0x37,
	0x8d, 0x8f, 0x37, 0x1f, 0xc8, 0xe1, 0xcd, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6e, 0x7e, 0x51,
	0x21, 0xed, 0x02, 0x00, 0x00,
}
