// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ps_args_postgres.proto

package args

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PostgresConn struct {
	// @gotags: kong:"help='Postgres server hostname',env='PLUMBER_RELAY_CDCPOSTGRES_HOSTNAME',required"
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" kong:"help='Postgres server hostname',env='PLUMBER_RELAY_CDCPOSTGRES_HOSTNAME',required"`
	// @gotags: kong:"help='Postgres port',env='PLUMBER_RELAY_CDCPOSTGRES_PORT',default=5432,required"
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty" kong:"help='Postgres port',env='PLUMBER_RELAY_CDCPOSTGRES_PORT',default=5432,required"`
	// @gotags: kong:"help='Postgres username',env='PLUMBER_RELAY_CDCPOSTGRES_USERNAME',required"
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty" kong:"help='Postgres username',env='PLUMBER_RELAY_CDCPOSTGRES_USERNAME',required"`
	// @gotags: kong:"help='Postgres server password',env='PLUMBER_RELAY_CDCPOSTGRES_PASSWORD'"
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty" kong:"help='Postgres server password',env='PLUMBER_RELAY_CDCPOSTGRES_PASSWORD'"`
	// @gotags: kong:"help='Postgres server database name',env='PLUMBER_RELAY_CDCPOSTGRES_DATABASE',required"
	Database string `protobuf:"bytes,5,opt,name=database,proto3" json:"database,omitempty" kong:"help='Postgres server database name',env='PLUMBER_RELAY_CDCPOSTGRES_DATABASE',required"`
	// @gotags: kong:"help='Enable TLS usage',env='PLUMBER_RELAY_CDCPOSTGRES_USE_TLS'"
	UseTls bool `protobuf:"varint,6,opt,name=use_tls,json=useTls,proto3" json:"use_tls,omitempty" kong:"help='Enable TLS usage',env='PLUMBER_RELAY_CDCPOSTGRES_USE_TLS'"`
	// @gotags: kong:"help='Whether to verify server certificate',env='PLUMBER_RELAY_CDCPOSTGRES_SKIP_VERIFY_TLS'"
	TlsSkipVerify        bool     `protobuf:"varint,7,opt,name=tls_skip_verify,json=tlsSkipVerify,proto3" json:"tls_skip_verify,omitempty" kong:"help='Whether to verify server certificate',env='PLUMBER_RELAY_CDCPOSTGRES_SKIP_VERIFY_TLS'"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PostgresConn) Reset()         { *m = PostgresConn{} }
func (m *PostgresConn) String() string { return proto.CompactTextString(m) }
func (*PostgresConn) ProtoMessage()    {}
func (*PostgresConn) Descriptor() ([]byte, []int) {
	return fileDescriptor_70e195e7c743e225, []int{0}
}

func (m *PostgresConn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PostgresConn.Unmarshal(m, b)
}
func (m *PostgresConn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PostgresConn.Marshal(b, m, deterministic)
}
func (m *PostgresConn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostgresConn.Merge(m, src)
}
func (m *PostgresConn) XXX_Size() int {
	return xxx_messageInfo_PostgresConn.Size(m)
}
func (m *PostgresConn) XXX_DiscardUnknown() {
	xxx_messageInfo_PostgresConn.DiscardUnknown(m)
}

var xxx_messageInfo_PostgresConn proto.InternalMessageInfo

func (m *PostgresConn) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *PostgresConn) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *PostgresConn) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *PostgresConn) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *PostgresConn) GetDatabase() string {
	if m != nil {
		return m.Database
	}
	return ""
}

func (m *PostgresConn) GetUseTls() bool {
	if m != nil {
		return m.UseTls
	}
	return false
}

func (m *PostgresConn) GetTlsSkipVerify() bool {
	if m != nil {
		return m.TlsSkipVerify
	}
	return false
}

type PostgresReadArgs struct {
	// @gotags: kong:"help='CDC replication slot name',env='PLUMBER_RELAY_CDCPOSTGRES_SLOT',required"
	ReplicationSlotName string `protobuf:"bytes,2,opt,name=replication_slot_name,json=replicationSlotName,proto3" json:"replication_slot_name,omitempty" kong:"help='CDC replication slot name',env='PLUMBER_RELAY_CDCPOSTGRES_SLOT',required"`
	// @gotags: kong:"help='CDC publisher name',env='PLUMBER_RELAY_CDCPOSTGRES_PUBLISHER',required"
	PublisherName        string   `protobuf:"bytes,3,opt,name=publisher_name,json=publisherName,proto3" json:"publisher_name,omitempty" kong:"help='CDC publisher name',env='PLUMBER_RELAY_CDCPOSTGRES_PUBLISHER',required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PostgresReadArgs) Reset()         { *m = PostgresReadArgs{} }
func (m *PostgresReadArgs) String() string { return proto.CompactTextString(m) }
func (*PostgresReadArgs) ProtoMessage()    {}
func (*PostgresReadArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_70e195e7c743e225, []int{1}
}

func (m *PostgresReadArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PostgresReadArgs.Unmarshal(m, b)
}
func (m *PostgresReadArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PostgresReadArgs.Marshal(b, m, deterministic)
}
func (m *PostgresReadArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostgresReadArgs.Merge(m, src)
}
func (m *PostgresReadArgs) XXX_Size() int {
	return xxx_messageInfo_PostgresReadArgs.Size(m)
}
func (m *PostgresReadArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_PostgresReadArgs.DiscardUnknown(m)
}

var xxx_messageInfo_PostgresReadArgs proto.InternalMessageInfo

func (m *PostgresReadArgs) GetReplicationSlotName() string {
	if m != nil {
		return m.ReplicationSlotName
	}
	return ""
}

func (m *PostgresReadArgs) GetPublisherName() string {
	if m != nil {
		return m.PublisherName
	}
	return ""
}

func init() {
	proto.RegisterType((*PostgresConn)(nil), "protos.args.PostgresConn")
	proto.RegisterType((*PostgresReadArgs)(nil), "protos.args.PostgresReadArgs")
}

func init() { proto.RegisterFile("ps_args_postgres.proto", fileDescriptor_70e195e7c743e225) }

var fileDescriptor_70e195e7c743e225 = []byte{
	// 310 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x41, 0x4b, 0x33, 0x31,
	0x10, 0x86, 0xd9, 0x7e, 0xfd, 0xda, 0x1a, 0xad, 0x4a, 0x44, 0x0d, 0x9e, 0x4a, 0x41, 0xe9, 0xc5,
	0x2e, 0xe8, 0x49, 0x3c, 0xa9, 0x77, 0x91, 0xad, 0x78, 0xf0, 0x12, 0xb2, 0xbb, 0xe3, 0x6e, 0x68,
	0x76, 0x13, 0x66, 0x12, 0xc5, 0x9f, 0xe9, 0x3f, 0x92, 0x4d, 0xdd, 0xd2, 0x53, 0xf2, 0xcc, 0xf3,
	0x42, 0xf2, 0x0e, 0x3b, 0x73, 0x24, 0x15, 0x56, 0x24, 0x9d, 0x25, 0x5f, 0x21, 0xd0, 0xd2, 0xa1,
	0xf5, 0x96, 0xef, 0xc7, 0x83, 0x96, 0x9d, 0x9b, 0xff, 0x24, 0xec, 0xe0, 0xe5, 0xcf, 0x3f, 0xd9,
	0xb6, 0xe5, 0x82, 0x8d, 0x55, 0x59, 0x22, 0x10, 0x89, 0x64, 0x96, 0x2c, 0xf6, 0xb2, 0x1e, 0x39,
	0x67, 0x43, 0x67, 0xd1, 0x8b, 0xc1, 0x2c, 0x59, 0x4c, 0xb3, 0x78, 0xe7, 0x17, 0x6c, 0x12, 0x08,
	0xb0, 0x55, 0x0d, 0x88, 0x7f, 0x31, 0xbe, 0xe5, 0xce, 0x39, 0x45, 0xf4, 0x65, 0xb1, 0x14, 0xc3,
	0x8d, 0xeb, 0xb9, 0x73, 0xa5, 0xf2, 0x2a, 0x57, 0x04, 0xe2, 0xff, 0xc6, 0xf5, 0xcc, 0xcf, 0xd9,
	0x38, 0x10, 0x48, 0x6f, 0x48, 0x8c, 0x66, 0xc9, 0x62, 0x92, 0x8d, 0x02, 0xc1, 0xab, 0x21, 0x7e,
	0xc5, 0x8e, 0xbc, 0x21, 0x49, 0x6b, 0xed, 0xe4, 0x27, 0xa0, 0xfe, 0xf8, 0x16, 0xe3, 0x18, 0x98,
	0x7a, 0x43, 0xab, 0xb5, 0x76, 0x6f, 0x71, 0x38, 0x6f, 0xd8, 0x71, 0x5f, 0x29, 0x03, 0x55, 0x3e,
	0x60, 0x45, 0xfc, 0x86, 0x9d, 0x22, 0x38, 0xa3, 0x0b, 0xe5, 0xb5, 0x6d, 0x25, 0x19, 0xeb, 0x65,
	0xfc, 0xf5, 0x20, 0xbe, 0x7e, 0xb2, 0x23, 0x57, 0xc6, 0xfa, 0xe7, 0xae, 0xc0, 0x25, 0x3b, 0x74,
	0x21, 0x37, 0x9a, 0x6a, 0x40, 0xb9, 0x53, 0x71, 0xba, 0x9d, 0x76, 0xb1, 0xc7, 0xfb, 0xf7, 0xbb,
	0x4a, 0xfb, 0x3a, 0xe4, 0xcb, 0xc2, 0x36, 0x69, 0xae, 0x7c, 0x51, 0x17, 0x16, 0x5d, 0xea, 0x4c,
	0x68, 0x72, 0xc0, 0x6b, 0x2a, 0x6a, 0x68, 0x14, 0xa5, 0x79, 0xd0, 0xa6, 0x4c, 0x2b, 0x9b, 0x6e,
	0xf6, 0x9f, 0x76, 0xfb, 0xcf, 0x47, 0x11, 0x6e, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xf3, 0x6b,
	0x3e, 0xc5, 0xad, 0x01, 0x00, 0x00,
}
