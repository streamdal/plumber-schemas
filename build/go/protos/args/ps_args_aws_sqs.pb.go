// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ps_args_aws_sqs.proto

package args

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AWSSQSConn struct {
	// @gotags: kong:"env=AWS_DEFAULT_REGION,hidden"
	AwsRegion string `protobuf:"bytes,1,opt,name=aws_region,json=awsRegion,proto3" json:"aws_region,omitempty" kong:"env=AWS_DEFAULT_REGION,hidden"`
	// @gotags: kong:"env=AWS_ACCESS_KEY_ID,hidden"
	AwsAccessKeyId string `protobuf:"bytes,2,opt,name=aws_access_key_id,json=awsAccessKeyId,proto3" json:"aws_access_key_id,omitempty" kong:"env=AWS_ACCESS_KEY_ID,hidden"`
	// @gotags: kong:"env=AWS_SECRET_ACCESS_KEY,hidden"
	AwsSecretAccessKey string `protobuf:"bytes,3,opt,name=aws_secret_access_key,json=awsSecretAccessKey,proto3" json:"aws_secret_access_key,omitempty" kong:"env=AWS_SECRET_ACCESS_KEY,hidden"`
	// @gotags: kong:"env=AWS_PROFILE,hidden"
	AwsProfile           string   `protobuf:"bytes,4,opt,name=aws_profile,json=awsProfile,proto3" json:"aws_profile,omitempty" kong:"env=AWS_PROFILE,hidden"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AWSSQSConn) Reset()         { *m = AWSSQSConn{} }
func (m *AWSSQSConn) String() string { return proto.CompactTextString(m) }
func (*AWSSQSConn) ProtoMessage()    {}
func (*AWSSQSConn) Descriptor() ([]byte, []int) {
	return fileDescriptor_34ab51852233331d, []int{0}
}

func (m *AWSSQSConn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AWSSQSConn.Unmarshal(m, b)
}
func (m *AWSSQSConn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AWSSQSConn.Marshal(b, m, deterministic)
}
func (m *AWSSQSConn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AWSSQSConn.Merge(m, src)
}
func (m *AWSSQSConn) XXX_Size() int {
	return xxx_messageInfo_AWSSQSConn.Size(m)
}
func (m *AWSSQSConn) XXX_DiscardUnknown() {
	xxx_messageInfo_AWSSQSConn.DiscardUnknown(m)
}

var xxx_messageInfo_AWSSQSConn proto.InternalMessageInfo

func (m *AWSSQSConn) GetAwsRegion() string {
	if m != nil {
		return m.AwsRegion
	}
	return ""
}

func (m *AWSSQSConn) GetAwsAccessKeyId() string {
	if m != nil {
		return m.AwsAccessKeyId
	}
	return ""
}

func (m *AWSSQSConn) GetAwsSecretAccessKey() string {
	if m != nil {
		return m.AwsSecretAccessKey
	}
	return ""
}

func (m *AWSSQSConn) GetAwsProfile() string {
	if m != nil {
		return m.AwsProfile
	}
	return ""
}

type AWSSQSReadArgs struct {
	// @gotags: kong:"help='Queue name'"
	QueueName string `protobuf:"bytes,1,opt,name=queue_name,json=queueName,proto3" json:"queue_name,omitempty" kong:"help='Queue name'"`
	// @gotags: kong:"help='Remote AWS account ID',optional"
	RemoteAccountId string `protobuf:"bytes,2,opt,name=remote_account_id,json=remoteAccountId,proto3" json:"remote_account_id,omitempty" kong:"help='Remote AWS account ID',optional"`
	// @gotags: kong:"help='Max number of messages to read',default=1"
	MaxNumMessages int64 `protobuf:"varint,3,opt,name=max_num_messages,json=maxNumMessages,proto3" json:"max_num_messages,omitempty" kong:"help='Max number of messages to read',default=1"`
	// @gotags: kong:"help='An id to identify this read request by',default='plumber/relay'"
	ReceiveRequestAttemptId string `protobuf:"bytes,4,opt,name=receive_request_attempt_id,json=receiveRequestAttemptId,proto3" json:"receive_request_attempt_id,omitempty" kong:"help='An id to identify this read request by',default='plumber/relay'"`
	// @gotags: kong:"help='Auto-delete read/received message(s)'"
	AutoDelete bool `protobuf:"varint,5,opt,name=auto_delete,json=autoDelete,proto3" json:"auto_delete,omitempty" kong:"help='Auto-delete read/received message(s)'"`
	// @gotags: kong:"help='Number of seconds to wait for messages (not used when using --continuous)',default=5"
	WaitTimeSeconds      int64    `protobuf:"varint,6,opt,name=wait_time_seconds,json=waitTimeSeconds,proto3" json:"wait_time_seconds,omitempty" kong:"help='Number of seconds to wait for messages (not used when using --continuous)',default=5"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AWSSQSReadArgs) Reset()         { *m = AWSSQSReadArgs{} }
func (m *AWSSQSReadArgs) String() string { return proto.CompactTextString(m) }
func (*AWSSQSReadArgs) ProtoMessage()    {}
func (*AWSSQSReadArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_34ab51852233331d, []int{1}
}

func (m *AWSSQSReadArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AWSSQSReadArgs.Unmarshal(m, b)
}
func (m *AWSSQSReadArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AWSSQSReadArgs.Marshal(b, m, deterministic)
}
func (m *AWSSQSReadArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AWSSQSReadArgs.Merge(m, src)
}
func (m *AWSSQSReadArgs) XXX_Size() int {
	return xxx_messageInfo_AWSSQSReadArgs.Size(m)
}
func (m *AWSSQSReadArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_AWSSQSReadArgs.DiscardUnknown(m)
}

var xxx_messageInfo_AWSSQSReadArgs proto.InternalMessageInfo

func (m *AWSSQSReadArgs) GetQueueName() string {
	if m != nil {
		return m.QueueName
	}
	return ""
}

func (m *AWSSQSReadArgs) GetRemoteAccountId() string {
	if m != nil {
		return m.RemoteAccountId
	}
	return ""
}

func (m *AWSSQSReadArgs) GetMaxNumMessages() int64 {
	if m != nil {
		return m.MaxNumMessages
	}
	return 0
}

func (m *AWSSQSReadArgs) GetReceiveRequestAttemptId() string {
	if m != nil {
		return m.ReceiveRequestAttemptId
	}
	return ""
}

func (m *AWSSQSReadArgs) GetAutoDelete() bool {
	if m != nil {
		return m.AutoDelete
	}
	return false
}

func (m *AWSSQSReadArgs) GetWaitTimeSeconds() int64 {
	if m != nil {
		return m.WaitTimeSeconds
	}
	return 0
}

type AWSSQSWriteArgs struct {
	// @gotags: kong:"help='Queue name'"
	QueueName string `protobuf:"bytes,1,opt,name=queue_name,json=queueName,proto3" json:"queue_name,omitempty" kong:"help='Queue name'"`
	// @gotags: kong:"help='Remote AWS account ID',optional"
	RemoteAccountId string `protobuf:"bytes,2,opt,name=remote_account_id,json=remoteAccountId,proto3" json:"remote_account_id,omitempty" kong:"help='Remote AWS account ID',optional"`
	// @gotags: kong:"help='How many seconds to delay message delivery by',default=0"
	DelaySeconds int64 `protobuf:"varint,3,opt,name=delay_seconds,json=delaySeconds,proto3" json:"delay_seconds,omitempty" kong:"help='How many seconds to delay message delivery by',default=0"`
	// @gotags: kong:"help='Add optional attributes to outgoing message (assign: k=v delimit: ;)'"
	Attributes map[string]string `protobuf:"bytes,4,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" kong:"help='Add optional attributes to outgoing message (assign: k=v delimit: ;)'"`
	// @gotags: kong:"help='Message Group ID. For FIFO queues only'"
	MessageGroupId string `protobuf:"bytes,5,opt,name=message_group_id,json=messageGroupId,proto3" json:"message_group_id,omitempty" kong:"help='Message Group ID. For FIFO queues only'"`
	// @gotags: kong:"help='Required when publishing to a FIFO queue that does not have content based deduplication enabled'"
	MessageDeduplicationId string   `protobuf:"bytes,6,opt,name=message_deduplication_id,json=messageDeduplicationId,proto3" json:"message_deduplication_id,omitempty" kong:"help='Required when publishing to a FIFO queue that does not have content based deduplication enabled'"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *AWSSQSWriteArgs) Reset()         { *m = AWSSQSWriteArgs{} }
func (m *AWSSQSWriteArgs) String() string { return proto.CompactTextString(m) }
func (*AWSSQSWriteArgs) ProtoMessage()    {}
func (*AWSSQSWriteArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_34ab51852233331d, []int{2}
}

func (m *AWSSQSWriteArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AWSSQSWriteArgs.Unmarshal(m, b)
}
func (m *AWSSQSWriteArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AWSSQSWriteArgs.Marshal(b, m, deterministic)
}
func (m *AWSSQSWriteArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AWSSQSWriteArgs.Merge(m, src)
}
func (m *AWSSQSWriteArgs) XXX_Size() int {
	return xxx_messageInfo_AWSSQSWriteArgs.Size(m)
}
func (m *AWSSQSWriteArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_AWSSQSWriteArgs.DiscardUnknown(m)
}

var xxx_messageInfo_AWSSQSWriteArgs proto.InternalMessageInfo

func (m *AWSSQSWriteArgs) GetQueueName() string {
	if m != nil {
		return m.QueueName
	}
	return ""
}

func (m *AWSSQSWriteArgs) GetRemoteAccountId() string {
	if m != nil {
		return m.RemoteAccountId
	}
	return ""
}

func (m *AWSSQSWriteArgs) GetDelaySeconds() int64 {
	if m != nil {
		return m.DelaySeconds
	}
	return 0
}

func (m *AWSSQSWriteArgs) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *AWSSQSWriteArgs) GetMessageGroupId() string {
	if m != nil {
		return m.MessageGroupId
	}
	return ""
}

func (m *AWSSQSWriteArgs) GetMessageDeduplicationId() string {
	if m != nil {
		return m.MessageDeduplicationId
	}
	return ""
}

// SQS has a dedicated RelayArgs struct as relay has different defaults than read
type AWSSQSRelayArgs struct {
	// @gotags: kong:"help='Queue name',env=PLUMBER_RELAY_SQS_QUEUE_NAME"
	QueueName string `protobuf:"bytes,1,opt,name=queue_name,json=queueName,proto3" json:"queue_name,omitempty" kong:"help='Queue name',env=PLUMBER_RELAY_SQS_QUEUE_NAME"`
	// @gotags: kong:"help='Remote AWS account ID',env=PLUMBER_RELAY_SQS_REMOTE_ACCOUNT_ID,optional"
	RemoteAccountId string `protobuf:"bytes,2,opt,name=remote_account_id,json=remoteAccountId,proto3" json:"remote_account_id,omitempty" kong:"help='Remote AWS account ID',env=PLUMBER_RELAY_SQS_REMOTE_ACCOUNT_ID,optional"`
	// @gotags: kong:"help='Max number of messages to read',env=PLUMBER_RELAY_SQS_MAX_NUM_MESSAGES,default=1"
	MaxNumMessages int64 `protobuf:"varint,3,opt,name=max_num_messages,json=maxNumMessages,proto3" json:"max_num_messages,omitempty" kong:"help='Max number of messages to read',env=PLUMBER_RELAY_SQS_MAX_NUM_MESSAGES,default=1"`
	// @gotags: kong:"help='An id to identify this read request by',env=PLUMBER_RELAY_SQS_RECEIVE_REQUEST_ATTEMPT_ID,default='plumber/relay'"
	ReceiveRequestAttemptId string `protobuf:"bytes,4,opt,name=receive_request_attempt_id,json=receiveRequestAttemptId,proto3" json:"receive_request_attempt_id,omitempty" kong:"help='An id to identify this read request by',env=PLUMBER_RELAY_SQS_RECEIVE_REQUEST_ATTEMPT_ID,default='plumber/relay'"`
	// @gotags: kong:"help='Auto-delete read/received message(s)',env=PLUMBER_RELAY_SQS_AUTO_DELETE"
	AutoDelete bool `protobuf:"varint,5,opt,name=auto_delete,json=autoDelete,proto3" json:"auto_delete,omitempty" kong:"help='Auto-delete read/received message(s)',env=PLUMBER_RELAY_SQS_AUTO_DELETE"`
	// @gotags: kong:"help='Number of seconds to wait for messages (not used when using --continuous)',env=PLUMBER_RELAY_SQS_WAIT_TIME_SECONDS,default=5"
	WaitTimeSeconds      int64    `protobuf:"varint,6,opt,name=wait_time_seconds,json=waitTimeSeconds,proto3" json:"wait_time_seconds,omitempty" kong:"help='Number of seconds to wait for messages (not used when using --continuous)',env=PLUMBER_RELAY_SQS_WAIT_TIME_SECONDS,default=5"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AWSSQSRelayArgs) Reset()         { *m = AWSSQSRelayArgs{} }
func (m *AWSSQSRelayArgs) String() string { return proto.CompactTextString(m) }
func (*AWSSQSRelayArgs) ProtoMessage()    {}
func (*AWSSQSRelayArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_34ab51852233331d, []int{3}
}

func (m *AWSSQSRelayArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AWSSQSRelayArgs.Unmarshal(m, b)
}
func (m *AWSSQSRelayArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AWSSQSRelayArgs.Marshal(b, m, deterministic)
}
func (m *AWSSQSRelayArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AWSSQSRelayArgs.Merge(m, src)
}
func (m *AWSSQSRelayArgs) XXX_Size() int {
	return xxx_messageInfo_AWSSQSRelayArgs.Size(m)
}
func (m *AWSSQSRelayArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_AWSSQSRelayArgs.DiscardUnknown(m)
}

var xxx_messageInfo_AWSSQSRelayArgs proto.InternalMessageInfo

func (m *AWSSQSRelayArgs) GetQueueName() string {
	if m != nil {
		return m.QueueName
	}
	return ""
}

func (m *AWSSQSRelayArgs) GetRemoteAccountId() string {
	if m != nil {
		return m.RemoteAccountId
	}
	return ""
}

func (m *AWSSQSRelayArgs) GetMaxNumMessages() int64 {
	if m != nil {
		return m.MaxNumMessages
	}
	return 0
}

func (m *AWSSQSRelayArgs) GetReceiveRequestAttemptId() string {
	if m != nil {
		return m.ReceiveRequestAttemptId
	}
	return ""
}

func (m *AWSSQSRelayArgs) GetAutoDelete() bool {
	if m != nil {
		return m.AutoDelete
	}
	return false
}

func (m *AWSSQSRelayArgs) GetWaitTimeSeconds() int64 {
	if m != nil {
		return m.WaitTimeSeconds
	}
	return 0
}

func init() {
	proto.RegisterType((*AWSSQSConn)(nil), "protos.args.AWSSQSConn")
	proto.RegisterType((*AWSSQSReadArgs)(nil), "protos.args.AWSSQSReadArgs")
	proto.RegisterType((*AWSSQSWriteArgs)(nil), "protos.args.AWSSQSWriteArgs")
	proto.RegisterMapType((map[string]string)(nil), "protos.args.AWSSQSWriteArgs.AttributesEntry")
	proto.RegisterType((*AWSSQSRelayArgs)(nil), "protos.args.AWSSQSRelayArgs")
}

func init() { proto.RegisterFile("ps_args_aws_sqs.proto", fileDescriptor_34ab51852233331d) }

var fileDescriptor_34ab51852233331d = []byte{
	// 539 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x92, 0xdf, 0x6e, 0xd3, 0x30,
	0x18, 0xc5, 0xd5, 0x76, 0xab, 0x98, 0x0b, 0xed, 0x66, 0x31, 0x88, 0x26, 0x21, 0xaa, 0x72, 0x53,
	0x10, 0x24, 0x02, 0x6e, 0x06, 0x13, 0x17, 0x81, 0x21, 0x54, 0x01, 0x13, 0xa4, 0x48, 0x93, 0xb8,
	0xb1, 0x9c, 0xf8, 0x23, 0xb5, 0x88, 0xe3, 0xd4, 0x7f, 0xd6, 0xf5, 0x29, 0xe0, 0x39, 0x78, 0x3c,
	0x9e, 0x00, 0xd9, 0xce, 0x4a, 0xb5, 0x6b, 0x2e, 0xb9, 0x4a, 0x7c, 0xce, 0xf9, 0x92, 0x5f, 0x4e,
	0x3e, 0x74, 0xd8, 0x68, 0x42, 0x55, 0xa9, 0x09, 0x5d, 0x69, 0xa2, 0x97, 0x3a, 0x6e, 0x94, 0x34,
	0x12, 0x0f, 0xfc, 0x45, 0xc7, 0xce, 0x9a, 0xfc, 0xea, 0x20, 0x94, 0x9e, 0xcf, 0xe7, 0x9f, 0xe7,
	0x6f, 0x64, 0x5d, 0xe3, 0x7b, 0x08, 0xb9, 0xb0, 0x82, 0x92, 0xcb, 0x3a, 0xea, 0x8c, 0x3b, 0xd3,
	0xbd, 0x6c, 0x8f, 0xae, 0x74, 0xe6, 0x05, 0xfc, 0x10, 0x1d, 0x38, 0x9b, 0x16, 0x05, 0x68, 0x4d,
	0xbe, 0xc3, 0x9a, 0x70, 0x16, 0x75, 0x7d, 0x6a, 0x48, 0x57, 0x3a, 0xf5, 0xfa, 0x7b, 0x58, 0xcf,
	0x18, 0x7e, 0x8a, 0x0e, 0xfd, 0x6b, 0xa1, 0x50, 0x60, 0xb6, 0x26, 0xa2, 0x9e, 0x8f, 0x63, 0xba,
	0xd2, 0x73, 0xef, 0x6d, 0x86, 0xf0, 0x7d, 0x34, 0x70, 0x23, 0x8d, 0x92, 0xdf, 0x78, 0x05, 0xd1,
	0x8e, 0x0f, 0x3a, 0x9e, 0x4f, 0x41, 0x99, 0xfc, 0xe8, 0xa2, 0x61, 0x80, 0xcd, 0x80, 0xb2, 0x54,
	0x95, 0xda, 0x01, 0x2f, 0x2d, 0x58, 0x20, 0x35, 0x15, 0x70, 0x05, 0xec, 0x95, 0x33, 0x2a, 0x00,
	0x3f, 0x42, 0x07, 0x0a, 0x84, 0x34, 0xe0, 0x08, 0xa4, 0xad, 0xcd, 0x5f, 0xe0, 0x51, 0x30, 0xd2,
	0xa0, 0xcf, 0x18, 0x9e, 0xa2, 0x7d, 0x41, 0x2f, 0x49, 0x6d, 0x05, 0x11, 0xa0, 0x35, 0x2d, 0x41,
	0x7b, 0xd8, 0x5e, 0x36, 0x14, 0xf4, 0xf2, 0xcc, 0x8a, 0x8f, 0xad, 0x8a, 0x4f, 0xd0, 0x91, 0x82,
	0x02, 0xf8, 0x05, 0x10, 0x05, 0x4b, 0x0b, 0xda, 0x10, 0x6a, 0x0c, 0x88, 0xc6, 0x3f, 0x3e, 0x70,
	0xdf, 0x6d, 0x13, 0x59, 0x08, 0xa4, 0xc1, 0x9f, 0x31, 0xff, 0x95, 0xd6, 0x48, 0xc2, 0xa0, 0x02,
	0x03, 0xd1, 0xee, 0xb8, 0x33, 0xbd, 0x91, 0x21, 0x27, 0x9d, 0x7a, 0xc5, 0x31, 0xaf, 0x28, 0x37,
	0xc4, 0x70, 0x01, 0xae, 0x3f, 0x59, 0x33, 0x1d, 0xf5, 0x3d, 0xc8, 0xc8, 0x19, 0x5f, 0xb8, 0x80,
	0x79, 0x90, 0x27, 0xbf, 0xbb, 0x68, 0x14, 0x1a, 0x39, 0x57, 0xdc, 0xc0, 0xbf, 0xae, 0xe4, 0x01,
	0xba, 0xc5, 0xa0, 0xa2, 0xeb, 0x0d, 0x46, 0xe8, 0xe3, 0xa6, 0x17, 0x5b, 0x06, 0xfc, 0x01, 0x21,
	0x6a, 0x8c, 0xe2, 0xb9, 0x35, 0xa0, 0xa3, 0x9d, 0x71, 0x6f, 0x3a, 0x78, 0xf6, 0x38, 0xde, 0x5a,
	0xb2, 0xf8, 0x1a, 0x61, 0x9c, 0x6e, 0xe2, 0x6f, 0x6b, 0xa3, 0xd6, 0xd9, 0xd6, 0xbc, 0xff, 0x0b,
	0xa1, 0x67, 0x52, 0x2a, 0x69, 0x1b, 0x47, 0xb7, 0x1b, 0x36, 0xac, 0xd5, 0xdf, 0x39, 0x79, 0xc6,
	0xf0, 0x31, 0x8a, 0xae, 0x92, 0x0c, 0x98, 0x6d, 0x2a, 0x5e, 0x50, 0xc3, 0x65, 0xed, 0x26, 0xfa,
	0x7e, 0xe2, 0x4e, 0xeb, 0x9f, 0x6e, 0xdb, 0x33, 0x76, 0xf4, 0x0a, 0x8d, 0xae, 0x21, 0xe0, 0x7d,
	0xd4, 0x73, 0xcb, 0x19, 0xda, 0x72, 0xb7, 0xf8, 0x36, 0xda, 0xbd, 0xa0, 0x95, 0x85, 0xb6, 0x9b,
	0x70, 0x78, 0xd9, 0x3d, 0xee, 0x4c, 0x7e, 0x6e, 0x4a, 0xcf, 0x5c, 0x0f, 0xff, 0xf7, 0x50, 0xbf,
	0x3e, 0xf9, 0xfa, 0xa2, 0xe4, 0x66, 0x61, 0xf3, 0xb8, 0x90, 0x22, 0xc9, 0xa9, 0x29, 0x16, 0x85,
	0x54, 0x4d, 0xd2, 0x54, 0x56, 0xe4, 0xa0, 0x9e, 0xe8, 0x62, 0x01, 0x82, 0xea, 0x24, 0xb7, 0xbc,
	0x62, 0x49, 0x29, 0x93, 0xb0, 0x1e, 0x89, 0x5b, 0x8f, 0xbc, 0xef, 0x0f, 0xcf, 0xff, 0x04, 0x00,
	0x00, 0xff, 0xff, 0x6c, 0xf4, 0xf3, 0x08, 0xb0, 0x04, 0x00, 0x00,
}
