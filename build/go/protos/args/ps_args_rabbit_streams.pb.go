// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ps_args_rabbit_streams.proto

package args

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RabbitStreamsConn struct {
	// @gotags: kong:"help='DSN used to connect to RabbitMQ',default='rabbitmq-stream://guest:guest@localhost:5552',required"
	Dsn string `protobuf:"bytes,1,opt,name=dsn,proto3" json:"dsn,omitempty" kong:"help='DSN used to connect to RabbitMQ',default='rabbitmq-stream://guest:guest@localhost:5552',required"`
	// @gotags: kong:"help='Enable TLS usage (regardless of DSN)'"
	UseTls bool `protobuf:"varint,2,opt,name=use_tls,json=useTls,proto3" json:"use_tls,omitempty" kong:"help='Enable TLS usage (regardless of DSN)'"`
	// @gotags: kong:"help='Whether to verify server certificate'"
	TlsSkipVerify bool `protobuf:"varint,3,opt,name=tls_skip_verify,json=tlsSkipVerify,proto3" json:"tls_skip_verify,omitempty" kong:"help='Whether to verify server certificate'"`
	// @gotags: kong:"help='Username to authenticate to server with',default=guest"
	Username string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty" kong:"help='Username to authenticate to server with',default=guest"`
	// @gotags: kong:"help='Password used to authenticate to server with',default=guest"
	Password string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty" kong:"help='Password used to authenticate to server with',default=guest"`
	// @gotags: kong:"help='Consumer or producer name to identify as to RabbitMQ',default=plumber,required"
	ClientName           string   `protobuf:"bytes,6,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty" kong:"help='Consumer or producer name to identify as to RabbitMQ',default=plumber,required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RabbitStreamsConn) Reset()         { *m = RabbitStreamsConn{} }
func (m *RabbitStreamsConn) String() string { return proto.CompactTextString(m) }
func (*RabbitStreamsConn) ProtoMessage()    {}
func (*RabbitStreamsConn) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc3c29996a2cfa7f, []int{0}
}

func (m *RabbitStreamsConn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RabbitStreamsConn.Unmarshal(m, b)
}
func (m *RabbitStreamsConn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RabbitStreamsConn.Marshal(b, m, deterministic)
}
func (m *RabbitStreamsConn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RabbitStreamsConn.Merge(m, src)
}
func (m *RabbitStreamsConn) XXX_Size() int {
	return xxx_messageInfo_RabbitStreamsConn.Size(m)
}
func (m *RabbitStreamsConn) XXX_DiscardUnknown() {
	xxx_messageInfo_RabbitStreamsConn.DiscardUnknown(m)
}

var xxx_messageInfo_RabbitStreamsConn proto.InternalMessageInfo

func (m *RabbitStreamsConn) GetDsn() string {
	if m != nil {
		return m.Dsn
	}
	return ""
}

func (m *RabbitStreamsConn) GetUseTls() bool {
	if m != nil {
		return m.UseTls
	}
	return false
}

func (m *RabbitStreamsConn) GetTlsSkipVerify() bool {
	if m != nil {
		return m.TlsSkipVerify
	}
	return false
}

func (m *RabbitStreamsConn) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *RabbitStreamsConn) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *RabbitStreamsConn) GetClientName() string {
	if m != nil {
		return m.ClientName
	}
	return ""
}

type RabbitStreamsOffsetOptions struct {
	// @gotags: kong:"group=offset,xor=offset"
	SpecificOffset int64 `protobuf:"varint,1,opt,name=specific_offset,json=specificOffset,proto3" json:"specific_offset,omitempty" kong:"group=offset,xor=offset"`
	// @gotags: kong:"group=offset,xor=offset"
	LastOffset bool `protobuf:"varint,2,opt,name=last_offset,json=lastOffset,proto3" json:"last_offset,omitempty" kong:"group=offset,xor=offset"`
	// @gotags: kong:"group=offset,xor=offset"
	LastConsumed bool `protobuf:"varint,3,opt,name=last_consumed,json=lastConsumed,proto3" json:"last_consumed,omitempty" kong:"group=offset,xor=offset"`
	// @gotags: kong:"group=offset,xor=offset"
	FirstOffset bool `protobuf:"varint,4,opt,name=first_offset,json=firstOffset,proto3" json:"first_offset,omitempty" kong:"group=offset,xor=offset"`
	// @gotags: kong:"group=offset,xor=offset"
	NextOffset           bool     `protobuf:"varint,5,opt,name=next_offset,json=nextOffset,proto3" json:"next_offset,omitempty" kong:"group=offset,xor=offset"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RabbitStreamsOffsetOptions) Reset()         { *m = RabbitStreamsOffsetOptions{} }
func (m *RabbitStreamsOffsetOptions) String() string { return proto.CompactTextString(m) }
func (*RabbitStreamsOffsetOptions) ProtoMessage()    {}
func (*RabbitStreamsOffsetOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc3c29996a2cfa7f, []int{1}
}

func (m *RabbitStreamsOffsetOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RabbitStreamsOffsetOptions.Unmarshal(m, b)
}
func (m *RabbitStreamsOffsetOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RabbitStreamsOffsetOptions.Marshal(b, m, deterministic)
}
func (m *RabbitStreamsOffsetOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RabbitStreamsOffsetOptions.Merge(m, src)
}
func (m *RabbitStreamsOffsetOptions) XXX_Size() int {
	return xxx_messageInfo_RabbitStreamsOffsetOptions.Size(m)
}
func (m *RabbitStreamsOffsetOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_RabbitStreamsOffsetOptions.DiscardUnknown(m)
}

var xxx_messageInfo_RabbitStreamsOffsetOptions proto.InternalMessageInfo

func (m *RabbitStreamsOffsetOptions) GetSpecificOffset() int64 {
	if m != nil {
		return m.SpecificOffset
	}
	return 0
}

func (m *RabbitStreamsOffsetOptions) GetLastOffset() bool {
	if m != nil {
		return m.LastOffset
	}
	return false
}

func (m *RabbitStreamsOffsetOptions) GetLastConsumed() bool {
	if m != nil {
		return m.LastConsumed
	}
	return false
}

func (m *RabbitStreamsOffsetOptions) GetFirstOffset() bool {
	if m != nil {
		return m.FirstOffset
	}
	return false
}

func (m *RabbitStreamsOffsetOptions) GetNextOffset() bool {
	if m != nil {
		return m.NextOffset
	}
	return false
}

type RabbitStreamsReadArgs struct {
	// @gotags: kong:"help='Stream name',required"
	Stream string `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty" kong:"help='Stream name',required"`
	// @gotags: kong:"help='Declare the stream if it does not exist'"
	DeclareStream bool `protobuf:"varint,2,opt,name=declare_stream,json=declareStream,proto3" json:"declare_stream,omitempty" kong:"help='Declare the stream if it does not exist'"`
	// @gotags: kong:"help='Stream capacity to declare (required if declare_stream is true; ex: 1024k; 10mb; 3gb)'"
	DeclareStreamSize string `protobuf:"bytes,3,opt,name=declare_stream_size,json=declareStreamSize,proto3" json:"declare_stream_size,omitempty" kong:"help='Stream capacity to declare (required if declare_stream is true; ex: 1024k; 10mb; 3gb)'"`
	// TODO: Will this break? Might just need to be a string.
	// @gotags: kong:"help='Offset to start reading at',embed"
	OffsetOptions        *RabbitStreamsOffsetOptions `protobuf:"bytes,4,opt,name=offset_options,json=offsetOptions,proto3" json:"offset_options,omitempty" kong:"help='Offset to start reading at',embed"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *RabbitStreamsReadArgs) Reset()         { *m = RabbitStreamsReadArgs{} }
func (m *RabbitStreamsReadArgs) String() string { return proto.CompactTextString(m) }
func (*RabbitStreamsReadArgs) ProtoMessage()    {}
func (*RabbitStreamsReadArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc3c29996a2cfa7f, []int{2}
}

func (m *RabbitStreamsReadArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RabbitStreamsReadArgs.Unmarshal(m, b)
}
func (m *RabbitStreamsReadArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RabbitStreamsReadArgs.Marshal(b, m, deterministic)
}
func (m *RabbitStreamsReadArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RabbitStreamsReadArgs.Merge(m, src)
}
func (m *RabbitStreamsReadArgs) XXX_Size() int {
	return xxx_messageInfo_RabbitStreamsReadArgs.Size(m)
}
func (m *RabbitStreamsReadArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_RabbitStreamsReadArgs.DiscardUnknown(m)
}

var xxx_messageInfo_RabbitStreamsReadArgs proto.InternalMessageInfo

func (m *RabbitStreamsReadArgs) GetStream() string {
	if m != nil {
		return m.Stream
	}
	return ""
}

func (m *RabbitStreamsReadArgs) GetDeclareStream() bool {
	if m != nil {
		return m.DeclareStream
	}
	return false
}

func (m *RabbitStreamsReadArgs) GetDeclareStreamSize() string {
	if m != nil {
		return m.DeclareStreamSize
	}
	return ""
}

func (m *RabbitStreamsReadArgs) GetOffsetOptions() *RabbitStreamsOffsetOptions {
	if m != nil {
		return m.OffsetOptions
	}
	return nil
}

type RabbitStreamsWriteArgs struct {
	// @gotags: kong:"help='Stream name',required"
	Stream string `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty" kong:"help='Stream name',required"`
	// @gotags: kong:"help='Declare the stream if it does not exist'"
	DeclareStream bool `protobuf:"varint,2,opt,name=declare_stream,json=declareStream,proto3" json:"declare_stream,omitempty" kong:"help='Declare the stream if it does not exist'"`
	// @gotags: kong:"help='Stream capacity to declare (required if declare_stream is true; ex: 1024k, 10mb, 3gb',default=10mb"
	DeclareStreamSize    string   `protobuf:"bytes,3,opt,name=declare_stream_size,json=declareStreamSize,proto3" json:"declare_stream_size,omitempty" kong:"help='Stream capacity to declare (required if declare_stream is true; ex: 1024k, 10mb, 3gb',default=10mb"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RabbitStreamsWriteArgs) Reset()         { *m = RabbitStreamsWriteArgs{} }
func (m *RabbitStreamsWriteArgs) String() string { return proto.CompactTextString(m) }
func (*RabbitStreamsWriteArgs) ProtoMessage()    {}
func (*RabbitStreamsWriteArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc3c29996a2cfa7f, []int{3}
}

func (m *RabbitStreamsWriteArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RabbitStreamsWriteArgs.Unmarshal(m, b)
}
func (m *RabbitStreamsWriteArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RabbitStreamsWriteArgs.Marshal(b, m, deterministic)
}
func (m *RabbitStreamsWriteArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RabbitStreamsWriteArgs.Merge(m, src)
}
func (m *RabbitStreamsWriteArgs) XXX_Size() int {
	return xxx_messageInfo_RabbitStreamsWriteArgs.Size(m)
}
func (m *RabbitStreamsWriteArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_RabbitStreamsWriteArgs.DiscardUnknown(m)
}

var xxx_messageInfo_RabbitStreamsWriteArgs proto.InternalMessageInfo

func (m *RabbitStreamsWriteArgs) GetStream() string {
	if m != nil {
		return m.Stream
	}
	return ""
}

func (m *RabbitStreamsWriteArgs) GetDeclareStream() bool {
	if m != nil {
		return m.DeclareStream
	}
	return false
}

func (m *RabbitStreamsWriteArgs) GetDeclareStreamSize() string {
	if m != nil {
		return m.DeclareStreamSize
	}
	return ""
}

func init() {
	proto.RegisterType((*RabbitStreamsConn)(nil), "protos.args.RabbitStreamsConn")
	proto.RegisterType((*RabbitStreamsOffsetOptions)(nil), "protos.args.RabbitStreamsOffsetOptions")
	proto.RegisterType((*RabbitStreamsReadArgs)(nil), "protos.args.RabbitStreamsReadArgs")
	proto.RegisterType((*RabbitStreamsWriteArgs)(nil), "protos.args.RabbitStreamsWriteArgs")
}

func init() { proto.RegisterFile("ps_args_rabbit_streams.proto", fileDescriptor_cc3c29996a2cfa7f) }

var fileDescriptor_cc3c29996a2cfa7f = []byte{
	// 447 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x92, 0xcf, 0x6e, 0xd4, 0x30,
	0x10, 0xc6, 0x15, 0xda, 0x2e, 0xed, 0x6c, 0x77, 0x4b, 0x8d, 0x28, 0x51, 0x85, 0x44, 0x59, 0x04,
	0xed, 0x85, 0x44, 0x82, 0x13, 0xe2, 0x04, 0xbd, 0xb7, 0x52, 0x16, 0x81, 0xc4, 0xc5, 0x72, 0x9c,
	0xc9, 0xae, 0x55, 0x27, 0xb6, 0x3c, 0x0e, 0x7f, 0xfa, 0x02, 0x3c, 0x16, 0x8f, 0xc0, 0x8d, 0xe7,
	0x41, 0xb1, 0xb3, 0x6d, 0x73, 0xe0, 0xcc, 0x29, 0xf9, 0xbe, 0xf9, 0x65, 0xc6, 0x9f, 0x27, 0xf0,
	0xc4, 0x12, 0x17, 0x6e, 0x45, 0xdc, 0x89, 0xb2, 0x54, 0x9e, 0x93, 0x77, 0x28, 0x1a, 0xca, 0xac,
	0x33, 0xde, 0xb0, 0x69, 0x78, 0x50, 0xd6, 0x13, 0x8b, 0x5f, 0x09, 0x1c, 0x16, 0x81, 0x5a, 0x46,
	0xe8, 0xdc, 0xb4, 0x2d, 0x7b, 0x00, 0x5b, 0x15, 0xb5, 0x69, 0x72, 0x92, 0x9c, 0xed, 0x15, 0xfd,
	0x2b, 0x7b, 0x0c, 0xf7, 0x3b, 0x42, 0xee, 0x35, 0xa5, 0xf7, 0x4e, 0x92, 0xb3, 0xdd, 0x62, 0xd2,
	0x11, 0x7e, 0xd4, 0xc4, 0x5e, 0xc2, 0x81, 0xd7, 0xc4, 0xe9, 0x4a, 0x59, 0xfe, 0x15, 0x9d, 0xaa,
	0x7f, 0xa4, 0x5b, 0x01, 0x98, 0x79, 0x4d, 0xcb, 0x2b, 0x65, 0x3f, 0x05, 0x93, 0x1d, 0xc3, 0x6e,
	0x47, 0xe8, 0x5a, 0xd1, 0x60, 0xba, 0x1d, 0xfa, 0xde, 0xe8, 0xbe, 0x66, 0x05, 0xd1, 0x37, 0xe3,
	0xaa, 0x74, 0x27, 0xd6, 0x36, 0x9a, 0x3d, 0x85, 0xa9, 0xd4, 0x0a, 0x5b, 0xcf, 0xc3, 0xa7, 0x93,
	0x50, 0x86, 0x68, 0x5d, 0x88, 0x06, 0x17, 0xbf, 0x13, 0x38, 0x1e, 0x25, 0xb8, 0xac, 0x6b, 0x42,
	0x7f, 0x69, 0xbd, 0x32, 0x2d, 0xb1, 0x53, 0x38, 0x20, 0x8b, 0x52, 0xd5, 0x4a, 0x72, 0x13, 0x2a,
	0x21, 0xd6, 0x56, 0x31, 0xdf, 0xd8, 0x91, 0xef, 0x07, 0x69, 0x41, 0x7e, 0x03, 0xc5, 0x94, 0xd0,
	0x5b, 0x03, 0xf0, 0x1c, 0x66, 0x01, 0x90, 0xa6, 0xa5, 0xae, 0xc1, 0x6a, 0xc8, 0xb9, 0xdf, 0x9b,
	0xe7, 0x83, 0xc7, 0x9e, 0xc1, 0x7e, 0xad, 0xdc, 0x6d, 0x9b, 0xed, 0xc0, 0x4c, 0x83, 0x77, 0x3b,
	0xa8, 0xc5, 0xef, 0x37, 0xc4, 0x4e, 0x1c, 0xd4, 0x5b, 0x11, 0x58, 0xfc, 0x49, 0xe0, 0xd1, 0x28,
	0x51, 0x81, 0xa2, 0x7a, 0xef, 0x56, 0xc4, 0x8e, 0x60, 0x12, 0x77, 0x39, 0xac, 0x66, 0x50, 0xec,
	0x05, 0xcc, 0x2b, 0x94, 0x5a, 0x38, 0x1c, 0x76, 0x3d, 0x1c, 0x7f, 0x36, 0xb8, 0xb1, 0x0f, 0xcb,
	0xe0, 0xe1, 0x18, 0xe3, 0xa4, 0xae, 0x31, 0xe4, 0xd8, 0x2b, 0x0e, 0x47, 0xec, 0x52, 0x5d, 0x23,
	0xbb, 0x80, 0x79, 0x3c, 0x24, 0x37, 0xf1, 0x36, 0x43, 0x9c, 0xe9, 0xeb, 0xd3, 0xec, 0xce, 0x2f,
	0x94, 0xfd, 0xfb, 0xf2, 0x8b, 0x99, 0xb9, 0x2b, 0x17, 0x3f, 0x13, 0x38, 0x1a, 0xd1, 0x9f, 0x9d,
	0xf2, 0xf8, 0x1f, 0x92, 0x7d, 0x78, 0xf7, 0xe5, 0xed, 0x4a, 0xf9, 0x75, 0x57, 0x66, 0xd2, 0x34,
	0x79, 0x29, 0xbc, 0x5c, 0x4b, 0xe3, 0x6c, 0x6e, 0x75, 0xd7, 0x94, 0xe8, 0x5e, 0x91, 0x5c, 0x63,
	0x23, 0x28, 0x2f, 0x3b, 0xa5, 0xab, 0x7c, 0x65, 0xf2, 0x18, 0x38, 0xef, 0x03, 0x97, 0x93, 0x20,
	0xde, 0xfc, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xd9, 0x79, 0x86, 0xc9, 0x67, 0x03, 0x00, 0x00,
}
