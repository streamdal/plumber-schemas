// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ps_args_nats_jetstream.proto

package args

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NatsJetstreamTLSOptions struct {
	// @gotags: kong:"help='CA file (only needed if addr is tls://*)',env='PLUMBER_RELAY_NATS_JETSTREAM_TLS_CA_CERT'"
	TlsCaCert string `protobuf:"bytes,1,opt,name=tls_ca_cert,json=tlsCaCert,proto3" json:"tls_ca_cert,omitempty" kong:"help='CA file (only needed if addr is tls://*)',env='PLUMBER_RELAY_NATS_JETSTREAM_TLS_CA_CERT'"`
	// @gotags: kong:"help='Client cert file (only needed if addr is tls://*)',env='PLUMBER_RELAY_NATS_JETSTREAM_TLS_CLIENT_CERT'"
	TlsClientCert string `protobuf:"bytes,2,opt,name=tls_client_cert,json=tlsClientCert,proto3" json:"tls_client_cert,omitempty" kong:"help='Client cert file (only needed if addr is tls://*)',env='PLUMBER_RELAY_NATS_JETSTREAM_TLS_CLIENT_CERT'"`
	// @gotags: kong:"help='Client key file (only needed if addr is tls://*)',env='PLUMBER_RELAY_NATS_JETSTREAM_TLS_CLIENT_KEY'"
	TlsClientKey string `protobuf:"bytes,3,opt,name=tls_client_key,json=tlsClientKey,proto3" json:"tls_client_key,omitempty" kong:"help='Client key file (only needed if addr is tls://*)',env='PLUMBER_RELAY_NATS_JETSTREAM_TLS_CLIENT_KEY'"`
	// @gotags: kong:"help='Whether to verify server certificate',env='PLUMBER_RELAY_NATS_JETSTREAM_SKIP_VERIFY_TLS'"
	TlsSkipVerify bool `protobuf:"varint,4,opt,name=tls_skip_verify,json=tlsSkipVerify,proto3" json:"tls_skip_verify,omitempty" kong:"help='Whether to verify server certificate',env='PLUMBER_RELAY_NATS_JETSTREAM_SKIP_VERIFY_TLS'"`
	// @gotags: kong:"help='Enable TLS',env='PLUMBER_RELAY_NATS_JETSTREAM_USE_TLS'"
	UseTls               bool     `protobuf:"varint,5,opt,name=use_tls,json=useTls,proto3" json:"use_tls,omitempty" kong:"help='Enable TLS',env='PLUMBER_RELAY_NATS_JETSTREAM_USE_TLS'"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NatsJetstreamTLSOptions) Reset()         { *m = NatsJetstreamTLSOptions{} }
func (m *NatsJetstreamTLSOptions) String() string { return proto.CompactTextString(m) }
func (*NatsJetstreamTLSOptions) ProtoMessage()    {}
func (*NatsJetstreamTLSOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1868c7e9e1b078c, []int{0}
}

func (m *NatsJetstreamTLSOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NatsJetstreamTLSOptions.Unmarshal(m, b)
}
func (m *NatsJetstreamTLSOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NatsJetstreamTLSOptions.Marshal(b, m, deterministic)
}
func (m *NatsJetstreamTLSOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NatsJetstreamTLSOptions.Merge(m, src)
}
func (m *NatsJetstreamTLSOptions) XXX_Size() int {
	return xxx_messageInfo_NatsJetstreamTLSOptions.Size(m)
}
func (m *NatsJetstreamTLSOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_NatsJetstreamTLSOptions.DiscardUnknown(m)
}

var xxx_messageInfo_NatsJetstreamTLSOptions proto.InternalMessageInfo

func (m *NatsJetstreamTLSOptions) GetTlsCaCert() string {
	if m != nil {
		return m.TlsCaCert
	}
	return ""
}

func (m *NatsJetstreamTLSOptions) GetTlsClientCert() string {
	if m != nil {
		return m.TlsClientCert
	}
	return ""
}

func (m *NatsJetstreamTLSOptions) GetTlsClientKey() string {
	if m != nil {
		return m.TlsClientKey
	}
	return ""
}

func (m *NatsJetstreamTLSOptions) GetTlsSkipVerify() bool {
	if m != nil {
		return m.TlsSkipVerify
	}
	return false
}

func (m *NatsJetstreamTLSOptions) GetUseTls() bool {
	if m != nil {
		return m.UseTls
	}
	return false
}

type NatsJetstreamConn struct {
	// @gotags: kong:"help='Dial string for NATS server. Ex: nats://localhost:4222',default='nats://localhost:4222',env='PLUMBER_RELAY_NATS_JETSTREAM_DSN'"
	Dsn string `protobuf:"bytes,1,opt,name=dsn,proto3" json:"dsn,omitempty" kong:"help='Dial string for NATS server. Ex: nats://localhost:4222',default='nats://localhost:4222',env='PLUMBER_RELAY_NATS_JETSTREAM_DSN'"`
	// @gotags: kong:"help='NATS .creds file containing authentication credentials',env='PLUMBER_RELAY_NATS_JETSTREAM_CREDENTIALS'"
	UserCredentials string `protobuf:"bytes,2,opt,name=user_credentials,json=userCredentials,proto3" json:"user_credentials,omitempty" kong:"help='NATS .creds file containing authentication credentials',env='PLUMBER_RELAY_NATS_JETSTREAM_CREDENTIALS'"`
	// @gotags: kong:"help='User specified client ID to connect with',default=plumber,env='PLUMBER_RELAY_NATS_JETSTREAM_CLIENT_ID'"
	ClientId string `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty" kong:"help='User specified client ID to connect with',default=plumber,env='PLUMBER_RELAY_NATS_JETSTREAM_CLIENT_ID'"`
	// @gotags: kong:"embed"
	TlsOptions *NatsJetstreamTLSOptions `protobuf:"bytes,4,opt,name=tls_options,json=tlsOptions,proto3" json:"tls_options,omitempty" kong:"embed"`
	// @gotags: kong:"help='File containing NATS NKey',env='PLUMBER_RELAY_NATS_JETSTREAM_NKEY'"
	Nkey                 string   `protobuf:"bytes,5,opt,name=nkey,proto3" json:"nkey,omitempty" kong:"help='File containing NATS NKey',env='PLUMBER_RELAY_NATS_JETSTREAM_NKEY'"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NatsJetstreamConn) Reset()         { *m = NatsJetstreamConn{} }
func (m *NatsJetstreamConn) String() string { return proto.CompactTextString(m) }
func (*NatsJetstreamConn) ProtoMessage()    {}
func (*NatsJetstreamConn) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1868c7e9e1b078c, []int{1}
}

func (m *NatsJetstreamConn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NatsJetstreamConn.Unmarshal(m, b)
}
func (m *NatsJetstreamConn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NatsJetstreamConn.Marshal(b, m, deterministic)
}
func (m *NatsJetstreamConn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NatsJetstreamConn.Merge(m, src)
}
func (m *NatsJetstreamConn) XXX_Size() int {
	return xxx_messageInfo_NatsJetstreamConn.Size(m)
}
func (m *NatsJetstreamConn) XXX_DiscardUnknown() {
	xxx_messageInfo_NatsJetstreamConn.DiscardUnknown(m)
}

var xxx_messageInfo_NatsJetstreamConn proto.InternalMessageInfo

func (m *NatsJetstreamConn) GetDsn() string {
	if m != nil {
		return m.Dsn
	}
	return ""
}

func (m *NatsJetstreamConn) GetUserCredentials() string {
	if m != nil {
		return m.UserCredentials
	}
	return ""
}

func (m *NatsJetstreamConn) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *NatsJetstreamConn) GetTlsOptions() *NatsJetstreamTLSOptions {
	if m != nil {
		return m.TlsOptions
	}
	return nil
}

func (m *NatsJetstreamConn) GetNkey() string {
	if m != nil {
		return m.Nkey
	}
	return ""
}

type NatsJetstreamReadArgs struct {
	// @gotags: kong:"help='NATS JetStream stream name. Ex: orders.>',env='PLUMBER_RELAY_NATS_JETSTREAM_STREAM'"
	Stream string `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty" kong:"help='NATS JetStream stream name. Ex: orders.>',env='PLUMBER_RELAY_NATS_JETSTREAM_STREAM'"`
	// @gotags: kong:"help='Consumer name (default: random consumer name; has no effect if create_durable_consumer or existing_durable_consumer is not set)',env='PLUMBER_RELAY_NATS_JETSTREAM_CONSUMER_NAME'"
	ConsumerName string `protobuf:"bytes,2,opt,name=consumer_name,json=consumerName,proto3" json:"consumer_name,omitempty" kong:"help='Consumer name (default: random consumer name; has no effect if create_durable_consumer or existing_durable_consumer is not set)',env='PLUMBER_RELAY_NATS_JETSTREAM_CONSUMER_NAME'"`
	// @gotags: kong:"help='Create a new durable consumer (default: use ephemeral consumer)',env='PLUMBER_RELAY_NATS_JETSTREAM_CREATE_DURABLE_CONSUMER'"
	CreateDurableConsumer bool `protobuf:"varint,3,opt,name=create_durable_consumer,json=createDurableConsumer,proto3" json:"create_durable_consumer,omitempty" kong:"help='Create a new durable consumer (default: use ephemeral consumer)',env='PLUMBER_RELAY_NATS_JETSTREAM_CREATE_DURABLE_CONSUMER'"`
	// @gotags: kong:"help='Use an existing durable consumer (default: use ephemeral consumer)',env='PLUMBER_RELAY_NATS_JETSTREAM_EXISTING_DURABLE_CONSUMER'"
	ExistingDurableConsumer bool `protobuf:"varint,4,opt,name=existing_durable_consumer,json=existingDurableConsumer,proto3" json:"existing_durable_consumer,omitempty" kong:"help='Use an existing durable consumer (default: use ephemeral consumer)',env='PLUMBER_RELAY_NATS_JETSTREAM_EXISTING_DURABLE_CONSUMER'"`
	// @gotags: kong:"help='Do not delete consumer after operation is done (default: delete on exit)',env='PLUMBER_RELAY_NATS_JETSTREAM_KEEP_CONSUMER'"
	KeepConsumer bool `protobuf:"varint,5,opt,name=keep_consumer,json=keepConsumer,proto3" json:"keep_consumer,omitempty" kong:"help='Do not delete consumer after operation is done (default: delete on exit)',env='PLUMBER_RELAY_NATS_JETSTREAM_KEEP_CONSUMER'"`
	// @gotags: kong:"help='Where to start read in stream (default: from start)',env='PLUMBER_RELAY_NATS_JETSTREAM_CONSUMER_START_SEQUENCE'"
	ConsumerStartSequence int64 `protobuf:"varint,6,opt,name=consumer_start_sequence,json=consumerStartSequence,proto3" json:"consumer_start_sequence,omitempty" kong:"help='Where to start read in stream (default: from start)',env='PLUMBER_RELAY_NATS_JETSTREAM_CONSUMER_START_SEQUENCE'"`
	// @gotags: kong:"help='At what time to start stream (RFC3339 format, Ex: 2016-06-20T12:41:45.14Z)',env='PLUMBER_RELAY_NATS_JETSTREAM_CONSUMER_START_TIME'"
	ConsumerStartTime string `protobuf:"bytes,7,opt,name=consumer_start_time,json=consumerStartTime,proto3" json:"consumer_start_time,omitempty" kong:"help='At what time to start stream (RFC3339 format, Ex: 2016-06-20T12:41:45.14Z)',env='PLUMBER_RELAY_NATS_JETSTREAM_CONSUMER_START_TIME'"`
	// @gotags: kong:"help='Only receive a subset of messages from the Stream based on the subject',env='PLUMBER_RELAY_NATS_JETSTREAM_CONSUMER_FILTER_SUBJECT'"
	ConsumerFilterSubject string   `protobuf:"bytes,8,opt,name=consumer_filter_subject,json=consumerFilterSubject,proto3" json:"consumer_filter_subject,omitempty" kong:"help='Only receive a subset of messages from the Stream based on the subject',env='PLUMBER_RELAY_NATS_JETSTREAM_CONSUMER_FILTER_SUBJECT'"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *NatsJetstreamReadArgs) Reset()         { *m = NatsJetstreamReadArgs{} }
func (m *NatsJetstreamReadArgs) String() string { return proto.CompactTextString(m) }
func (*NatsJetstreamReadArgs) ProtoMessage()    {}
func (*NatsJetstreamReadArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1868c7e9e1b078c, []int{2}
}

func (m *NatsJetstreamReadArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NatsJetstreamReadArgs.Unmarshal(m, b)
}
func (m *NatsJetstreamReadArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NatsJetstreamReadArgs.Marshal(b, m, deterministic)
}
func (m *NatsJetstreamReadArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NatsJetstreamReadArgs.Merge(m, src)
}
func (m *NatsJetstreamReadArgs) XXX_Size() int {
	return xxx_messageInfo_NatsJetstreamReadArgs.Size(m)
}
func (m *NatsJetstreamReadArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_NatsJetstreamReadArgs.DiscardUnknown(m)
}

var xxx_messageInfo_NatsJetstreamReadArgs proto.InternalMessageInfo

func (m *NatsJetstreamReadArgs) GetStream() string {
	if m != nil {
		return m.Stream
	}
	return ""
}

func (m *NatsJetstreamReadArgs) GetConsumerName() string {
	if m != nil {
		return m.ConsumerName
	}
	return ""
}

func (m *NatsJetstreamReadArgs) GetCreateDurableConsumer() bool {
	if m != nil {
		return m.CreateDurableConsumer
	}
	return false
}

func (m *NatsJetstreamReadArgs) GetExistingDurableConsumer() bool {
	if m != nil {
		return m.ExistingDurableConsumer
	}
	return false
}

func (m *NatsJetstreamReadArgs) GetKeepConsumer() bool {
	if m != nil {
		return m.KeepConsumer
	}
	return false
}

func (m *NatsJetstreamReadArgs) GetConsumerStartSequence() int64 {
	if m != nil {
		return m.ConsumerStartSequence
	}
	return 0
}

func (m *NatsJetstreamReadArgs) GetConsumerStartTime() string {
	if m != nil {
		return m.ConsumerStartTime
	}
	return ""
}

func (m *NatsJetstreamReadArgs) GetConsumerFilterSubject() string {
	if m != nil {
		return m.ConsumerFilterSubject
	}
	return ""
}

type NatsJetstreamWriteArgs struct {
	// @gotags: kong:"help='NATS JetStream subject name to write to. Ex: orders.>'"
	Subject              string   `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty" kong:"help='NATS JetStream subject name to write to. Ex: orders.>'"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NatsJetstreamWriteArgs) Reset()         { *m = NatsJetstreamWriteArgs{} }
func (m *NatsJetstreamWriteArgs) String() string { return proto.CompactTextString(m) }
func (*NatsJetstreamWriteArgs) ProtoMessage()    {}
func (*NatsJetstreamWriteArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1868c7e9e1b078c, []int{3}
}

func (m *NatsJetstreamWriteArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NatsJetstreamWriteArgs.Unmarshal(m, b)
}
func (m *NatsJetstreamWriteArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NatsJetstreamWriteArgs.Marshal(b, m, deterministic)
}
func (m *NatsJetstreamWriteArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NatsJetstreamWriteArgs.Merge(m, src)
}
func (m *NatsJetstreamWriteArgs) XXX_Size() int {
	return xxx_messageInfo_NatsJetstreamWriteArgs.Size(m)
}
func (m *NatsJetstreamWriteArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_NatsJetstreamWriteArgs.DiscardUnknown(m)
}

var xxx_messageInfo_NatsJetstreamWriteArgs proto.InternalMessageInfo

func (m *NatsJetstreamWriteArgs) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func init() {
	proto.RegisterType((*NatsJetstreamTLSOptions)(nil), "protos.args.NatsJetstreamTLSOptions")
	proto.RegisterType((*NatsJetstreamConn)(nil), "protos.args.NatsJetstreamConn")
	proto.RegisterType((*NatsJetstreamReadArgs)(nil), "protos.args.NatsJetstreamReadArgs")
	proto.RegisterType((*NatsJetstreamWriteArgs)(nil), "protos.args.NatsJetstreamWriteArgs")
}

func init() { proto.RegisterFile("ps_args_nats_jetstream.proto", fileDescriptor_a1868c7e9e1b078c) }

var fileDescriptor_a1868c7e9e1b078c = []byte{
	// 533 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0x5d, 0x6f, 0xd3, 0x30,
	0x14, 0x55, 0xe9, 0xd6, 0xb5, 0x6e, 0xcb, 0x36, 0xa3, 0xae, 0x41, 0x20, 0x54, 0x75, 0x13, 0x2a,
	0x0f, 0x24, 0xd2, 0x90, 0x90, 0x80, 0x27, 0x28, 0x20, 0xf1, 0xa1, 0x21, 0xb5, 0x15, 0x48, 0xbc,
	0x58, 0x4e, 0x72, 0xd7, 0x7a, 0x4d, 0x9c, 0xe0, 0x7b, 0x83, 0xe8, 0x8f, 0xe0, 0x7f, 0xf1, 0xb3,
	0x50, 0xec, 0xa4, 0x5b, 0x87, 0x78, 0x8a, 0x7d, 0xce, 0xb9, 0x37, 0xe7, 0x9e, 0x6b, 0xf6, 0x30,
	0x47, 0x21, 0xcd, 0x12, 0x85, 0x96, 0x84, 0xe2, 0x0a, 0x08, 0xc9, 0x80, 0x4c, 0xfd, 0xdc, 0x64,
	0x94, 0xf1, 0xae, 0xfd, 0xa0, 0x5f, 0x2a, 0xc6, 0x7f, 0x1a, 0x6c, 0x78, 0x21, 0x09, 0x3f, 0xd6,
	0xa2, 0xc5, 0xe7, 0xf9, 0x97, 0x9c, 0x54, 0xa6, 0x91, 0x3f, 0x62, 0x5d, 0x4a, 0x50, 0x44, 0x52,
	0x44, 0x60, 0xc8, 0x6b, 0x8c, 0x1a, 0x93, 0xce, 0xac, 0x43, 0x09, 0x4e, 0xe5, 0x14, 0x0c, 0xf1,
	0xc7, 0xec, 0xd0, 0xf2, 0x89, 0x02, 0x4d, 0x4e, 0x73, 0xc7, 0x6a, 0xfa, 0xa5, 0xc6, 0xa2, 0x56,
	0x77, 0xc6, 0xee, 0xde, 0xd0, 0xad, 0x61, 0xe3, 0x35, 0xad, 0xac, 0xb7, 0x95, 0x7d, 0x82, 0x4d,
	0xdd, 0x0d, 0xd7, 0x2a, 0x17, 0x3f, 0xc1, 0xa8, 0xcb, 0x8d, 0xb7, 0x37, 0x6a, 0x4c, 0xda, 0xb6,
	0xdb, 0x7c, 0xad, 0xf2, 0xaf, 0x16, 0xe4, 0x43, 0x76, 0x50, 0x20, 0x08, 0x4a, 0xd0, 0xdb, 0xb7,
	0x7c, 0xab, 0x40, 0x58, 0x24, 0x76, 0x94, 0xe3, 0x9d, 0x51, 0xa6, 0x99, 0xd6, 0xfc, 0x88, 0x35,
	0x63, 0xd4, 0x95, 0xf9, 0xf2, 0xc8, 0x9f, 0xb0, 0xa3, 0x02, 0xc1, 0x88, 0xc8, 0x40, 0x0c, 0x9a,
	0x94, 0x4c, 0xb0, 0xf2, 0x7d, 0x58, 0xe2, 0xd3, 0x6b, 0x98, 0x3f, 0x60, 0x9d, 0xca, 0xb5, 0x8a,
	0x2b, 0xd3, 0x6d, 0x07, 0x7c, 0x88, 0xf9, 0x3b, 0x17, 0x4f, 0xe6, 0xd2, 0xb2, 0x66, 0xbb, 0xe7,
	0x67, 0xfe, 0x8d, 0x74, 0xfd, 0xff, 0x24, 0x3b, 0x63, 0x94, 0x60, 0x9d, 0x32, 0x67, 0x7b, 0xba,
	0xcc, 0x64, 0xdf, 0xb6, 0xb7, 0xe7, 0xf1, 0xef, 0x26, 0x1b, 0xec, 0xd4, 0xce, 0x40, 0xc6, 0xaf,
	0xcd, 0x12, 0xf9, 0x09, 0x6b, 0x39, 0xa4, 0x9a, 0xa8, 0xba, 0xf1, 0x53, 0xd6, 0x8f, 0x32, 0x8d,
	0x45, 0x0a, 0x46, 0x68, 0x99, 0x42, 0x35, 0x51, 0xaf, 0x06, 0x2f, 0x64, 0x0a, 0xfc, 0x39, 0x1b,
	0x46, 0x06, 0x24, 0x81, 0x88, 0x0b, 0x23, 0xc3, 0x04, 0x44, 0x4d, 0xdb, 0xe1, 0xda, 0xb3, 0x81,
	0xa3, 0xdf, 0x3a, 0x76, 0x5a, 0x91, 0xfc, 0x25, 0xbb, 0x0f, 0xbf, 0x14, 0x92, 0xd2, 0xcb, 0x7f,
	0x2b, 0xdd, 0x92, 0x86, 0xb5, 0xe0, 0x76, 0xed, 0x29, 0xeb, 0xaf, 0x01, 0xf2, 0x6b, 0xbd, 0x5b,
	0x5a, 0xaf, 0x04, 0xb7, 0xa2, 0xd2, 0x58, 0xed, 0x1e, 0x49, 0x1a, 0x12, 0x08, 0x3f, 0x0a, 0xd0,
	0x11, 0x78, 0xad, 0x51, 0x63, 0xd2, 0x9c, 0x0d, 0x6a, 0x7a, 0x5e, 0xb2, 0xf3, 0x8a, 0xe4, 0x3e,
	0xbb, 0x77, 0xab, 0x8e, 0x54, 0x0a, 0xde, 0x81, 0x9d, 0xfd, 0x78, 0xa7, 0x66, 0xa1, 0xaa, 0x00,
	0x6a, 0xfd, 0xa5, 0x4a, 0xa8, 0x2c, 0x2b, 0xc2, 0x2b, 0x88, 0xc8, 0x6b, 0xdb, 0x9a, 0xed, 0x7f,
	0xde, 0x5b, 0x76, 0xee, 0xc8, 0xf1, 0x39, 0x3b, 0xd9, 0x59, 0xc7, 0x37, 0xa3, 0x08, 0xec, 0x3e,
	0x3c, 0x76, 0x50, 0x77, 0x70, 0x0b, 0xa9, 0xaf, 0x6f, 0x5e, 0x7d, 0x7f, 0xb1, 0x54, 0xb4, 0x2a,
	0x42, 0x3f, 0xca, 0xd2, 0x20, 0x94, 0x14, 0xad, 0xa2, 0xcc, 0xe4, 0x41, 0x9e, 0x14, 0x69, 0x08,
	0xe6, 0x29, 0x46, 0x2b, 0x48, 0x25, 0x06, 0x61, 0xa1, 0x92, 0x38, 0x58, 0x66, 0x81, 0x7b, 0x38,
	0x41, 0xf9, 0x70, 0xc2, 0x96, 0xbd, 0x3c, 0xfb, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x00, 0xe9, 0x9b,
	0x9b, 0xca, 0x03, 0x00, 0x00,
}
