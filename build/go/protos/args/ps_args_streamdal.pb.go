// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ps_args_streamdal.proto

package args

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type StreamdalWriteArgs struct {
	// @gotags: kong:"help='Secret collection token',required"
	CollectionToken string `protobuf:"bytes,1,opt,name=collection_token,json=collectionToken,proto3" json:"collection_token,omitempty" kong:"help='Secret collection token',required"`
	// @gotags: kong:"help='Consumed messages are intended to be dead-lettered'"
	DeadLetter bool `protobuf:"varint,2,opt,name=dead_letter,json=deadLetter,proto3" json:"dead_letter,omitempty" kong:"help='Consumed messages are intended to be dead-lettered'"`
	// @gotags: kong:"help='Alternative collector to send events to',default='grpc-collector.streamdal.com:9000'"
	StreamdalGrpcAddress string `protobuf:"bytes,3,opt,name=streamdal_grpc_address,json=streamdalGrpcAddress,proto3" json:"streamdal_grpc_address,omitempty" kong:"help='Alternative collector to send events to',default='grpc-collector.streamdal.com:9000'"`
	// @gotags: kong:"help='Whether to use TLS with collector'"
	StreamdalGrpcDisableTls bool `protobuf:"varint,4,opt,name=streamdal_grpc_disable_tls,json=streamdalGrpcDisableTls,proto3" json:"streamdal_grpc_disable_tls,omitempty" kong:"help='Whether to use TLS with collector'"`
	// @gotags: kong:"help='How long to wait before giving up talking to the gRPC collector',default=5"
	StreamdalGrpcTimeoutSeconds int32    `protobuf:"varint,5,opt,name=streamdal_grpc_timeout_seconds,json=streamdalGrpcTimeoutSeconds,proto3" json:"streamdal_grpc_timeout_seconds,omitempty" kong:"help='How long to wait before giving up talking to the gRPC collector',default=5"`
	XXX_NoUnkeyedLiteral        struct{} `json:"-"`
	XXX_unrecognized            []byte   `json:"-"`
	XXX_sizecache               int32    `json:"-"`
}

func (m *StreamdalWriteArgs) Reset()         { *m = StreamdalWriteArgs{} }
func (m *StreamdalWriteArgs) String() string { return proto.CompactTextString(m) }
func (*StreamdalWriteArgs) ProtoMessage()    {}
func (*StreamdalWriteArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff0bbb09159a6230, []int{0}
}

func (m *StreamdalWriteArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamdalWriteArgs.Unmarshal(m, b)
}
func (m *StreamdalWriteArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamdalWriteArgs.Marshal(b, m, deterministic)
}
func (m *StreamdalWriteArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamdalWriteArgs.Merge(m, src)
}
func (m *StreamdalWriteArgs) XXX_Size() int {
	return xxx_messageInfo_StreamdalWriteArgs.Size(m)
}
func (m *StreamdalWriteArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamdalWriteArgs.DiscardUnknown(m)
}

var xxx_messageInfo_StreamdalWriteArgs proto.InternalMessageInfo

func (m *StreamdalWriteArgs) GetCollectionToken() string {
	if m != nil {
		return m.CollectionToken
	}
	return ""
}

func (m *StreamdalWriteArgs) GetDeadLetter() bool {
	if m != nil {
		return m.DeadLetter
	}
	return false
}

func (m *StreamdalWriteArgs) GetStreamdalGrpcAddress() string {
	if m != nil {
		return m.StreamdalGrpcAddress
	}
	return ""
}

func (m *StreamdalWriteArgs) GetStreamdalGrpcDisableTls() bool {
	if m != nil {
		return m.StreamdalGrpcDisableTls
	}
	return false
}

func (m *StreamdalWriteArgs) GetStreamdalGrpcTimeoutSeconds() int32 {
	if m != nil {
		return m.StreamdalGrpcTimeoutSeconds
	}
	return 0
}

func init() {
	proto.RegisterType((*StreamdalWriteArgs)(nil), "protos.args.StreamdalWriteArgs")
}

func init() { proto.RegisterFile("ps_args_streamdal.proto", fileDescriptor_ff0bbb09159a6230) }

var fileDescriptor_ff0bbb09159a6230 = []byte{
	// 278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x4f, 0x4b, 0x33, 0x31,
	0x10, 0xc6, 0xd9, 0xbe, 0x6f, 0x45, 0xd3, 0x83, 0x12, 0xc4, 0x2e, 0x0a, 0x5a, 0x3c, 0xd5, 0x83,
	0xcd, 0x41, 0x2f, 0xd2, 0x53, 0x55, 0xf0, 0xe2, 0x69, 0xbb, 0x20, 0x78, 0x09, 0xf9, 0x33, 0xec,
	0x06, 0xb3, 0x9b, 0x90, 0x99, 0xfd, 0x2e, 0x7e, 0x5c, 0xd9, 0x5d, 0xac, 0xb4, 0xa7, 0x90, 0xdf,
	0xef, 0x79, 0x26, 0x61, 0xd8, 0x3c, 0xa2, 0x54, 0xa9, 0x42, 0x89, 0x94, 0x40, 0x35, 0x56, 0xf9,
	0x55, 0x4c, 0x81, 0x02, 0x9f, 0x0d, 0x07, 0xae, 0x7a, 0x79, 0xfb, 0x3d, 0x61, 0x7c, 0xfb, 0x1b,
	0xf8, 0x48, 0x8e, 0x60, 0x93, 0x2a, 0xe4, 0x77, 0xec, 0xcc, 0x04, 0xef, 0xc1, 0x90, 0x0b, 0xad,
	0xa4, 0xf0, 0x05, 0x6d, 0x9e, 0x2d, 0xb2, 0xe5, 0x49, 0x71, 0xfa, 0xc7, 0xcb, 0x1e, 0xf3, 0x1b,
	0x36, 0xb3, 0xa0, 0xac, 0xf4, 0x40, 0x04, 0x29, 0x9f, 0x2c, 0xb2, 0xe5, 0x71, 0xc1, 0x7a, 0xf4,
	0x3e, 0x10, 0xfe, 0xc8, 0x2e, 0x76, 0x5f, 0x90, 0x55, 0x8a, 0x46, 0x2a, 0x6b, 0x13, 0x20, 0xe6,
	0xff, 0x86, 0x89, 0xe7, 0x3b, 0xfb, 0x96, 0xa2, 0xd9, 0x8c, 0x8e, 0xaf, 0xd9, 0xe5, 0x41, 0xcb,
	0x3a, 0x54, 0xda, 0x83, 0x24, 0x8f, 0xf9, 0xff, 0xe1, 0x95, 0xf9, 0x5e, 0xf3, 0x75, 0xf4, 0xa5,
	0x47, 0xfe, 0xc2, 0xae, 0x0f, 0xca, 0xe4, 0x1a, 0x08, 0x1d, 0x49, 0x04, 0x13, 0x5a, 0x8b, 0xf9,
	0x74, 0x91, 0x2d, 0xa7, 0xc5, 0xd5, 0xde, 0x80, 0x72, 0xcc, 0x6c, 0xc7, 0xc8, 0xf3, 0xfa, 0xf3,
	0xa9, 0x72, 0x54, 0x77, 0x7a, 0x65, 0x42, 0x23, 0xb4, 0x22, 0x53, 0x9b, 0x90, 0xa2, 0x88, 0xbe,
	0x6b, 0x34, 0xa4, 0x7b, 0x34, 0x35, 0x34, 0x0a, 0x85, 0xee, 0x9c, 0xb7, 0xa2, 0x0a, 0x62, 0xdc,
	0xab, 0xe8, 0xf7, 0xaa, 0x8f, 0x86, 0xcb, 0xc3, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3f, 0x6c,
	0xce, 0xd1, 0x86, 0x01, 0x00, 0x00,
}
