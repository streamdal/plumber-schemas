// Code generated by protoc-gen-go. DO NOT EDIT.
// source: opts/ps_opts_tunnel.proto

package opts

import (
	fmt "fmt"
	args "github.com/batchcorp/plumber-schemas/build/go/protos/args"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TunnelOptions struct {
	// @gotags: kong:"help='API token to use for tunnel (create here: https://console.batch.sh/account/security)',required"
	ApiToken string `protobuf:"bytes,1,opt,name=api_token,json=apiToken,proto3" json:"api_token,omitempty" kong:"help='API token to use for tunnel (create here: https://console.batch.sh/account/security)',required"`
	// @gotags: kong:"-"
	ConnectionId string `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty" kong:"-"`
	// @gotags: kong:"help='Tunnel API address',default='dproxy.batch.sh:443'"
	XGrpcAddress string `protobuf:"bytes,3,opt,name=_grpc_address,json=GrpcAddress,proto3" json:"_grpc_address,omitempty" kong:"help='Tunnel API address',default='dproxy.batch.sh:443'"`
	// @gotags: kong:"help='Tunnel API initial connection timeout',default=5"
	XGrpcTimeoutSeconds uint32 `protobuf:"varint,4,opt,name=_grpc_timeout_seconds,json=GrpcTimeoutSeconds,proto3" json:"_grpc_timeout_seconds,omitempty" kong:"help='Tunnel API initial connection timeout',default=5"`
	// @gotags: kong:"help='Use gRPC insecure mode when talking to Batch'"
	XGrpcInsecure bool `protobuf:"varint,5,opt,name=_grpc_insecure,json=GrpcInsecure,proto3" json:"_grpc_insecure,omitempty" kong:"help='Use gRPC insecure mode when talking to Batch'"`
	// Optional for server, ignored for CLI.
	// NOTE: CLI-based tunnels will be treated as ephemeral.
	// @gotags: kong:"-"
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty" kong:"-"`
	// ID of the created tunnel; populated by plumber.
	// @gotags: kong:"-"
	XTunnelId string `protobuf:"bytes,1000,opt,name=_tunnel_id,json=TunnelId,proto3" json:"_tunnel_id,omitempty" kong:"-"`
	// Set by CreateTunnel() StopTunnel() and ResumeTunnel() methods in Plumber
	// @gotags: kong:"-"
	XActive bool `protobuf:"varint,1001,opt,name=_active,json=Active,proto3" json:"_active,omitempty" kong:"-"`
	// @gotags: kong:"cmd,help='Apache Kafka'"
	Kafka *TunnelGroupKafkaOptions `protobuf:"bytes,100,opt,name=kafka,proto3" json:"kafka,omitempty" kong:"cmd,help='Apache Kafka'"`
	// @gotags: kong:"cmd,help='Apache ActiveMQ'"
	Activemq *TunnelGroupActiveMQOptions `protobuf:"bytes,101,opt,name=activemq,proto3" json:"activemq,omitempty" kong:"cmd,help='Apache ActiveMQ'"`
	// @gotags: kong:"cmd,help='AWS Simple Queue System'"
	AwsSqs *TunnelGroupAWSSQSOptions `protobuf:"bytes,102,opt,name=aws_sqs,json=awsSqs,proto3" json:"aws_sqs,omitempty" kong:"cmd,help='AWS Simple Queue System'"`
	// @gotags: kong:"cmd,help='AWS Simple Notification System'"
	AwsSns *TunnelGroupAWSSNSOptions `protobuf:"bytes,103,opt,name=aws_sns,json=awsSns,proto3" json:"aws_sns,omitempty" kong:"cmd,help='AWS Simple Notification System'"`
	// @gotags: kong:"cmd,help='NATS'"
	Nats *TunnelGroupNatsOptions `protobuf:"bytes,104,opt,name=nats,proto3" json:"nats,omitempty" kong:"cmd,help='NATS'"`
	// @gotags: kong:"cmd,help='NATS Streaming'"
	NatsStreaming *TunnelGroupNatsStreamingOptions `protobuf:"bytes,105,opt,name=nats_streaming,json=natsStreaming,proto3" json:"nats_streaming,omitempty" kong:"cmd,help='NATS Streaming'"`
	// @gotags: kong:"cmd,help='NSQ'"
	Nsq *TunnelGroupNSQOptions `protobuf:"bytes,106,opt,name=nsq,proto3" json:"nsq,omitempty" kong:"cmd,help='NSQ'"`
	// @gotags: kong:"cmd,help='RabbitMQ'"
	Rabbit *TunnelGroupRabbitOptions `protobuf:"bytes,107,opt,name=rabbit,proto3" json:"rabbit,omitempty" kong:"cmd,help='RabbitMQ'"`
	// @gotags: kong:"cmd,help='MQTT'"
	Mqtt *TunnelGroupMQTTOptions `protobuf:"bytes,108,opt,name=mqtt,proto3" json:"mqtt,omitempty" kong:"cmd,help='MQTT'"`
	// @gotags: kong:"cmd,help='Azure Service Bus'"
	AzureServiceBus *TunnelGroupAzureServiceBusOptions `protobuf:"bytes,109,opt,name=azure_service_bus,json=azureServiceBus,proto3" json:"azure_service_bus,omitempty" kong:"cmd,help='Azure Service Bus'"`
	// @gotags: kong:"cmd,help='Azure Event Hub'"
	AzureEventHub *TunnelGroupAzureEventHubOptions `protobuf:"bytes,110,opt,name=azure_event_hub,json=azureEventHub,proto3" json:"azure_event_hub,omitempty" kong:"cmd,help='Azure Event Hub'"`
	// @gotags: kong:"cmd,help='Google Cloud Platform Pub/Sub'"
	GcpPubsub *TunnelGroupGCPPubSubOptions `protobuf:"bytes,111,opt,name=gcp_pubsub,json=gcpPubsub,proto3" json:"gcp_pubsub,omitempty" kong:"cmd,help='Google Cloud Platform Pub/Sub'"`
	// @gotags: kong:"cmd,help='KubeMQ Queue'"
	KubemqQueue *TunnelGroupKubeMQQueueOptions `protobuf:"bytes,112,opt,name=kubemq_queue,json=kubemqQueue,proto3" json:"kubemq_queue,omitempty" kong:"cmd,help='KubeMQ Queue'"`
	// @gotags: kong:"cmd,help='Redis PubSub'"
	RedisPubsub *TunnelGroupRedisPubSubOptions `protobuf:"bytes,113,opt,name=redis_pubsub,json=redisPubsub,proto3" json:"redis_pubsub,omitempty" kong:"cmd,help='Redis PubSub'"`
	// @gotags: kong:"cmd,help='Redis Streams'"
	RedisStreams *TunnelGroupRedisStreamsOptions `protobuf:"bytes,114,opt,name=redis_streams,json=redisStreams,proto3" json:"redis_streams,omitempty" kong:"cmd,help='Redis Streams'"`
	// @gotags: kong:"cmd,help='Apache Pulsar'"
	Pulsar *TunnelGroupPulsarOptions `protobuf:"bytes,115,opt,name=pulsar,proto3" json:"pulsar,omitempty" kong:"cmd,help='Apache Pulsar'"`
	// @gotags: kong:"cmd,help='RabbitMQ Streams'"
	RabbitStreams *TunnelGroupRabbitStreamsOptions `protobuf:"bytes,116,opt,name=rabbit_streams,json=rabbitStreams,proto3" json:"rabbit_streams,omitempty" kong:"cmd,help='RabbitMQ Streams'"`
	// @gotags: kong:"cmd,help='NATS JetStream'"
	NatsJetstream *TunnelGroupNatsJetstreamOptions `protobuf:"bytes,117,opt,name=nats_jetstream,json=natsJetstream,proto3" json:"nats_jetstream,omitempty" kong:"cmd,help='NATS JetStream'"`
	// @gotags: kong:"cmd,help='AWS Kinesis Streams'"
	AwsKinesis           *TunnelGroupAWSKinesisOptions `protobuf:"bytes,118,opt,name=aws_kinesis,json=awsKinesis,proto3" json:"aws_kinesis,omitempty" kong:"cmd,help='AWS Kinesis Streams'"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *TunnelOptions) Reset()         { *m = TunnelOptions{} }
func (m *TunnelOptions) String() string { return proto.CompactTextString(m) }
func (*TunnelOptions) ProtoMessage()    {}
func (*TunnelOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ce1637d1f7d7036, []int{0}
}

func (m *TunnelOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TunnelOptions.Unmarshal(m, b)
}
func (m *TunnelOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TunnelOptions.Marshal(b, m, deterministic)
}
func (m *TunnelOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TunnelOptions.Merge(m, src)
}
func (m *TunnelOptions) XXX_Size() int {
	return xxx_messageInfo_TunnelOptions.Size(m)
}
func (m *TunnelOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_TunnelOptions.DiscardUnknown(m)
}

var xxx_messageInfo_TunnelOptions proto.InternalMessageInfo

func (m *TunnelOptions) GetApiToken() string {
	if m != nil {
		return m.ApiToken
	}
	return ""
}

func (m *TunnelOptions) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func (m *TunnelOptions) GetXGrpcAddress() string {
	if m != nil {
		return m.XGrpcAddress
	}
	return ""
}

func (m *TunnelOptions) GetXGrpcTimeoutSeconds() uint32 {
	if m != nil {
		return m.XGrpcTimeoutSeconds
	}
	return 0
}

func (m *TunnelOptions) GetXGrpcInsecure() bool {
	if m != nil {
		return m.XGrpcInsecure
	}
	return false
}

func (m *TunnelOptions) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TunnelOptions) GetXTunnelId() string {
	if m != nil {
		return m.XTunnelId
	}
	return ""
}

func (m *TunnelOptions) GetXActive() bool {
	if m != nil {
		return m.XActive
	}
	return false
}

func (m *TunnelOptions) GetKafka() *TunnelGroupKafkaOptions {
	if m != nil {
		return m.Kafka
	}
	return nil
}

func (m *TunnelOptions) GetActivemq() *TunnelGroupActiveMQOptions {
	if m != nil {
		return m.Activemq
	}
	return nil
}

func (m *TunnelOptions) GetAwsSqs() *TunnelGroupAWSSQSOptions {
	if m != nil {
		return m.AwsSqs
	}
	return nil
}

func (m *TunnelOptions) GetAwsSns() *TunnelGroupAWSSNSOptions {
	if m != nil {
		return m.AwsSns
	}
	return nil
}

func (m *TunnelOptions) GetNats() *TunnelGroupNatsOptions {
	if m != nil {
		return m.Nats
	}
	return nil
}

func (m *TunnelOptions) GetNatsStreaming() *TunnelGroupNatsStreamingOptions {
	if m != nil {
		return m.NatsStreaming
	}
	return nil
}

func (m *TunnelOptions) GetNsq() *TunnelGroupNSQOptions {
	if m != nil {
		return m.Nsq
	}
	return nil
}

func (m *TunnelOptions) GetRabbit() *TunnelGroupRabbitOptions {
	if m != nil {
		return m.Rabbit
	}
	return nil
}

func (m *TunnelOptions) GetMqtt() *TunnelGroupMQTTOptions {
	if m != nil {
		return m.Mqtt
	}
	return nil
}

func (m *TunnelOptions) GetAzureServiceBus() *TunnelGroupAzureServiceBusOptions {
	if m != nil {
		return m.AzureServiceBus
	}
	return nil
}

func (m *TunnelOptions) GetAzureEventHub() *TunnelGroupAzureEventHubOptions {
	if m != nil {
		return m.AzureEventHub
	}
	return nil
}

func (m *TunnelOptions) GetGcpPubsub() *TunnelGroupGCPPubSubOptions {
	if m != nil {
		return m.GcpPubsub
	}
	return nil
}

func (m *TunnelOptions) GetKubemqQueue() *TunnelGroupKubeMQQueueOptions {
	if m != nil {
		return m.KubemqQueue
	}
	return nil
}

func (m *TunnelOptions) GetRedisPubsub() *TunnelGroupRedisPubSubOptions {
	if m != nil {
		return m.RedisPubsub
	}
	return nil
}

func (m *TunnelOptions) GetRedisStreams() *TunnelGroupRedisStreamsOptions {
	if m != nil {
		return m.RedisStreams
	}
	return nil
}

func (m *TunnelOptions) GetPulsar() *TunnelGroupPulsarOptions {
	if m != nil {
		return m.Pulsar
	}
	return nil
}

func (m *TunnelOptions) GetRabbitStreams() *TunnelGroupRabbitStreamsOptions {
	if m != nil {
		return m.RabbitStreams
	}
	return nil
}

func (m *TunnelOptions) GetNatsJetstream() *TunnelGroupNatsJetstreamOptions {
	if m != nil {
		return m.NatsJetstream
	}
	return nil
}

func (m *TunnelOptions) GetAwsKinesis() *TunnelGroupAWSKinesisOptions {
	if m != nil {
		return m.AwsKinesis
	}
	return nil
}

type TunnelGroupKafkaOptions struct {
	// @gotags: kong:"embed"
	XConn *args.KafkaConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.KafkaWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *TunnelGroupKafkaOptions) Reset()         { *m = TunnelGroupKafkaOptions{} }
func (m *TunnelGroupKafkaOptions) String() string { return proto.CompactTextString(m) }
func (*TunnelGroupKafkaOptions) ProtoMessage()    {}
func (*TunnelGroupKafkaOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ce1637d1f7d7036, []int{1}
}

func (m *TunnelGroupKafkaOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TunnelGroupKafkaOptions.Unmarshal(m, b)
}
func (m *TunnelGroupKafkaOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TunnelGroupKafkaOptions.Marshal(b, m, deterministic)
}
func (m *TunnelGroupKafkaOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TunnelGroupKafkaOptions.Merge(m, src)
}
func (m *TunnelGroupKafkaOptions) XXX_Size() int {
	return xxx_messageInfo_TunnelGroupKafkaOptions.Size(m)
}
func (m *TunnelGroupKafkaOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_TunnelGroupKafkaOptions.DiscardUnknown(m)
}

var xxx_messageInfo_TunnelGroupKafkaOptions proto.InternalMessageInfo

func (m *TunnelGroupKafkaOptions) GetXConn() *args.KafkaConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *TunnelGroupKafkaOptions) GetArgs() *args.KafkaWriteArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type TunnelGroupActiveMQOptions struct {
	// @gotags: kong:"embed"
	XConn *args.ActiveMQConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.ActiveMQWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *TunnelGroupActiveMQOptions) Reset()         { *m = TunnelGroupActiveMQOptions{} }
func (m *TunnelGroupActiveMQOptions) String() string { return proto.CompactTextString(m) }
func (*TunnelGroupActiveMQOptions) ProtoMessage()    {}
func (*TunnelGroupActiveMQOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ce1637d1f7d7036, []int{2}
}

func (m *TunnelGroupActiveMQOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TunnelGroupActiveMQOptions.Unmarshal(m, b)
}
func (m *TunnelGroupActiveMQOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TunnelGroupActiveMQOptions.Marshal(b, m, deterministic)
}
func (m *TunnelGroupActiveMQOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TunnelGroupActiveMQOptions.Merge(m, src)
}
func (m *TunnelGroupActiveMQOptions) XXX_Size() int {
	return xxx_messageInfo_TunnelGroupActiveMQOptions.Size(m)
}
func (m *TunnelGroupActiveMQOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_TunnelGroupActiveMQOptions.DiscardUnknown(m)
}

var xxx_messageInfo_TunnelGroupActiveMQOptions proto.InternalMessageInfo

func (m *TunnelGroupActiveMQOptions) GetXConn() *args.ActiveMQConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *TunnelGroupActiveMQOptions) GetArgs() *args.ActiveMQWriteArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type TunnelGroupAWSSQSOptions struct {
	// @gotags: kong:"embed"
	XConn *args.AWSSQSConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.AWSSQSWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TunnelGroupAWSSQSOptions) Reset()         { *m = TunnelGroupAWSSQSOptions{} }
func (m *TunnelGroupAWSSQSOptions) String() string { return proto.CompactTextString(m) }
func (*TunnelGroupAWSSQSOptions) ProtoMessage()    {}
func (*TunnelGroupAWSSQSOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ce1637d1f7d7036, []int{3}
}

func (m *TunnelGroupAWSSQSOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TunnelGroupAWSSQSOptions.Unmarshal(m, b)
}
func (m *TunnelGroupAWSSQSOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TunnelGroupAWSSQSOptions.Marshal(b, m, deterministic)
}
func (m *TunnelGroupAWSSQSOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TunnelGroupAWSSQSOptions.Merge(m, src)
}
func (m *TunnelGroupAWSSQSOptions) XXX_Size() int {
	return xxx_messageInfo_TunnelGroupAWSSQSOptions.Size(m)
}
func (m *TunnelGroupAWSSQSOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_TunnelGroupAWSSQSOptions.DiscardUnknown(m)
}

var xxx_messageInfo_TunnelGroupAWSSQSOptions proto.InternalMessageInfo

func (m *TunnelGroupAWSSQSOptions) GetXConn() *args.AWSSQSConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *TunnelGroupAWSSQSOptions) GetArgs() *args.AWSSQSWriteArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type TunnelGroupAWSSNSOptions struct {
	// @gotags: kong:"embed"
	XConn *args.AWSSNSConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.AWSSNSWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TunnelGroupAWSSNSOptions) Reset()         { *m = TunnelGroupAWSSNSOptions{} }
func (m *TunnelGroupAWSSNSOptions) String() string { return proto.CompactTextString(m) }
func (*TunnelGroupAWSSNSOptions) ProtoMessage()    {}
func (*TunnelGroupAWSSNSOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ce1637d1f7d7036, []int{4}
}

func (m *TunnelGroupAWSSNSOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TunnelGroupAWSSNSOptions.Unmarshal(m, b)
}
func (m *TunnelGroupAWSSNSOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TunnelGroupAWSSNSOptions.Marshal(b, m, deterministic)
}
func (m *TunnelGroupAWSSNSOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TunnelGroupAWSSNSOptions.Merge(m, src)
}
func (m *TunnelGroupAWSSNSOptions) XXX_Size() int {
	return xxx_messageInfo_TunnelGroupAWSSNSOptions.Size(m)
}
func (m *TunnelGroupAWSSNSOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_TunnelGroupAWSSNSOptions.DiscardUnknown(m)
}

var xxx_messageInfo_TunnelGroupAWSSNSOptions proto.InternalMessageInfo

func (m *TunnelGroupAWSSNSOptions) GetXConn() *args.AWSSNSConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *TunnelGroupAWSSNSOptions) GetArgs() *args.AWSSNSWriteArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type TunnelGroupNatsOptions struct {
	// @gotags: kong:"embed"
	XConn *args.NatsConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.NatsWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *TunnelGroupNatsOptions) Reset()         { *m = TunnelGroupNatsOptions{} }
func (m *TunnelGroupNatsOptions) String() string { return proto.CompactTextString(m) }
func (*TunnelGroupNatsOptions) ProtoMessage()    {}
func (*TunnelGroupNatsOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ce1637d1f7d7036, []int{5}
}

func (m *TunnelGroupNatsOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TunnelGroupNatsOptions.Unmarshal(m, b)
}
func (m *TunnelGroupNatsOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TunnelGroupNatsOptions.Marshal(b, m, deterministic)
}
func (m *TunnelGroupNatsOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TunnelGroupNatsOptions.Merge(m, src)
}
func (m *TunnelGroupNatsOptions) XXX_Size() int {
	return xxx_messageInfo_TunnelGroupNatsOptions.Size(m)
}
func (m *TunnelGroupNatsOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_TunnelGroupNatsOptions.DiscardUnknown(m)
}

var xxx_messageInfo_TunnelGroupNatsOptions proto.InternalMessageInfo

func (m *TunnelGroupNatsOptions) GetXConn() *args.NatsConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *TunnelGroupNatsOptions) GetArgs() *args.NatsWriteArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type TunnelGroupNatsJetstreamOptions struct {
	// @gotags: kong:"embed"
	XConn *args.NatsJetstreamConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.NatsJetstreamWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *TunnelGroupNatsJetstreamOptions) Reset()         { *m = TunnelGroupNatsJetstreamOptions{} }
func (m *TunnelGroupNatsJetstreamOptions) String() string { return proto.CompactTextString(m) }
func (*TunnelGroupNatsJetstreamOptions) ProtoMessage()    {}
func (*TunnelGroupNatsJetstreamOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ce1637d1f7d7036, []int{6}
}

func (m *TunnelGroupNatsJetstreamOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TunnelGroupNatsJetstreamOptions.Unmarshal(m, b)
}
func (m *TunnelGroupNatsJetstreamOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TunnelGroupNatsJetstreamOptions.Marshal(b, m, deterministic)
}
func (m *TunnelGroupNatsJetstreamOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TunnelGroupNatsJetstreamOptions.Merge(m, src)
}
func (m *TunnelGroupNatsJetstreamOptions) XXX_Size() int {
	return xxx_messageInfo_TunnelGroupNatsJetstreamOptions.Size(m)
}
func (m *TunnelGroupNatsJetstreamOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_TunnelGroupNatsJetstreamOptions.DiscardUnknown(m)
}

var xxx_messageInfo_TunnelGroupNatsJetstreamOptions proto.InternalMessageInfo

func (m *TunnelGroupNatsJetstreamOptions) GetXConn() *args.NatsJetstreamConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *TunnelGroupNatsJetstreamOptions) GetArgs() *args.NatsJetstreamWriteArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type TunnelGroupNatsStreamingOptions struct {
	// @gotags: kong:"embed"
	XConn *args.NatsStreamingConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.NatsStreamingWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *TunnelGroupNatsStreamingOptions) Reset()         { *m = TunnelGroupNatsStreamingOptions{} }
func (m *TunnelGroupNatsStreamingOptions) String() string { return proto.CompactTextString(m) }
func (*TunnelGroupNatsStreamingOptions) ProtoMessage()    {}
func (*TunnelGroupNatsStreamingOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ce1637d1f7d7036, []int{7}
}

func (m *TunnelGroupNatsStreamingOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TunnelGroupNatsStreamingOptions.Unmarshal(m, b)
}
func (m *TunnelGroupNatsStreamingOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TunnelGroupNatsStreamingOptions.Marshal(b, m, deterministic)
}
func (m *TunnelGroupNatsStreamingOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TunnelGroupNatsStreamingOptions.Merge(m, src)
}
func (m *TunnelGroupNatsStreamingOptions) XXX_Size() int {
	return xxx_messageInfo_TunnelGroupNatsStreamingOptions.Size(m)
}
func (m *TunnelGroupNatsStreamingOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_TunnelGroupNatsStreamingOptions.DiscardUnknown(m)
}

var xxx_messageInfo_TunnelGroupNatsStreamingOptions proto.InternalMessageInfo

func (m *TunnelGroupNatsStreamingOptions) GetXConn() *args.NatsStreamingConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *TunnelGroupNatsStreamingOptions) GetArgs() *args.NatsStreamingWriteArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type TunnelGroupNSQOptions struct {
	// @gotags: kong:"embed"
	XConn *args.NSQConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.NSQWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TunnelGroupNSQOptions) Reset()         { *m = TunnelGroupNSQOptions{} }
func (m *TunnelGroupNSQOptions) String() string { return proto.CompactTextString(m) }
func (*TunnelGroupNSQOptions) ProtoMessage()    {}
func (*TunnelGroupNSQOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ce1637d1f7d7036, []int{8}
}

func (m *TunnelGroupNSQOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TunnelGroupNSQOptions.Unmarshal(m, b)
}
func (m *TunnelGroupNSQOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TunnelGroupNSQOptions.Marshal(b, m, deterministic)
}
func (m *TunnelGroupNSQOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TunnelGroupNSQOptions.Merge(m, src)
}
func (m *TunnelGroupNSQOptions) XXX_Size() int {
	return xxx_messageInfo_TunnelGroupNSQOptions.Size(m)
}
func (m *TunnelGroupNSQOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_TunnelGroupNSQOptions.DiscardUnknown(m)
}

var xxx_messageInfo_TunnelGroupNSQOptions proto.InternalMessageInfo

func (m *TunnelGroupNSQOptions) GetXConn() *args.NSQConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *TunnelGroupNSQOptions) GetArgs() *args.NSQWriteArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type TunnelGroupRabbitOptions struct {
	// @gotags: kong:"embed"
	XConn *args.RabbitConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.RabbitWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TunnelGroupRabbitOptions) Reset()         { *m = TunnelGroupRabbitOptions{} }
func (m *TunnelGroupRabbitOptions) String() string { return proto.CompactTextString(m) }
func (*TunnelGroupRabbitOptions) ProtoMessage()    {}
func (*TunnelGroupRabbitOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ce1637d1f7d7036, []int{9}
}

func (m *TunnelGroupRabbitOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TunnelGroupRabbitOptions.Unmarshal(m, b)
}
func (m *TunnelGroupRabbitOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TunnelGroupRabbitOptions.Marshal(b, m, deterministic)
}
func (m *TunnelGroupRabbitOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TunnelGroupRabbitOptions.Merge(m, src)
}
func (m *TunnelGroupRabbitOptions) XXX_Size() int {
	return xxx_messageInfo_TunnelGroupRabbitOptions.Size(m)
}
func (m *TunnelGroupRabbitOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_TunnelGroupRabbitOptions.DiscardUnknown(m)
}

var xxx_messageInfo_TunnelGroupRabbitOptions proto.InternalMessageInfo

func (m *TunnelGroupRabbitOptions) GetXConn() *args.RabbitConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *TunnelGroupRabbitOptions) GetArgs() *args.RabbitWriteArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type TunnelGroupRabbitStreamsOptions struct {
	// @gotags: kong:"embed"
	XConn *args.RabbitStreamsConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.RabbitStreamsWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *TunnelGroupRabbitStreamsOptions) Reset()         { *m = TunnelGroupRabbitStreamsOptions{} }
func (m *TunnelGroupRabbitStreamsOptions) String() string { return proto.CompactTextString(m) }
func (*TunnelGroupRabbitStreamsOptions) ProtoMessage()    {}
func (*TunnelGroupRabbitStreamsOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ce1637d1f7d7036, []int{10}
}

func (m *TunnelGroupRabbitStreamsOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TunnelGroupRabbitStreamsOptions.Unmarshal(m, b)
}
func (m *TunnelGroupRabbitStreamsOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TunnelGroupRabbitStreamsOptions.Marshal(b, m, deterministic)
}
func (m *TunnelGroupRabbitStreamsOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TunnelGroupRabbitStreamsOptions.Merge(m, src)
}
func (m *TunnelGroupRabbitStreamsOptions) XXX_Size() int {
	return xxx_messageInfo_TunnelGroupRabbitStreamsOptions.Size(m)
}
func (m *TunnelGroupRabbitStreamsOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_TunnelGroupRabbitStreamsOptions.DiscardUnknown(m)
}

var xxx_messageInfo_TunnelGroupRabbitStreamsOptions proto.InternalMessageInfo

func (m *TunnelGroupRabbitStreamsOptions) GetXConn() *args.RabbitStreamsConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *TunnelGroupRabbitStreamsOptions) GetArgs() *args.RabbitStreamsWriteArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type TunnelGroupRedisPubSubOptions struct {
	// @gotags: kong:"embed"
	XConn *args.RedisPubSubConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.RedisPubSubWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *TunnelGroupRedisPubSubOptions) Reset()         { *m = TunnelGroupRedisPubSubOptions{} }
func (m *TunnelGroupRedisPubSubOptions) String() string { return proto.CompactTextString(m) }
func (*TunnelGroupRedisPubSubOptions) ProtoMessage()    {}
func (*TunnelGroupRedisPubSubOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ce1637d1f7d7036, []int{11}
}

func (m *TunnelGroupRedisPubSubOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TunnelGroupRedisPubSubOptions.Unmarshal(m, b)
}
func (m *TunnelGroupRedisPubSubOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TunnelGroupRedisPubSubOptions.Marshal(b, m, deterministic)
}
func (m *TunnelGroupRedisPubSubOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TunnelGroupRedisPubSubOptions.Merge(m, src)
}
func (m *TunnelGroupRedisPubSubOptions) XXX_Size() int {
	return xxx_messageInfo_TunnelGroupRedisPubSubOptions.Size(m)
}
func (m *TunnelGroupRedisPubSubOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_TunnelGroupRedisPubSubOptions.DiscardUnknown(m)
}

var xxx_messageInfo_TunnelGroupRedisPubSubOptions proto.InternalMessageInfo

func (m *TunnelGroupRedisPubSubOptions) GetXConn() *args.RedisPubSubConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *TunnelGroupRedisPubSubOptions) GetArgs() *args.RedisPubSubWriteArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type TunnelGroupRedisStreamsOptions struct {
	// @gotags: kong:"embed"
	XConn *args.RedisStreamsConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.RedisStreamsWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *TunnelGroupRedisStreamsOptions) Reset()         { *m = TunnelGroupRedisStreamsOptions{} }
func (m *TunnelGroupRedisStreamsOptions) String() string { return proto.CompactTextString(m) }
func (*TunnelGroupRedisStreamsOptions) ProtoMessage()    {}
func (*TunnelGroupRedisStreamsOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ce1637d1f7d7036, []int{12}
}

func (m *TunnelGroupRedisStreamsOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TunnelGroupRedisStreamsOptions.Unmarshal(m, b)
}
func (m *TunnelGroupRedisStreamsOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TunnelGroupRedisStreamsOptions.Marshal(b, m, deterministic)
}
func (m *TunnelGroupRedisStreamsOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TunnelGroupRedisStreamsOptions.Merge(m, src)
}
func (m *TunnelGroupRedisStreamsOptions) XXX_Size() int {
	return xxx_messageInfo_TunnelGroupRedisStreamsOptions.Size(m)
}
func (m *TunnelGroupRedisStreamsOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_TunnelGroupRedisStreamsOptions.DiscardUnknown(m)
}

var xxx_messageInfo_TunnelGroupRedisStreamsOptions proto.InternalMessageInfo

func (m *TunnelGroupRedisStreamsOptions) GetXConn() *args.RedisStreamsConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *TunnelGroupRedisStreamsOptions) GetArgs() *args.RedisStreamsWriteArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type TunnelGroupAzureEventHubOptions struct {
	// @gotags: kong:"embed"
	XConn *args.AzureEventHubConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.AzureEventHubWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *TunnelGroupAzureEventHubOptions) Reset()         { *m = TunnelGroupAzureEventHubOptions{} }
func (m *TunnelGroupAzureEventHubOptions) String() string { return proto.CompactTextString(m) }
func (*TunnelGroupAzureEventHubOptions) ProtoMessage()    {}
func (*TunnelGroupAzureEventHubOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ce1637d1f7d7036, []int{13}
}

func (m *TunnelGroupAzureEventHubOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TunnelGroupAzureEventHubOptions.Unmarshal(m, b)
}
func (m *TunnelGroupAzureEventHubOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TunnelGroupAzureEventHubOptions.Marshal(b, m, deterministic)
}
func (m *TunnelGroupAzureEventHubOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TunnelGroupAzureEventHubOptions.Merge(m, src)
}
func (m *TunnelGroupAzureEventHubOptions) XXX_Size() int {
	return xxx_messageInfo_TunnelGroupAzureEventHubOptions.Size(m)
}
func (m *TunnelGroupAzureEventHubOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_TunnelGroupAzureEventHubOptions.DiscardUnknown(m)
}

var xxx_messageInfo_TunnelGroupAzureEventHubOptions proto.InternalMessageInfo

func (m *TunnelGroupAzureEventHubOptions) GetXConn() *args.AzureEventHubConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *TunnelGroupAzureEventHubOptions) GetArgs() *args.AzureEventHubWriteArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type TunnelGroupAzureServiceBusOptions struct {
	// @gotags: kong:"embed"{
	XConn *args.AzureServiceBusConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.AzureServiceBusWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *TunnelGroupAzureServiceBusOptions) Reset()         { *m = TunnelGroupAzureServiceBusOptions{} }
func (m *TunnelGroupAzureServiceBusOptions) String() string { return proto.CompactTextString(m) }
func (*TunnelGroupAzureServiceBusOptions) ProtoMessage()    {}
func (*TunnelGroupAzureServiceBusOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ce1637d1f7d7036, []int{14}
}

func (m *TunnelGroupAzureServiceBusOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TunnelGroupAzureServiceBusOptions.Unmarshal(m, b)
}
func (m *TunnelGroupAzureServiceBusOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TunnelGroupAzureServiceBusOptions.Marshal(b, m, deterministic)
}
func (m *TunnelGroupAzureServiceBusOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TunnelGroupAzureServiceBusOptions.Merge(m, src)
}
func (m *TunnelGroupAzureServiceBusOptions) XXX_Size() int {
	return xxx_messageInfo_TunnelGroupAzureServiceBusOptions.Size(m)
}
func (m *TunnelGroupAzureServiceBusOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_TunnelGroupAzureServiceBusOptions.DiscardUnknown(m)
}

var xxx_messageInfo_TunnelGroupAzureServiceBusOptions proto.InternalMessageInfo

func (m *TunnelGroupAzureServiceBusOptions) GetXConn() *args.AzureServiceBusConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *TunnelGroupAzureServiceBusOptions) GetArgs() *args.AzureServiceBusWriteArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type TunnelGroupMQTTOptions struct {
	// @gotags: kong:"embed"
	XConn *args.MQTTConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.MQTTWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *TunnelGroupMQTTOptions) Reset()         { *m = TunnelGroupMQTTOptions{} }
func (m *TunnelGroupMQTTOptions) String() string { return proto.CompactTextString(m) }
func (*TunnelGroupMQTTOptions) ProtoMessage()    {}
func (*TunnelGroupMQTTOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ce1637d1f7d7036, []int{15}
}

func (m *TunnelGroupMQTTOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TunnelGroupMQTTOptions.Unmarshal(m, b)
}
func (m *TunnelGroupMQTTOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TunnelGroupMQTTOptions.Marshal(b, m, deterministic)
}
func (m *TunnelGroupMQTTOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TunnelGroupMQTTOptions.Merge(m, src)
}
func (m *TunnelGroupMQTTOptions) XXX_Size() int {
	return xxx_messageInfo_TunnelGroupMQTTOptions.Size(m)
}
func (m *TunnelGroupMQTTOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_TunnelGroupMQTTOptions.DiscardUnknown(m)
}

var xxx_messageInfo_TunnelGroupMQTTOptions proto.InternalMessageInfo

func (m *TunnelGroupMQTTOptions) GetXConn() *args.MQTTConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *TunnelGroupMQTTOptions) GetArgs() *args.MQTTWriteArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type TunnelGroupGCPPubSubOptions struct {
	// @gotags: kong:"embed"
	XConn *args.GCPPubSubConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.GCPPubSubWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *TunnelGroupGCPPubSubOptions) Reset()         { *m = TunnelGroupGCPPubSubOptions{} }
func (m *TunnelGroupGCPPubSubOptions) String() string { return proto.CompactTextString(m) }
func (*TunnelGroupGCPPubSubOptions) ProtoMessage()    {}
func (*TunnelGroupGCPPubSubOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ce1637d1f7d7036, []int{16}
}

func (m *TunnelGroupGCPPubSubOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TunnelGroupGCPPubSubOptions.Unmarshal(m, b)
}
func (m *TunnelGroupGCPPubSubOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TunnelGroupGCPPubSubOptions.Marshal(b, m, deterministic)
}
func (m *TunnelGroupGCPPubSubOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TunnelGroupGCPPubSubOptions.Merge(m, src)
}
func (m *TunnelGroupGCPPubSubOptions) XXX_Size() int {
	return xxx_messageInfo_TunnelGroupGCPPubSubOptions.Size(m)
}
func (m *TunnelGroupGCPPubSubOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_TunnelGroupGCPPubSubOptions.DiscardUnknown(m)
}

var xxx_messageInfo_TunnelGroupGCPPubSubOptions proto.InternalMessageInfo

func (m *TunnelGroupGCPPubSubOptions) GetXConn() *args.GCPPubSubConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *TunnelGroupGCPPubSubOptions) GetArgs() *args.GCPPubSubWriteArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type TunnelGroupKubeMQQueueOptions struct {
	// @gotags: kong:"embed"
	XConn *args.KubeMQQueueConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.KubeMQQueueWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *TunnelGroupKubeMQQueueOptions) Reset()         { *m = TunnelGroupKubeMQQueueOptions{} }
func (m *TunnelGroupKubeMQQueueOptions) String() string { return proto.CompactTextString(m) }
func (*TunnelGroupKubeMQQueueOptions) ProtoMessage()    {}
func (*TunnelGroupKubeMQQueueOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ce1637d1f7d7036, []int{17}
}

func (m *TunnelGroupKubeMQQueueOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TunnelGroupKubeMQQueueOptions.Unmarshal(m, b)
}
func (m *TunnelGroupKubeMQQueueOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TunnelGroupKubeMQQueueOptions.Marshal(b, m, deterministic)
}
func (m *TunnelGroupKubeMQQueueOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TunnelGroupKubeMQQueueOptions.Merge(m, src)
}
func (m *TunnelGroupKubeMQQueueOptions) XXX_Size() int {
	return xxx_messageInfo_TunnelGroupKubeMQQueueOptions.Size(m)
}
func (m *TunnelGroupKubeMQQueueOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_TunnelGroupKubeMQQueueOptions.DiscardUnknown(m)
}

var xxx_messageInfo_TunnelGroupKubeMQQueueOptions proto.InternalMessageInfo

func (m *TunnelGroupKubeMQQueueOptions) GetXConn() *args.KubeMQQueueConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *TunnelGroupKubeMQQueueOptions) GetArgs() *args.KubeMQQueueWriteArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type TunnelGroupPulsarOptions struct {
	// @gotags: kong:"embed"
	XConn *args.PulsarConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.PulsarWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TunnelGroupPulsarOptions) Reset()         { *m = TunnelGroupPulsarOptions{} }
func (m *TunnelGroupPulsarOptions) String() string { return proto.CompactTextString(m) }
func (*TunnelGroupPulsarOptions) ProtoMessage()    {}
func (*TunnelGroupPulsarOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ce1637d1f7d7036, []int{18}
}

func (m *TunnelGroupPulsarOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TunnelGroupPulsarOptions.Unmarshal(m, b)
}
func (m *TunnelGroupPulsarOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TunnelGroupPulsarOptions.Marshal(b, m, deterministic)
}
func (m *TunnelGroupPulsarOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TunnelGroupPulsarOptions.Merge(m, src)
}
func (m *TunnelGroupPulsarOptions) XXX_Size() int {
	return xxx_messageInfo_TunnelGroupPulsarOptions.Size(m)
}
func (m *TunnelGroupPulsarOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_TunnelGroupPulsarOptions.DiscardUnknown(m)
}

var xxx_messageInfo_TunnelGroupPulsarOptions proto.InternalMessageInfo

func (m *TunnelGroupPulsarOptions) GetXConn() *args.PulsarConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *TunnelGroupPulsarOptions) GetArgs() *args.PulsarWriteArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type TunnelGroupAWSKinesisOptions struct {
	// @gotags: kong:"embed"
	XConn *args.AWSKinesisConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.AWSKinesisWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *TunnelGroupAWSKinesisOptions) Reset()         { *m = TunnelGroupAWSKinesisOptions{} }
func (m *TunnelGroupAWSKinesisOptions) String() string { return proto.CompactTextString(m) }
func (*TunnelGroupAWSKinesisOptions) ProtoMessage()    {}
func (*TunnelGroupAWSKinesisOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ce1637d1f7d7036, []int{19}
}

func (m *TunnelGroupAWSKinesisOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TunnelGroupAWSKinesisOptions.Unmarshal(m, b)
}
func (m *TunnelGroupAWSKinesisOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TunnelGroupAWSKinesisOptions.Marshal(b, m, deterministic)
}
func (m *TunnelGroupAWSKinesisOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TunnelGroupAWSKinesisOptions.Merge(m, src)
}
func (m *TunnelGroupAWSKinesisOptions) XXX_Size() int {
	return xxx_messageInfo_TunnelGroupAWSKinesisOptions.Size(m)
}
func (m *TunnelGroupAWSKinesisOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_TunnelGroupAWSKinesisOptions.DiscardUnknown(m)
}

var xxx_messageInfo_TunnelGroupAWSKinesisOptions proto.InternalMessageInfo

func (m *TunnelGroupAWSKinesisOptions) GetXConn() *args.AWSKinesisConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *TunnelGroupAWSKinesisOptions) GetArgs() *args.AWSKinesisWriteArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

func init() {
	proto.RegisterType((*TunnelOptions)(nil), "protos.opts.TunnelOptions")
	proto.RegisterType((*TunnelGroupKafkaOptions)(nil), "protos.opts.TunnelGroupKafkaOptions")
	proto.RegisterType((*TunnelGroupActiveMQOptions)(nil), "protos.opts.TunnelGroupActiveMQOptions")
	proto.RegisterType((*TunnelGroupAWSSQSOptions)(nil), "protos.opts.TunnelGroupAWSSQSOptions")
	proto.RegisterType((*TunnelGroupAWSSNSOptions)(nil), "protos.opts.TunnelGroupAWSSNSOptions")
	proto.RegisterType((*TunnelGroupNatsOptions)(nil), "protos.opts.TunnelGroupNatsOptions")
	proto.RegisterType((*TunnelGroupNatsJetstreamOptions)(nil), "protos.opts.TunnelGroupNatsJetstreamOptions")
	proto.RegisterType((*TunnelGroupNatsStreamingOptions)(nil), "protos.opts.TunnelGroupNatsStreamingOptions")
	proto.RegisterType((*TunnelGroupNSQOptions)(nil), "protos.opts.TunnelGroupNSQOptions")
	proto.RegisterType((*TunnelGroupRabbitOptions)(nil), "protos.opts.TunnelGroupRabbitOptions")
	proto.RegisterType((*TunnelGroupRabbitStreamsOptions)(nil), "protos.opts.TunnelGroupRabbitStreamsOptions")
	proto.RegisterType((*TunnelGroupRedisPubSubOptions)(nil), "protos.opts.TunnelGroupRedisPubSubOptions")
	proto.RegisterType((*TunnelGroupRedisStreamsOptions)(nil), "protos.opts.TunnelGroupRedisStreamsOptions")
	proto.RegisterType((*TunnelGroupAzureEventHubOptions)(nil), "protos.opts.TunnelGroupAzureEventHubOptions")
	proto.RegisterType((*TunnelGroupAzureServiceBusOptions)(nil), "protos.opts.TunnelGroupAzureServiceBusOptions")
	proto.RegisterType((*TunnelGroupMQTTOptions)(nil), "protos.opts.TunnelGroupMQTTOptions")
	proto.RegisterType((*TunnelGroupGCPPubSubOptions)(nil), "protos.opts.TunnelGroupGCPPubSubOptions")
	proto.RegisterType((*TunnelGroupKubeMQQueueOptions)(nil), "protos.opts.TunnelGroupKubeMQQueueOptions")
	proto.RegisterType((*TunnelGroupPulsarOptions)(nil), "protos.opts.TunnelGroupPulsarOptions")
	proto.RegisterType((*TunnelGroupAWSKinesisOptions)(nil), "protos.opts.TunnelGroupAWSKinesisOptions")
}

func init() { proto.RegisterFile("opts/ps_opts_tunnel.proto", fileDescriptor_7ce1637d1f7d7036) }

var fileDescriptor_7ce1637d1f7d7036 = []byte{
	// 1269 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xdd, 0x4f, 0x1b, 0xc7,
	0x17, 0xd5, 0xfe, 0xc2, 0xe7, 0x18, 0x27, 0xfa, 0x8d, 0x0a, 0x0c, 0x10, 0xc0, 0x18, 0xa2, 0x92,
	0x2f, 0x3b, 0x81, 0xa4, 0x51, 0x5a, 0xb5, 0x12, 0x41, 0x15, 0x25, 0x11, 0x14, 0x6c, 0x4b, 0x91,
	0xf2, 0xb2, 0xda, 0x5d, 0x4f, 0xcc, 0x06, 0xbc, 0xbb, 0xde, 0x99, 0x05, 0x29, 0x4f, 0x95, 0x2a,
	0x55, 0xaa, 0x54, 0xa9, 0x4f, 0xfd, 0x1f, 0xdb, 0xff, 0xa0, 0x8f, 0xd5, 0xcc, 0xec, 0x2e, 0x7b,
	0xf7, 0x63, 0xec, 0xbc, 0x60, 0x3c, 0xf7, 0x9c, 0x73, 0x8f, 0xef, 0xcc, 0xbd, 0x33, 0x68, 0xc5,
	0x0f, 0x38, 0x6b, 0x07, 0xcc, 0x14, 0x9f, 0x26, 0x8f, 0x3c, 0x8f, 0x5e, 0xb5, 0x82, 0xd0, 0xe7,
	0x3e, 0xae, 0xc9, 0x0f, 0xd6, 0x12, 0x91, 0xd5, 0x35, 0x2b, 0x1c, 0x48, 0x9c, 0xf8, 0x34, 0x2d,
	0x87, 0xbb, 0xd7, 0x74, 0x38, 0x52, 0xc8, 0xd5, 0x0d, 0x18, 0xbc, 0x61, 0xe6, 0xa5, 0xeb, 0x51,
	0xe6, 0xb2, 0x38, 0xbe, 0x5a, 0x88, 0x33, 0x4f, 0x13, 0x1b, 0x25, 0xb1, 0x26, 0x8c, 0x7d, 0x8e,
	0x42, 0x6a, 0xd2, 0x6b, 0xea, 0x71, 0xf3, 0x22, 0xb2, 0x63, 0xcc, 0x4e, 0x09, 0x86, 0xd1, 0xf0,
	0xda, 0x75, 0xa8, 0x69, 0x47, 0x89, 0xd2, 0x3a, 0x40, 0x0d, 0x9c, 0xc0, 0x0c, 0x22, 0x9b, 0xa5,
	0x22, 0x04, 0x84, 0x2f, 0xad, 0x8f, 0x97, 0x56, 0x1c, 0xd9, 0x84, 0x91, 0xc8, 0xa6, 0xc3, 0x91,
	0x39, 0x8a, 0x68, 0x44, 0x63, 0xc0, 0x32, 0x00, 0x0c, 0x47, 0x9c, 0x97, 0x06, 0x3c, 0x8b, 0x27,
	0x5e, 0xb6, 0x0a, 0x01, 0xf3, 0x13, 0xe5, 0x8c, 0x87, 0xd4, 0x1a, 0x56, 0x43, 0x54, 0xdc, 0xf5,
	0x06, 0x31, 0x64, 0x09, 0x42, 0x58, 0xb2, 0x17, 0x2b, 0x60, 0x3d, 0x88, 0xae, 0x98, 0x15, 0x96,
	0x86, 0x42, 0xcb, 0xb6, 0x5d, 0x5e, 0x9a, 0x50, 0x85, 0xe2, 0x94, 0xac, 0xb4, 0x12, 0x21, 0xed,
	0xbb, 0x0c, 0x16, 0xb1, 0x51, 0x02, 0x00, 0x12, 0xcd, 0x7f, 0x17, 0x50, 0xbd, 0x27, 0x8f, 0xd8,
	0xcf, 0x01, 0x77, 0x7d, 0x8f, 0xe1, 0x35, 0x34, 0x6f, 0x05, 0xae, 0xc9, 0xfd, 0x4b, 0xea, 0x11,
	0xa3, 0x61, 0xec, 0xce, 0x77, 0xe6, 0xac, 0xc0, 0xed, 0x89, 0xef, 0x78, 0x1b, 0xd5, 0x1d, 0xdf,
	0xf3, 0xa8, 0x23, 0xb0, 0xa6, 0xdb, 0x27, 0xff, 0x93, 0x80, 0x85, 0xdb, 0xc5, 0xe3, 0x3e, 0x6e,
	0xa2, 0xba, 0x39, 0x08, 0x03, 0xc7, 0xb4, 0xfa, 0xfd, 0x90, 0x32, 0x46, 0xee, 0x48, 0x50, 0xed,
	0x28, 0x0c, 0x9c, 0x03, 0xb5, 0x84, 0x9f, 0xa3, 0x45, 0x85, 0xe1, 0xee, 0x90, 0xfa, 0x11, 0x37,
	0x19, 0x75, 0x7c, 0xaf, 0xcf, 0xc8, 0x54, 0xc3, 0xd8, 0xad, 0x77, 0xb0, 0xc0, 0xf6, 0x54, 0xa8,
	0xab, 0x22, 0x78, 0x07, 0xdd, 0x55, 0x14, 0xd7, 0x63, 0xd4, 0x89, 0x42, 0x4a, 0xa6, 0x1b, 0xc6,
	0xee, 0x5c, 0x67, 0x41, 0x60, 0x8f, 0xe3, 0x35, 0x8c, 0xd1, 0x94, 0x67, 0x0d, 0x29, 0x99, 0x91,
	0x39, 0xe5, 0xff, 0x78, 0x1d, 0xa1, 0xb8, 0x8f, 0x84, 0xe5, 0xbf, 0x67, 0xd5, 0x8f, 0x52, 0x3f,
	0xfb, 0xb8, 0x8f, 0x09, 0x9a, 0x8d, 0xdb, 0x87, 0xfc, 0x33, 0x2b, 0x25, 0x67, 0x0e, 0xe4, 0x57,
	0xfc, 0x2d, 0x9a, 0x96, 0x27, 0x8f, 0xf4, 0x1b, 0xc6, 0x6e, 0x6d, 0x6f, 0xa7, 0x95, 0xe9, 0xbf,
	0x96, 0xe2, 0x1f, 0x85, 0x7e, 0x14, 0xbc, 0x13, 0xa0, 0xb8, 0x80, 0x1d, 0x45, 0xc1, 0x87, 0x68,
	0x2e, 0xe9, 0x49, 0x42, 0x25, 0xfd, 0xeb, 0x2a, 0xba, 0xca, 0x76, 0x72, 0x9e, 0x28, 0xa4, 0x44,
	0xfc, 0x03, 0x9a, 0x8d, 0xfb, 0x8f, 0x7c, 0x94, 0x1a, 0x0f, 0x2a, 0x35, 0xde, 0x77, 0xbb, 0xe7,
	0xdd, 0x44, 0x61, 0xc6, 0xba, 0x61, 0xdd, 0x11, 0x4b, 0xf9, 0x1e, 0x23, 0x83, 0xf1, 0xfc, 0x53,
	0xc8, 0xf7, 0x18, 0x7e, 0x25, 0xaa, 0xc9, 0x19, 0xb9, 0x90, 0xe4, 0xed, 0x2a, 0xf2, 0xa9, 0xc5,
	0x59, 0x42, 0x95, 0x04, 0xdc, 0x45, 0x77, 0x61, 0x8f, 0x10, 0x57, 0x4a, 0x3c, 0xd1, 0x49, 0x74,
	0x13, 0x70, 0xa2, 0x55, 0xf7, 0xb2, 0xab, 0xf8, 0x05, 0xba, 0xe3, 0xb1, 0x11, 0xf9, 0x24, 0x95,
	0x9a, 0x95, 0x4a, 0xdd, 0xb4, 0x90, 0x02, 0x8e, 0xbf, 0x47, 0x33, 0xaa, 0x7b, 0xc8, 0xa5, 0xbe,
	0x04, 0x1d, 0x89, 0x4a, 0x4b, 0xa0, 0x48, 0xa2, 0x04, 0x62, 0x84, 0x90, 0x2b, 0x7d, 0x09, 0x4e,
	0xce, 0x7b, 0xbd, 0xb4, 0x04, 0x82, 0x80, 0x3f, 0xa0, 0xff, 0x17, 0x66, 0x1f, 0x19, 0x4a, 0x95,
	0x56, 0xe5, 0x2e, 0x08, 0x42, 0x57, 0xe1, 0xdf, 0x44, 0x69, 0x4d, 0xef, 0x59, 0x70, 0x1d, 0xf7,
	0xd0, 0xbd, 0xdc, 0xec, 0x25, 0x9e, 0xbe, 0xbe, 0x52, 0xf9, 0x47, 0x81, 0xfe, 0x29, 0xb2, 0xd3,
	0xfa, 0x5a, 0xd9, 0x55, 0x7c, 0x84, 0xd0, 0xed, 0x1c, 0x26, 0xbe, 0x14, 0xdc, 0xad, 0x12, 0x3c,
	0x3a, 0x3c, 0x3b, 0x8b, 0xec, 0xee, 0xad, 0xd8, 0xfc, 0xc0, 0x09, 0xce, 0x24, 0x15, 0x9f, 0xa0,
	0x85, 0xec, 0x5c, 0x26, 0x81, 0x94, 0x7a, 0x54, 0xd9, 0x3e, 0x91, 0x4d, 0x4f, 0xce, 0xcf, 0x05,
	0x34, 0x11, 0xab, 0x29, 0xbe, 0x5c, 0x13, 0x72, 0xd9, 0xe1, 0x46, 0x46, 0x7a, 0xb9, 0x8e, 0xc0,
	0x42, 0x6f, 0xb5, 0x30, 0x5e, 0x13, 0xee, 0xce, 0x50, 0x1d, 0x8c, 0x42, 0x12, 0x4a, 0xbd, 0xc7,
	0x5a, 0x3d, 0x75, 0x0a, 0xd3, 0x1d, 0x51, 0x86, 0xe2, 0x45, 0x71, 0xc4, 0xd4, 0x58, 0x27, 0x4c,
	0x7f, 0xc4, 0xce, 0x24, 0x2a, 0x3d, 0x62, 0x8a, 0x24, 0x9a, 0x05, 0xce, 0x77, 0xc2, 0xf5, 0x9b,
	0xa9, 0x4e, 0x6a, 0xce, 0x52, 0x3d, 0xcc, 0xae, 0xa6, 0x1d, 0x98, 0x5e, 0x64, 0x24, 0x1a, 0xdf,
	0x81, 0x6f, 0x13, 0x30, 0xe8, 0xc0, 0x74, 0x15, 0xbf, 0x45, 0xb5, 0xcc, 0x5b, 0x82, 0x5c, 0x4b,
	0xc5, 0x87, 0x9a, 0x99, 0xf2, 0x4e, 0x21, 0x13, 0x39, 0x64, 0xdd, 0xb0, 0x78, 0xa9, 0x79, 0x83,
	0x96, 0x2b, 0x46, 0x28, 0x7e, 0x8c, 0xa6, 0x4d, 0x71, 0xa5, 0xc8, 0xfb, 0xa7, 0xb6, 0xb7, 0x94,
	0x24, 0x10, 0xd7, 0x58, 0x4b, 0x22, 0x0f, 0x7d, 0xcf, 0xeb, 0x4c, 0x89, 0xbf, 0xb8, 0x8d, 0xa6,
	0xc4, 0xba, 0xbc, 0x8a, 0x6a, 0x7b, 0x6b, 0x45, 0xec, 0xfb, 0xd0, 0xe5, 0xf4, 0x20, 0x1c, 0xb0,
	0x8e, 0x04, 0x36, 0x7f, 0x31, 0xd0, 0x6a, 0xf5, 0xf4, 0xc5, 0x2d, 0x98, 0x7c, 0x05, 0x08, 0x26,
	0xe0, 0x4c, 0xfe, 0x3d, 0x90, 0x7f, 0xa3, 0x14, 0x9e, 0xb7, 0xf0, 0x19, 0x91, 0xaa, 0xd9, 0x8d,
	0x9f, 0xc0, 0xfc, 0xcb, 0x50, 0x50, 0x42, 0x33, 0xd9, 0x9f, 0x81, 0xec, 0xf7, 0x4b, 0xc0, 0xe3,
	0x73, 0x9f, 0x4e, 0x9e, 0xfb, 0xf4, 0x4b, 0x72, 0x9f, 0x16, 0x72, 0x73, 0xb4, 0x54, 0x7e, 0x6d,
	0xe0, 0x47, 0x30, 0xf3, 0x22, 0x10, 0x13, 0xc0, 0x4c, 0xde, 0x16, 0xc8, 0xbb, 0x5a, 0x80, 0xe6,
	0xb3, 0xfe, 0x69, 0xa0, 0xcd, 0x31, 0x07, 0x1d, 0xef, 0xc3, 0xfc, 0x1b, 0x05, 0xd1, 0x94, 0x91,
	0x31, 0xf2, 0x0a, 0x18, 0xd9, 0xae, 0xe6, 0x4c, 0xe0, 0x28, 0x7f, 0xf9, 0x8d, 0x77, 0x94, 0x32,
	0xbe, 0xc0, 0x51, 0xca, 0xc9, 0x3b, 0x1a, 0xa1, 0xc5, 0xd2, 0x3b, 0x14, 0x3f, 0x84, 0x36, 0xbe,
	0x82, 0x92, 0xdd, 0x6c, 0x27, 0x3c, 0x05, 0xc9, 0x57, 0xf2, 0x48, 0xfd, 0x41, 0x04, 0xb7, 0xaf,
	0xfe, 0x20, 0x2a, 0xe8, 0x84, 0x07, 0x51, 0x81, 0xc7, 0x6c, 0x40, 0xd9, 0x40, 0xd5, 0x6f, 0x00,
	0x60, 0x4c, 0xb8, 0x01, 0x80, 0x93, 0x77, 0xf4, 0xbb, 0x81, 0xd6, 0xb5, 0x97, 0x18, 0x7e, 0x0e,
	0xfd, 0xe4, 0x7e, 0xe6, 0x2d, 0x3e, 0xe3, 0xe6, 0x25, 0x70, 0xb3, 0x55, 0xc5, 0xc8, 0x7b, 0xf9,
	0xc3, 0x40, 0x1b, 0xfa, 0x0b, 0x10, 0xef, 0x41, 0x33, 0xeb, 0x45, 0xe9, 0x62, 0x6d, 0xbe, 0x01,
	0x6e, 0x9a, 0x95, 0x94, 0x31, 0x9b, 0x55, 0xf6, 0x94, 0xd1, 0x6f, 0x16, 0x60, 0x4c, 0xb8, 0x59,
	0x80, 0x93, 0x77, 0xf4, 0x97, 0x81, 0xb6, 0xc6, 0x3e, 0xdb, 0xf0, 0x4b, 0xe8, 0xa9, 0x51, 0xd4,
	0xbf, 0xe5, 0x64, 0x5c, 0xbd, 0x06, 0xae, 0x1e, 0xe8, 0x58, 0xfa, 0xf9, 0x9a, 0x79, 0x93, 0xea,
	0xe7, 0xab, 0x00, 0x4e, 0x38, 0x5f, 0x05, 0x34, 0x9f, 0xf5, 0x57, 0x03, 0xad, 0x69, 0x5e, 0x86,
	0xb8, 0x0d, 0x73, 0x43, 0xc1, 0x14, 0x9d, 0x31, 0xb0, 0x0f, 0x0c, 0x6c, 0x96, 0xe3, 0xc7, 0x34,
	0x50, 0xf1, 0x51, 0xa9, 0x6f, 0xa0, 0x0c, 0x7e, 0xc2, 0x06, 0xca, 0x30, 0xf4, 0xa3, 0x0d, 0xbc,
	0xfa, 0xf4, 0xa3, 0x4d, 0x41, 0x27, 0x1c, 0x6d, 0x0a, 0x9c, 0xcf, 0xfd, 0x9b, 0x81, 0xee, 0xeb,
	0x1e, 0x61, 0xf8, 0x19, 0x34, 0xb0, 0x96, 0xbf, 0xb7, 0x63, 0x78, 0xc6, 0xc4, 0x0b, 0x60, 0xa2,
	0x51, 0x41, 0xc8, 0x19, 0x79, 0xf3, 0xdd, 0x87, 0xd7, 0x03, 0x97, 0x5f, 0x44, 0x76, 0xcb, 0xf1,
	0x87, 0x6d, 0xdb, 0xe2, 0xce, 0x85, 0xe3, 0x87, 0x41, 0x3b, 0xb8, 0x8a, 0x86, 0x36, 0x0d, 0x9f,
	0x32, 0xe7, 0x82, 0x0e, 0x2d, 0xd6, 0xb6, 0x23, 0xf7, 0xaa, 0xdf, 0x1e, 0xf8, 0x6d, 0x25, 0xdb,
	0x16, 0xcf, 0x48, 0x7b, 0x46, 0x7e, 0xd9, 0xff, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x52, 0x9d, 0xad,
	0x5a, 0x0e, 0x13, 0x00, 0x00,
}
