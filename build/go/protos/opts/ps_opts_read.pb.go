// Code generated by protoc-gen-go. DO NOT EDIT.
// source: opts/ps_opts_read.proto

package opts

import (
	fmt "fmt"
	args "github.com/batchcorp/plumber-schemas/build/go/protos/args"
	encoding "github.com/batchcorp/plumber-schemas/build/go/protos/encoding"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ConvertOption int32

const (
	ConvertOption_CONVERT_OPTION_UNSET  ConvertOption = 0
	ConvertOption_CONVERT_OPTION_BASE64 ConvertOption = 1
	ConvertOption_CONVERT_OPTION_GZIP   ConvertOption = 2
)

var ConvertOption_name = map[int32]string{
	0: "CONVERT_OPTION_UNSET",
	1: "CONVERT_OPTION_BASE64",
	2: "CONVERT_OPTION_GZIP",
}

var ConvertOption_value = map[string]int32{
	"CONVERT_OPTION_UNSET":  0,
	"CONVERT_OPTION_BASE64": 1,
	"CONVERT_OPTION_GZIP":   2,
}

func (x ConvertOption) String() string {
	return proto.EnumName(ConvertOption_name, int32(x))
}

func (ConvertOption) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ff5a708dd529ae21, []int{0}
}

type InferSchemaOptions_Type int32

const (
	InferSchemaOptions_UNSET      InferSchemaOptions_Type = 0
	InferSchemaOptions_JSONSCHEMA InferSchemaOptions_Type = 1
)

var InferSchemaOptions_Type_name = map[int32]string{
	0: "UNSET",
	1: "JSONSCHEMA",
}

var InferSchemaOptions_Type_value = map[string]int32{
	"UNSET":      0,
	"JSONSCHEMA": 1,
}

func (x InferSchemaOptions_Type) String() string {
	return proto.EnumName(InferSchemaOptions_Type_name, int32(x))
}

func (InferSchemaOptions_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ff5a708dd529ae21, []int{25, 0}
}

type ReadCLIOptions struct {
	// @gotags: kong:"help='Display more verbose information during reads (varies by backend)'"
	VerboseOutput bool `protobuf:"varint,1,opt,name=verbose_output,json=verboseOutput,proto3" json:"verbose_output,omitempty" kong:"help='Display more verbose information during reads (varies by backend)'"`
	// @gotags: kong:"help='Pretty (colorized) output'"
	Pretty bool `protobuf:"varint,2,opt,name=pretty,proto3" json:"pretty,omitempty" kong:"help='Pretty (colorized) output'"`
	// @gotags: kong:"help='Display all output as JSON (including tabular metadata)'"
	Json                 bool     `protobuf:"varint,3,opt,name=json,proto3" json:"json,omitempty" kong:"help='Display all output as JSON (including tabular metadata)'"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadCLIOptions) Reset()         { *m = ReadCLIOptions{} }
func (m *ReadCLIOptions) String() string { return proto.CompactTextString(m) }
func (*ReadCLIOptions) ProtoMessage()    {}
func (*ReadCLIOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff5a708dd529ae21, []int{0}
}

func (m *ReadCLIOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadCLIOptions.Unmarshal(m, b)
}
func (m *ReadCLIOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadCLIOptions.Marshal(b, m, deterministic)
}
func (m *ReadCLIOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadCLIOptions.Merge(m, src)
}
func (m *ReadCLIOptions) XXX_Size() int {
	return xxx_messageInfo_ReadCLIOptions.Size(m)
}
func (m *ReadCLIOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadCLIOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ReadCLIOptions proto.InternalMessageInfo

func (m *ReadCLIOptions) GetVerboseOutput() bool {
	if m != nil {
		return m.VerboseOutput
	}
	return false
}

func (m *ReadCLIOptions) GetPretty() bool {
	if m != nil {
		return m.Pretty
	}
	return false
}

func (m *ReadCLIOptions) GetJson() bool {
	if m != nil {
		return m.Json
	}
	return false
}

type ReadSampleOptions struct {
	// @gotags: kong:"help='How many events to fetch during a sample interval',default=100"
	SampleRate uint32 `protobuf:"varint,1,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty" kong:"help='How many events to fetch during a sample interval',default=100"`
	// @gotags: kong:"help='Sample interval seconds',enum:'1,60',default=60"
	SampleIntervalSeconds uint32   `protobuf:"varint,2,opt,name=sample_interval_seconds,json=sampleIntervalSeconds,proto3" json:"sample_interval_seconds,omitempty" kong:"help='Sample interval seconds',enum:'1,60',default=60"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *ReadSampleOptions) Reset()         { *m = ReadSampleOptions{} }
func (m *ReadSampleOptions) String() string { return proto.CompactTextString(m) }
func (*ReadSampleOptions) ProtoMessage()    {}
func (*ReadSampleOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff5a708dd529ae21, []int{1}
}

func (m *ReadSampleOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadSampleOptions.Unmarshal(m, b)
}
func (m *ReadSampleOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadSampleOptions.Marshal(b, m, deterministic)
}
func (m *ReadSampleOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadSampleOptions.Merge(m, src)
}
func (m *ReadSampleOptions) XXX_Size() int {
	return xxx_messageInfo_ReadSampleOptions.Size(m)
}
func (m *ReadSampleOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadSampleOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ReadSampleOptions proto.InternalMessageInfo

func (m *ReadSampleOptions) GetSampleRate() uint32 {
	if m != nil {
		return m.SampleRate
	}
	return 0
}

func (m *ReadSampleOptions) GetSampleIntervalSeconds() uint32 {
	if m != nil {
		return m.SampleIntervalSeconds
	}
	return 0
}

type ReadFilterOptions struct {
	// @gotags: kong:"-"
	Query                string   `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty" kong:"-"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadFilterOptions) Reset()         { *m = ReadFilterOptions{} }
func (m *ReadFilterOptions) String() string { return proto.CompactTextString(m) }
func (*ReadFilterOptions) ProtoMessage()    {}
func (*ReadFilterOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff5a708dd529ae21, []int{2}
}

func (m *ReadFilterOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadFilterOptions.Unmarshal(m, b)
}
func (m *ReadFilterOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadFilterOptions.Marshal(b, m, deterministic)
}
func (m *ReadFilterOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadFilterOptions.Merge(m, src)
}
func (m *ReadFilterOptions) XXX_Size() int {
	return xxx_messageInfo_ReadFilterOptions.Size(m)
}
func (m *ReadFilterOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadFilterOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ReadFilterOptions proto.InternalMessageInfo

func (m *ReadFilterOptions) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

// Relay is the structure that backends accept for facilitating a relay.
type CLIReadOptions struct {
	// Required; friendly name for the read
	// @gotags: kong:"-"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" kong:"-"`
	// Required for desktop; ignored in CLI.
	// @gotags: kong:"-"
	ConnectionId string `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty" kong:"-"`
	// Required; specify if a read is continuous or not (default: false)
	// @gotags: kong:"help='Follow/read continuously',short=f"
	Continuous bool `protobuf:"varint,3,opt,name=continuous,proto3" json:"continuous,omitempty" kong:"help='Follow/read continuously',short=f"`
	// Optional; specify if reading should utilize sampling
	// @gotags: kong:"embed,group=sampling"
	SampleOptions *ReadSampleOptions `protobuf:"bytes,4,opt,name=sample_options,json=sampleOptions,proto3" json:"sample_options,omitempty" kong:"embed,group=sampling"`
	// Optional; decode_options specify how to decode the _value_ in a message.
	// If left unset, plumber will still populate records.ReadRecord.Decoded
	// with the (untouched) value.
	// @gotags: kong:"embed,group=decode"
	DecodeOptions *encoding.DecodeOptions `protobuf:"bytes,5,opt,name=decode_options,json=decodeOptions,proto3" json:"decode_options,omitempty" kong:"embed,group=decode"`
	// @gotags: kong:"help='Convert output before it is printed to STDOUT (options: unset; base64; gzip)',type=pbenum,pbenum_strip_prefix=CONVERT_OPTION_,pbenum_lowercase,default=unset"
	ConvertOutput ConvertOption `protobuf:"varint,6,opt,name=convert_output,json=convertOutput,proto3,enum=protos.opts.ConvertOption" json:"convert_output,omitempty" kong:"help='Convert output before it is printed to STDOUT (options: unset; base64; gzip)',type=pbenum,pbenum_strip_prefix=CONVERT_OPTION_,pbenum_lowercase,default=unset"`
	// @gotags: kong:"-"
	Filter *ReadFilterOptions `protobuf:"bytes,7,opt,name=filter,proto3" json:"filter,omitempty" kong:"-"`
	// Whether to infer a JSON schema from this read. Ignored if schema_id is populated. Desktop use only
	// @gotags: kong:"-"
	InferSchemaOptions *InferSchemaOptions `protobuf:"bytes,8,opt,name=infer_schema_options,json=inferSchemaOptions,proto3" json:"infer_schema_options,omitempty" kong:"-"`
	// Automatically set by plumber when a new read is created
	// @gotags: kong:"-"
	XId string `protobuf:"bytes,1000,opt,name=_id,json=Id,proto3" json:"_id,omitempty" kong:"-"`
	// Used by plumber to set read state
	// @gotags: kong:"-"
	XActive bool `protobuf:"varint,1001,opt,name=_active,json=Active,proto3" json:"_active,omitempty" kong:"-"`
	// Contains options/fields specific to the CLI
	// @gotags: kong:"embed"
	XCliOptions *ReadCLIOptions `protobuf:"bytes,1002,opt,name=_cli_options,json=CliOptions,proto3" json:"_cli_options,omitempty" kong:"embed"`
	// @gotags: kong:"cmd,help='Apache Kafka'"
	Kafka *ReadGroupKafkaOptions `protobuf:"bytes,100,opt,name=kafka,proto3" json:"kafka,omitempty" kong:"cmd,help='Apache Kafka'"`
	// @gotags: kong:"cmd,help='Apache ActiveMQ (STOMP)'"
	Activemq *ReadGroupActiveMQOptions `protobuf:"bytes,101,opt,name=activemq,proto3" json:"activemq,omitempty" kong:"cmd,help='Apache ActiveMQ (STOMP)'"`
	// @gotags: kong:"cmd,help='AWS Simple Queue System'"
	AwsSqs *ReadGroupAWSSQSOptions `protobuf:"bytes,102,opt,name=aws_sqs,json=awsSqs,proto3" json:"aws_sqs,omitempty" kong:"cmd,help='AWS Simple Queue System'"`
	// @gotags: kong:"cmd,help='MongoDB'"
	Mongo *ReadGroupMongoOptions `protobuf:"bytes,103,opt,name=mongo,proto3" json:"mongo,omitempty" kong:"cmd,help='MongoDB'"`
	// @gotags: kong:"cmd,help='NATS'"
	Nats *ReadGroupNatsOptions `protobuf:"bytes,104,opt,name=nats,proto3" json:"nats,omitempty" kong:"cmd,help='NATS'"`
	// @gotags: kong:"cmd,help='NATS Streaming'"
	NatsStreaming *ReadGroupNatsStreamingOptions `protobuf:"bytes,105,opt,name=nats_streaming,json=natsStreaming,proto3" json:"nats_streaming,omitempty" kong:"cmd,help='NATS Streaming'"`
	// @gotags: kong:"cmd,help='NSQ'"
	Nsq *ReadGroupNSQOptions `protobuf:"bytes,106,opt,name=nsq,proto3" json:"nsq,omitempty" kong:"cmd,help='NSQ'"`
	// @gotags: kong:"cmd,help='Apache Pulsar'"
	Pulsar *ReadGroupPulsarOptions `protobuf:"bytes,107,opt,name=pulsar,proto3" json:"pulsar,omitempty" kong:"cmd,help='Apache Pulsar'"`
	// @gotags: kong:"cmd,help='RabbitMQ'"
	Rabbit *ReadGroupRabbitOptions `protobuf:"bytes,108,opt,name=rabbit,proto3" json:"rabbit,omitempty" kong:"cmd,help='RabbitMQ'"`
	// @gotags: kong:"cmd,help='RabbitMQ Streams'"
	RabbitStreams *ReadGroupRabbitStreamsOptions `protobuf:"bytes,109,opt,name=rabbit_streams,json=rabbitStreams,proto3" json:"rabbit_streams,omitempty" kong:"cmd,help='RabbitMQ Streams'"`
	// @gotags: kong:"cmd,help='MQTT'"
	Mqtt *ReadGroupMQTTOptions `protobuf:"bytes,110,opt,name=mqtt,proto3" json:"mqtt,omitempty" kong:"cmd,help='MQTT'"`
	// @gotags: kong:"cmd,help='Azure Service Bus'"
	AzureServiceBus *ReadGroupAzureServiceBusOptions `protobuf:"bytes,111,opt,name=azure_service_bus,json=azureServiceBus,proto3" json:"azure_service_bus,omitempty" kong:"cmd,help='Azure Service Bus'"`
	// @gotags: kong:"cmd,help='Azure Event Hub'"
	AzureEventHub *ReadGroupAzureEventHubOptions `protobuf:"bytes,112,opt,name=azure_event_hub,json=azureEventHub,proto3" json:"azure_event_hub,omitempty" kong:"cmd,help='Azure Event Hub'"`
	// @gotags: kong:"cmd,help='Google Cloud Platform Pub/Sub'"
	GcpPubsub *ReadGroupGCPPubSubOptions `protobuf:"bytes,113,opt,name=gcp_pubsub,json=gcpPubsub,proto3" json:"gcp_pubsub,omitempty" kong:"cmd,help='Google Cloud Platform Pub/Sub'"`
	// @gotags: kong:"cmd,help='KubeMQ Queue'"
	KubemqQueue *ReadGroupKubeMQQueueOptions `protobuf:"bytes,114,opt,name=kubemq_queue,json=kubemqQueue,proto3" json:"kubemq_queue,omitempty" kong:"cmd,help='KubeMQ Queue'"`
	// @gotags: kong:"cmd,help='Redis PubSub'"
	RedisPubsub *ReadGroupRedisPubSubOptions `protobuf:"bytes,115,opt,name=redis_pubsub,json=redisPubsub,proto3" json:"redis_pubsub,omitempty" kong:"cmd,help='Redis PubSub'"`
	// @gotags: kong:"cmd,help='Redis Streams'"
	RedisStreams *ReadGroupRedisStreamsOptions `protobuf:"bytes,116,opt,name=redis_streams,json=redisStreams,proto3" json:"redis_streams,omitempty" kong:"cmd,help='Redis Streams'"`
	// @gotags: kong:"cmd,help='PostgreSQL'"
	Postgres *ReadGroupPostgresOptions `protobuf:"bytes,117,opt,name=postgres,proto3" json:"postgres,omitempty" kong:"cmd,help='PostgreSQL'"`
	// @gotags: kong:"cmd,help='NATS Jetstream'"
	NatsJetstream *ReadGroupNatsJetstreamOptions `protobuf:"bytes,118,opt,name=nats_jetstream,json=natsJetstream,proto3" json:"nats_jetstream,omitempty" kong:"cmd,help='NATS Jetstream'"`
	// @gotags: kong:"cmd,help='AWS Kinesis Streams'"
	AwsKinesis *ReadGroupAWSKinesisOptions `protobuf:"bytes,119,opt,name=aws_kinesis,json=awsKinesis,proto3" json:"aws_kinesis,omitempty" kong:"cmd,help='AWS Kinesis Streams'"`
	// @gotags: kong:"cmd,help='Memphis'"
	Memphis              *ReadGroupMemphisOptions `protobuf:"bytes,120,opt,name=memphis,proto3" json:"memphis,omitempty" kong:"cmd,help='Memphis'"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *CLIReadOptions) Reset()         { *m = CLIReadOptions{} }
func (m *CLIReadOptions) String() string { return proto.CompactTextString(m) }
func (*CLIReadOptions) ProtoMessage()    {}
func (*CLIReadOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff5a708dd529ae21, []int{3}
}

func (m *CLIReadOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLIReadOptions.Unmarshal(m, b)
}
func (m *CLIReadOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLIReadOptions.Marshal(b, m, deterministic)
}
func (m *CLIReadOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLIReadOptions.Merge(m, src)
}
func (m *CLIReadOptions) XXX_Size() int {
	return xxx_messageInfo_CLIReadOptions.Size(m)
}
func (m *CLIReadOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_CLIReadOptions.DiscardUnknown(m)
}

var xxx_messageInfo_CLIReadOptions proto.InternalMessageInfo

func (m *CLIReadOptions) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CLIReadOptions) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func (m *CLIReadOptions) GetContinuous() bool {
	if m != nil {
		return m.Continuous
	}
	return false
}

func (m *CLIReadOptions) GetSampleOptions() *ReadSampleOptions {
	if m != nil {
		return m.SampleOptions
	}
	return nil
}

func (m *CLIReadOptions) GetDecodeOptions() *encoding.DecodeOptions {
	if m != nil {
		return m.DecodeOptions
	}
	return nil
}

func (m *CLIReadOptions) GetConvertOutput() ConvertOption {
	if m != nil {
		return m.ConvertOutput
	}
	return ConvertOption_CONVERT_OPTION_UNSET
}

func (m *CLIReadOptions) GetFilter() *ReadFilterOptions {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *CLIReadOptions) GetInferSchemaOptions() *InferSchemaOptions {
	if m != nil {
		return m.InferSchemaOptions
	}
	return nil
}

func (m *CLIReadOptions) GetXId() string {
	if m != nil {
		return m.XId
	}
	return ""
}

func (m *CLIReadOptions) GetXActive() bool {
	if m != nil {
		return m.XActive
	}
	return false
}

func (m *CLIReadOptions) GetXCliOptions() *ReadCLIOptions {
	if m != nil {
		return m.XCliOptions
	}
	return nil
}

func (m *CLIReadOptions) GetKafka() *ReadGroupKafkaOptions {
	if m != nil {
		return m.Kafka
	}
	return nil
}

func (m *CLIReadOptions) GetActivemq() *ReadGroupActiveMQOptions {
	if m != nil {
		return m.Activemq
	}
	return nil
}

func (m *CLIReadOptions) GetAwsSqs() *ReadGroupAWSSQSOptions {
	if m != nil {
		return m.AwsSqs
	}
	return nil
}

func (m *CLIReadOptions) GetMongo() *ReadGroupMongoOptions {
	if m != nil {
		return m.Mongo
	}
	return nil
}

func (m *CLIReadOptions) GetNats() *ReadGroupNatsOptions {
	if m != nil {
		return m.Nats
	}
	return nil
}

func (m *CLIReadOptions) GetNatsStreaming() *ReadGroupNatsStreamingOptions {
	if m != nil {
		return m.NatsStreaming
	}
	return nil
}

func (m *CLIReadOptions) GetNsq() *ReadGroupNSQOptions {
	if m != nil {
		return m.Nsq
	}
	return nil
}

func (m *CLIReadOptions) GetPulsar() *ReadGroupPulsarOptions {
	if m != nil {
		return m.Pulsar
	}
	return nil
}

func (m *CLIReadOptions) GetRabbit() *ReadGroupRabbitOptions {
	if m != nil {
		return m.Rabbit
	}
	return nil
}

func (m *CLIReadOptions) GetRabbitStreams() *ReadGroupRabbitStreamsOptions {
	if m != nil {
		return m.RabbitStreams
	}
	return nil
}

func (m *CLIReadOptions) GetMqtt() *ReadGroupMQTTOptions {
	if m != nil {
		return m.Mqtt
	}
	return nil
}

func (m *CLIReadOptions) GetAzureServiceBus() *ReadGroupAzureServiceBusOptions {
	if m != nil {
		return m.AzureServiceBus
	}
	return nil
}

func (m *CLIReadOptions) GetAzureEventHub() *ReadGroupAzureEventHubOptions {
	if m != nil {
		return m.AzureEventHub
	}
	return nil
}

func (m *CLIReadOptions) GetGcpPubsub() *ReadGroupGCPPubSubOptions {
	if m != nil {
		return m.GcpPubsub
	}
	return nil
}

func (m *CLIReadOptions) GetKubemqQueue() *ReadGroupKubeMQQueueOptions {
	if m != nil {
		return m.KubemqQueue
	}
	return nil
}

func (m *CLIReadOptions) GetRedisPubsub() *ReadGroupRedisPubSubOptions {
	if m != nil {
		return m.RedisPubsub
	}
	return nil
}

func (m *CLIReadOptions) GetRedisStreams() *ReadGroupRedisStreamsOptions {
	if m != nil {
		return m.RedisStreams
	}
	return nil
}

func (m *CLIReadOptions) GetPostgres() *ReadGroupPostgresOptions {
	if m != nil {
		return m.Postgres
	}
	return nil
}

func (m *CLIReadOptions) GetNatsJetstream() *ReadGroupNatsJetstreamOptions {
	if m != nil {
		return m.NatsJetstream
	}
	return nil
}

func (m *CLIReadOptions) GetAwsKinesis() *ReadGroupAWSKinesisOptions {
	if m != nil {
		return m.AwsKinesis
	}
	return nil
}

func (m *CLIReadOptions) GetMemphis() *ReadGroupMemphisOptions {
	if m != nil {
		return m.Memphis
	}
	return nil
}

type ReadGroupKafkaOptions struct {
	// @gotags: kong:"embed"
	XConn *args.KafkaConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.KafkaReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ReadGroupKafkaOptions) Reset()         { *m = ReadGroupKafkaOptions{} }
func (m *ReadGroupKafkaOptions) String() string { return proto.CompactTextString(m) }
func (*ReadGroupKafkaOptions) ProtoMessage()    {}
func (*ReadGroupKafkaOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff5a708dd529ae21, []int{4}
}

func (m *ReadGroupKafkaOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadGroupKafkaOptions.Unmarshal(m, b)
}
func (m *ReadGroupKafkaOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadGroupKafkaOptions.Marshal(b, m, deterministic)
}
func (m *ReadGroupKafkaOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadGroupKafkaOptions.Merge(m, src)
}
func (m *ReadGroupKafkaOptions) XXX_Size() int {
	return xxx_messageInfo_ReadGroupKafkaOptions.Size(m)
}
func (m *ReadGroupKafkaOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadGroupKafkaOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ReadGroupKafkaOptions proto.InternalMessageInfo

func (m *ReadGroupKafkaOptions) GetXConn() *args.KafkaConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *ReadGroupKafkaOptions) GetArgs() *args.KafkaReadArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type ReadGroupActiveMQOptions struct {
	// @gotags: kong:"embed"
	XConn *args.ActiveMQConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.ActiveMQReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ReadGroupActiveMQOptions) Reset()         { *m = ReadGroupActiveMQOptions{} }
func (m *ReadGroupActiveMQOptions) String() string { return proto.CompactTextString(m) }
func (*ReadGroupActiveMQOptions) ProtoMessage()    {}
func (*ReadGroupActiveMQOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff5a708dd529ae21, []int{5}
}

func (m *ReadGroupActiveMQOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadGroupActiveMQOptions.Unmarshal(m, b)
}
func (m *ReadGroupActiveMQOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadGroupActiveMQOptions.Marshal(b, m, deterministic)
}
func (m *ReadGroupActiveMQOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadGroupActiveMQOptions.Merge(m, src)
}
func (m *ReadGroupActiveMQOptions) XXX_Size() int {
	return xxx_messageInfo_ReadGroupActiveMQOptions.Size(m)
}
func (m *ReadGroupActiveMQOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadGroupActiveMQOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ReadGroupActiveMQOptions proto.InternalMessageInfo

func (m *ReadGroupActiveMQOptions) GetXConn() *args.ActiveMQConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *ReadGroupActiveMQOptions) GetArgs() *args.ActiveMQReadArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type ReadGroupAWSSQSOptions struct {
	// @gotags: kong:"embed"
	XConn *args.AWSSQSConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.AWSSQSReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ReadGroupAWSSQSOptions) Reset()         { *m = ReadGroupAWSSQSOptions{} }
func (m *ReadGroupAWSSQSOptions) String() string { return proto.CompactTextString(m) }
func (*ReadGroupAWSSQSOptions) ProtoMessage()    {}
func (*ReadGroupAWSSQSOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff5a708dd529ae21, []int{6}
}

func (m *ReadGroupAWSSQSOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadGroupAWSSQSOptions.Unmarshal(m, b)
}
func (m *ReadGroupAWSSQSOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadGroupAWSSQSOptions.Marshal(b, m, deterministic)
}
func (m *ReadGroupAWSSQSOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadGroupAWSSQSOptions.Merge(m, src)
}
func (m *ReadGroupAWSSQSOptions) XXX_Size() int {
	return xxx_messageInfo_ReadGroupAWSSQSOptions.Size(m)
}
func (m *ReadGroupAWSSQSOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadGroupAWSSQSOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ReadGroupAWSSQSOptions proto.InternalMessageInfo

func (m *ReadGroupAWSSQSOptions) GetXConn() *args.AWSSQSConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *ReadGroupAWSSQSOptions) GetArgs() *args.AWSSQSReadArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type ReadGroupMongoOptions struct {
	// @gotags: kong:"embed"
	XConn *args.MongoConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.MongoReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ReadGroupMongoOptions) Reset()         { *m = ReadGroupMongoOptions{} }
func (m *ReadGroupMongoOptions) String() string { return proto.CompactTextString(m) }
func (*ReadGroupMongoOptions) ProtoMessage()    {}
func (*ReadGroupMongoOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff5a708dd529ae21, []int{7}
}

func (m *ReadGroupMongoOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadGroupMongoOptions.Unmarshal(m, b)
}
func (m *ReadGroupMongoOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadGroupMongoOptions.Marshal(b, m, deterministic)
}
func (m *ReadGroupMongoOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadGroupMongoOptions.Merge(m, src)
}
func (m *ReadGroupMongoOptions) XXX_Size() int {
	return xxx_messageInfo_ReadGroupMongoOptions.Size(m)
}
func (m *ReadGroupMongoOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadGroupMongoOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ReadGroupMongoOptions proto.InternalMessageInfo

func (m *ReadGroupMongoOptions) GetXConn() *args.MongoConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *ReadGroupMongoOptions) GetArgs() *args.MongoReadArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type ReadGroupNatsOptions struct {
	// @gotags: kong:"embed"
	XConn *args.NatsConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.NatsReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ReadGroupNatsOptions) Reset()         { *m = ReadGroupNatsOptions{} }
func (m *ReadGroupNatsOptions) String() string { return proto.CompactTextString(m) }
func (*ReadGroupNatsOptions) ProtoMessage()    {}
func (*ReadGroupNatsOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff5a708dd529ae21, []int{8}
}

func (m *ReadGroupNatsOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadGroupNatsOptions.Unmarshal(m, b)
}
func (m *ReadGroupNatsOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadGroupNatsOptions.Marshal(b, m, deterministic)
}
func (m *ReadGroupNatsOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadGroupNatsOptions.Merge(m, src)
}
func (m *ReadGroupNatsOptions) XXX_Size() int {
	return xxx_messageInfo_ReadGroupNatsOptions.Size(m)
}
func (m *ReadGroupNatsOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadGroupNatsOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ReadGroupNatsOptions proto.InternalMessageInfo

func (m *ReadGroupNatsOptions) GetXConn() *args.NatsConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *ReadGroupNatsOptions) GetArgs() *args.NatsReadArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type ReadGroupNatsStreamingOptions struct {
	// @gotags: kong:"embed"
	XConn *args.NatsStreamingConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.NatsStreamingReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ReadGroupNatsStreamingOptions) Reset()         { *m = ReadGroupNatsStreamingOptions{} }
func (m *ReadGroupNatsStreamingOptions) String() string { return proto.CompactTextString(m) }
func (*ReadGroupNatsStreamingOptions) ProtoMessage()    {}
func (*ReadGroupNatsStreamingOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff5a708dd529ae21, []int{9}
}

func (m *ReadGroupNatsStreamingOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadGroupNatsStreamingOptions.Unmarshal(m, b)
}
func (m *ReadGroupNatsStreamingOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadGroupNatsStreamingOptions.Marshal(b, m, deterministic)
}
func (m *ReadGroupNatsStreamingOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadGroupNatsStreamingOptions.Merge(m, src)
}
func (m *ReadGroupNatsStreamingOptions) XXX_Size() int {
	return xxx_messageInfo_ReadGroupNatsStreamingOptions.Size(m)
}
func (m *ReadGroupNatsStreamingOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadGroupNatsStreamingOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ReadGroupNatsStreamingOptions proto.InternalMessageInfo

func (m *ReadGroupNatsStreamingOptions) GetXConn() *args.NatsStreamingConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *ReadGroupNatsStreamingOptions) GetArgs() *args.NatsStreamingReadArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type ReadGroupNatsJetstreamOptions struct {
	// @gotags: kong:"embed"
	XConn *args.NatsJetstreamConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.NatsJetstreamReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ReadGroupNatsJetstreamOptions) Reset()         { *m = ReadGroupNatsJetstreamOptions{} }
func (m *ReadGroupNatsJetstreamOptions) String() string { return proto.CompactTextString(m) }
func (*ReadGroupNatsJetstreamOptions) ProtoMessage()    {}
func (*ReadGroupNatsJetstreamOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff5a708dd529ae21, []int{10}
}

func (m *ReadGroupNatsJetstreamOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadGroupNatsJetstreamOptions.Unmarshal(m, b)
}
func (m *ReadGroupNatsJetstreamOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadGroupNatsJetstreamOptions.Marshal(b, m, deterministic)
}
func (m *ReadGroupNatsJetstreamOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadGroupNatsJetstreamOptions.Merge(m, src)
}
func (m *ReadGroupNatsJetstreamOptions) XXX_Size() int {
	return xxx_messageInfo_ReadGroupNatsJetstreamOptions.Size(m)
}
func (m *ReadGroupNatsJetstreamOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadGroupNatsJetstreamOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ReadGroupNatsJetstreamOptions proto.InternalMessageInfo

func (m *ReadGroupNatsJetstreamOptions) GetXConn() *args.NatsJetstreamConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *ReadGroupNatsJetstreamOptions) GetArgs() *args.NatsJetstreamReadArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type ReadGroupNSQOptions struct {
	// @gotags: kong:"embed"
	XConn *args.NSQConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.NSQReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ReadGroupNSQOptions) Reset()         { *m = ReadGroupNSQOptions{} }
func (m *ReadGroupNSQOptions) String() string { return proto.CompactTextString(m) }
func (*ReadGroupNSQOptions) ProtoMessage()    {}
func (*ReadGroupNSQOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff5a708dd529ae21, []int{11}
}

func (m *ReadGroupNSQOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadGroupNSQOptions.Unmarshal(m, b)
}
func (m *ReadGroupNSQOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadGroupNSQOptions.Marshal(b, m, deterministic)
}
func (m *ReadGroupNSQOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadGroupNSQOptions.Merge(m, src)
}
func (m *ReadGroupNSQOptions) XXX_Size() int {
	return xxx_messageInfo_ReadGroupNSQOptions.Size(m)
}
func (m *ReadGroupNSQOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadGroupNSQOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ReadGroupNSQOptions proto.InternalMessageInfo

func (m *ReadGroupNSQOptions) GetXConn() *args.NSQConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *ReadGroupNSQOptions) GetArgs() *args.NSQReadArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type ReadGroupPostgresOptions struct {
	// @gotags: kong:"embed"
	XConn *args.PostgresConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.PostgresReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ReadGroupPostgresOptions) Reset()         { *m = ReadGroupPostgresOptions{} }
func (m *ReadGroupPostgresOptions) String() string { return proto.CompactTextString(m) }
func (*ReadGroupPostgresOptions) ProtoMessage()    {}
func (*ReadGroupPostgresOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff5a708dd529ae21, []int{12}
}

func (m *ReadGroupPostgresOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadGroupPostgresOptions.Unmarshal(m, b)
}
func (m *ReadGroupPostgresOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadGroupPostgresOptions.Marshal(b, m, deterministic)
}
func (m *ReadGroupPostgresOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadGroupPostgresOptions.Merge(m, src)
}
func (m *ReadGroupPostgresOptions) XXX_Size() int {
	return xxx_messageInfo_ReadGroupPostgresOptions.Size(m)
}
func (m *ReadGroupPostgresOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadGroupPostgresOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ReadGroupPostgresOptions proto.InternalMessageInfo

func (m *ReadGroupPostgresOptions) GetXConn() *args.PostgresConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *ReadGroupPostgresOptions) GetArgs() *args.PostgresReadArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type ReadGroupPulsarOptions struct {
	// @gotags: kong:"embed"
	XConn *args.PulsarConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.PulsarReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ReadGroupPulsarOptions) Reset()         { *m = ReadGroupPulsarOptions{} }
func (m *ReadGroupPulsarOptions) String() string { return proto.CompactTextString(m) }
func (*ReadGroupPulsarOptions) ProtoMessage()    {}
func (*ReadGroupPulsarOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff5a708dd529ae21, []int{13}
}

func (m *ReadGroupPulsarOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadGroupPulsarOptions.Unmarshal(m, b)
}
func (m *ReadGroupPulsarOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadGroupPulsarOptions.Marshal(b, m, deterministic)
}
func (m *ReadGroupPulsarOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadGroupPulsarOptions.Merge(m, src)
}
func (m *ReadGroupPulsarOptions) XXX_Size() int {
	return xxx_messageInfo_ReadGroupPulsarOptions.Size(m)
}
func (m *ReadGroupPulsarOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadGroupPulsarOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ReadGroupPulsarOptions proto.InternalMessageInfo

func (m *ReadGroupPulsarOptions) GetXConn() *args.PulsarConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *ReadGroupPulsarOptions) GetArgs() *args.PulsarReadArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type ReadGroupRabbitOptions struct {
	// @gotags: kong:"embed"
	XConn *args.RabbitConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.RabbitReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ReadGroupRabbitOptions) Reset()         { *m = ReadGroupRabbitOptions{} }
func (m *ReadGroupRabbitOptions) String() string { return proto.CompactTextString(m) }
func (*ReadGroupRabbitOptions) ProtoMessage()    {}
func (*ReadGroupRabbitOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff5a708dd529ae21, []int{14}
}

func (m *ReadGroupRabbitOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadGroupRabbitOptions.Unmarshal(m, b)
}
func (m *ReadGroupRabbitOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadGroupRabbitOptions.Marshal(b, m, deterministic)
}
func (m *ReadGroupRabbitOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadGroupRabbitOptions.Merge(m, src)
}
func (m *ReadGroupRabbitOptions) XXX_Size() int {
	return xxx_messageInfo_ReadGroupRabbitOptions.Size(m)
}
func (m *ReadGroupRabbitOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadGroupRabbitOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ReadGroupRabbitOptions proto.InternalMessageInfo

func (m *ReadGroupRabbitOptions) GetXConn() *args.RabbitConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *ReadGroupRabbitOptions) GetArgs() *args.RabbitReadArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type ReadGroupRabbitStreamsOptions struct {
	// @gotags: kong:"embed"
	XConn *args.RabbitStreamsConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.RabbitStreamsReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ReadGroupRabbitStreamsOptions) Reset()         { *m = ReadGroupRabbitStreamsOptions{} }
func (m *ReadGroupRabbitStreamsOptions) String() string { return proto.CompactTextString(m) }
func (*ReadGroupRabbitStreamsOptions) ProtoMessage()    {}
func (*ReadGroupRabbitStreamsOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff5a708dd529ae21, []int{15}
}

func (m *ReadGroupRabbitStreamsOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadGroupRabbitStreamsOptions.Unmarshal(m, b)
}
func (m *ReadGroupRabbitStreamsOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadGroupRabbitStreamsOptions.Marshal(b, m, deterministic)
}
func (m *ReadGroupRabbitStreamsOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadGroupRabbitStreamsOptions.Merge(m, src)
}
func (m *ReadGroupRabbitStreamsOptions) XXX_Size() int {
	return xxx_messageInfo_ReadGroupRabbitStreamsOptions.Size(m)
}
func (m *ReadGroupRabbitStreamsOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadGroupRabbitStreamsOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ReadGroupRabbitStreamsOptions proto.InternalMessageInfo

func (m *ReadGroupRabbitStreamsOptions) GetXConn() *args.RabbitStreamsConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *ReadGroupRabbitStreamsOptions) GetArgs() *args.RabbitStreamsReadArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type ReadGroupRedisPubSubOptions struct {
	// @gotags: kong:"embed"
	XConn *args.RedisPubSubConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.RedisPubSubReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ReadGroupRedisPubSubOptions) Reset()         { *m = ReadGroupRedisPubSubOptions{} }
func (m *ReadGroupRedisPubSubOptions) String() string { return proto.CompactTextString(m) }
func (*ReadGroupRedisPubSubOptions) ProtoMessage()    {}
func (*ReadGroupRedisPubSubOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff5a708dd529ae21, []int{16}
}

func (m *ReadGroupRedisPubSubOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadGroupRedisPubSubOptions.Unmarshal(m, b)
}
func (m *ReadGroupRedisPubSubOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadGroupRedisPubSubOptions.Marshal(b, m, deterministic)
}
func (m *ReadGroupRedisPubSubOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadGroupRedisPubSubOptions.Merge(m, src)
}
func (m *ReadGroupRedisPubSubOptions) XXX_Size() int {
	return xxx_messageInfo_ReadGroupRedisPubSubOptions.Size(m)
}
func (m *ReadGroupRedisPubSubOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadGroupRedisPubSubOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ReadGroupRedisPubSubOptions proto.InternalMessageInfo

func (m *ReadGroupRedisPubSubOptions) GetXConn() *args.RedisPubSubConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *ReadGroupRedisPubSubOptions) GetArgs() *args.RedisPubSubReadArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type ReadGroupRedisStreamsOptions struct {
	// @gotags: kong:"embed"
	XConn *args.RedisStreamsConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.RedisStreamsReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ReadGroupRedisStreamsOptions) Reset()         { *m = ReadGroupRedisStreamsOptions{} }
func (m *ReadGroupRedisStreamsOptions) String() string { return proto.CompactTextString(m) }
func (*ReadGroupRedisStreamsOptions) ProtoMessage()    {}
func (*ReadGroupRedisStreamsOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff5a708dd529ae21, []int{17}
}

func (m *ReadGroupRedisStreamsOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadGroupRedisStreamsOptions.Unmarshal(m, b)
}
func (m *ReadGroupRedisStreamsOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadGroupRedisStreamsOptions.Marshal(b, m, deterministic)
}
func (m *ReadGroupRedisStreamsOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadGroupRedisStreamsOptions.Merge(m, src)
}
func (m *ReadGroupRedisStreamsOptions) XXX_Size() int {
	return xxx_messageInfo_ReadGroupRedisStreamsOptions.Size(m)
}
func (m *ReadGroupRedisStreamsOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadGroupRedisStreamsOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ReadGroupRedisStreamsOptions proto.InternalMessageInfo

func (m *ReadGroupRedisStreamsOptions) GetXConn() *args.RedisStreamsConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *ReadGroupRedisStreamsOptions) GetArgs() *args.RedisStreamsReadArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type ReadGroupAzureEventHubOptions struct {
	// @gotags: kong:"embed"
	XConn *args.AzureEventHubConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.AzureEventHubReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ReadGroupAzureEventHubOptions) Reset()         { *m = ReadGroupAzureEventHubOptions{} }
func (m *ReadGroupAzureEventHubOptions) String() string { return proto.CompactTextString(m) }
func (*ReadGroupAzureEventHubOptions) ProtoMessage()    {}
func (*ReadGroupAzureEventHubOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff5a708dd529ae21, []int{18}
}

func (m *ReadGroupAzureEventHubOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadGroupAzureEventHubOptions.Unmarshal(m, b)
}
func (m *ReadGroupAzureEventHubOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadGroupAzureEventHubOptions.Marshal(b, m, deterministic)
}
func (m *ReadGroupAzureEventHubOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadGroupAzureEventHubOptions.Merge(m, src)
}
func (m *ReadGroupAzureEventHubOptions) XXX_Size() int {
	return xxx_messageInfo_ReadGroupAzureEventHubOptions.Size(m)
}
func (m *ReadGroupAzureEventHubOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadGroupAzureEventHubOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ReadGroupAzureEventHubOptions proto.InternalMessageInfo

func (m *ReadGroupAzureEventHubOptions) GetXConn() *args.AzureEventHubConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *ReadGroupAzureEventHubOptions) GetArgs() *args.AzureEventHubReadArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type ReadGroupAzureServiceBusOptions struct {
	// @gotags: kong:"embed"
	XConn *args.AzureServiceBusConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.AzureServiceBusReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *ReadGroupAzureServiceBusOptions) Reset()         { *m = ReadGroupAzureServiceBusOptions{} }
func (m *ReadGroupAzureServiceBusOptions) String() string { return proto.CompactTextString(m) }
func (*ReadGroupAzureServiceBusOptions) ProtoMessage()    {}
func (*ReadGroupAzureServiceBusOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff5a708dd529ae21, []int{19}
}

func (m *ReadGroupAzureServiceBusOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadGroupAzureServiceBusOptions.Unmarshal(m, b)
}
func (m *ReadGroupAzureServiceBusOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadGroupAzureServiceBusOptions.Marshal(b, m, deterministic)
}
func (m *ReadGroupAzureServiceBusOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadGroupAzureServiceBusOptions.Merge(m, src)
}
func (m *ReadGroupAzureServiceBusOptions) XXX_Size() int {
	return xxx_messageInfo_ReadGroupAzureServiceBusOptions.Size(m)
}
func (m *ReadGroupAzureServiceBusOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadGroupAzureServiceBusOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ReadGroupAzureServiceBusOptions proto.InternalMessageInfo

func (m *ReadGroupAzureServiceBusOptions) GetXConn() *args.AzureServiceBusConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *ReadGroupAzureServiceBusOptions) GetArgs() *args.AzureServiceBusReadArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type ReadGroupMQTTOptions struct {
	// @gotags: kong:"embed"
	XConn *args.MQTTConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.MQTTReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ReadGroupMQTTOptions) Reset()         { *m = ReadGroupMQTTOptions{} }
func (m *ReadGroupMQTTOptions) String() string { return proto.CompactTextString(m) }
func (*ReadGroupMQTTOptions) ProtoMessage()    {}
func (*ReadGroupMQTTOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff5a708dd529ae21, []int{20}
}

func (m *ReadGroupMQTTOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadGroupMQTTOptions.Unmarshal(m, b)
}
func (m *ReadGroupMQTTOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadGroupMQTTOptions.Marshal(b, m, deterministic)
}
func (m *ReadGroupMQTTOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadGroupMQTTOptions.Merge(m, src)
}
func (m *ReadGroupMQTTOptions) XXX_Size() int {
	return xxx_messageInfo_ReadGroupMQTTOptions.Size(m)
}
func (m *ReadGroupMQTTOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadGroupMQTTOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ReadGroupMQTTOptions proto.InternalMessageInfo

func (m *ReadGroupMQTTOptions) GetXConn() *args.MQTTConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *ReadGroupMQTTOptions) GetArgs() *args.MQTTReadArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type ReadGroupGCPPubSubOptions struct {
	// @gotags: kong:"embed"
	XConn *args.GCPPubSubConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.GCPPubSubReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ReadGroupGCPPubSubOptions) Reset()         { *m = ReadGroupGCPPubSubOptions{} }
func (m *ReadGroupGCPPubSubOptions) String() string { return proto.CompactTextString(m) }
func (*ReadGroupGCPPubSubOptions) ProtoMessage()    {}
func (*ReadGroupGCPPubSubOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff5a708dd529ae21, []int{21}
}

func (m *ReadGroupGCPPubSubOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadGroupGCPPubSubOptions.Unmarshal(m, b)
}
func (m *ReadGroupGCPPubSubOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadGroupGCPPubSubOptions.Marshal(b, m, deterministic)
}
func (m *ReadGroupGCPPubSubOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadGroupGCPPubSubOptions.Merge(m, src)
}
func (m *ReadGroupGCPPubSubOptions) XXX_Size() int {
	return xxx_messageInfo_ReadGroupGCPPubSubOptions.Size(m)
}
func (m *ReadGroupGCPPubSubOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadGroupGCPPubSubOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ReadGroupGCPPubSubOptions proto.InternalMessageInfo

func (m *ReadGroupGCPPubSubOptions) GetXConn() *args.GCPPubSubConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *ReadGroupGCPPubSubOptions) GetArgs() *args.GCPPubSubReadArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type ReadGroupKubeMQQueueOptions struct {
	// @gotags: kong:"embed"
	XConn *args.KubeMQQueueConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.KubeMQQueueReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ReadGroupKubeMQQueueOptions) Reset()         { *m = ReadGroupKubeMQQueueOptions{} }
func (m *ReadGroupKubeMQQueueOptions) String() string { return proto.CompactTextString(m) }
func (*ReadGroupKubeMQQueueOptions) ProtoMessage()    {}
func (*ReadGroupKubeMQQueueOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff5a708dd529ae21, []int{22}
}

func (m *ReadGroupKubeMQQueueOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadGroupKubeMQQueueOptions.Unmarshal(m, b)
}
func (m *ReadGroupKubeMQQueueOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadGroupKubeMQQueueOptions.Marshal(b, m, deterministic)
}
func (m *ReadGroupKubeMQQueueOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadGroupKubeMQQueueOptions.Merge(m, src)
}
func (m *ReadGroupKubeMQQueueOptions) XXX_Size() int {
	return xxx_messageInfo_ReadGroupKubeMQQueueOptions.Size(m)
}
func (m *ReadGroupKubeMQQueueOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadGroupKubeMQQueueOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ReadGroupKubeMQQueueOptions proto.InternalMessageInfo

func (m *ReadGroupKubeMQQueueOptions) GetXConn() *args.KubeMQQueueConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *ReadGroupKubeMQQueueOptions) GetArgs() *args.KubeMQQueueReadArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type ReadGroupAWSKinesisOptions struct {
	// @gotags: kong:"embed"
	XConn *args.AWSKinesisConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.AWSKinesisReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ReadGroupAWSKinesisOptions) Reset()         { *m = ReadGroupAWSKinesisOptions{} }
func (m *ReadGroupAWSKinesisOptions) String() string { return proto.CompactTextString(m) }
func (*ReadGroupAWSKinesisOptions) ProtoMessage()    {}
func (*ReadGroupAWSKinesisOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff5a708dd529ae21, []int{23}
}

func (m *ReadGroupAWSKinesisOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadGroupAWSKinesisOptions.Unmarshal(m, b)
}
func (m *ReadGroupAWSKinesisOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadGroupAWSKinesisOptions.Marshal(b, m, deterministic)
}
func (m *ReadGroupAWSKinesisOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadGroupAWSKinesisOptions.Merge(m, src)
}
func (m *ReadGroupAWSKinesisOptions) XXX_Size() int {
	return xxx_messageInfo_ReadGroupAWSKinesisOptions.Size(m)
}
func (m *ReadGroupAWSKinesisOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadGroupAWSKinesisOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ReadGroupAWSKinesisOptions proto.InternalMessageInfo

func (m *ReadGroupAWSKinesisOptions) GetXConn() *args.AWSKinesisConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *ReadGroupAWSKinesisOptions) GetArgs() *args.AWSKinesisReadArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type ReadGroupMemphisOptions struct {
	// @gotags: kong:"embed"
	XConn *args.MemphisConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.MemphisReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ReadGroupMemphisOptions) Reset()         { *m = ReadGroupMemphisOptions{} }
func (m *ReadGroupMemphisOptions) String() string { return proto.CompactTextString(m) }
func (*ReadGroupMemphisOptions) ProtoMessage()    {}
func (*ReadGroupMemphisOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff5a708dd529ae21, []int{24}
}

func (m *ReadGroupMemphisOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadGroupMemphisOptions.Unmarshal(m, b)
}
func (m *ReadGroupMemphisOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadGroupMemphisOptions.Marshal(b, m, deterministic)
}
func (m *ReadGroupMemphisOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadGroupMemphisOptions.Merge(m, src)
}
func (m *ReadGroupMemphisOptions) XXX_Size() int {
	return xxx_messageInfo_ReadGroupMemphisOptions.Size(m)
}
func (m *ReadGroupMemphisOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadGroupMemphisOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ReadGroupMemphisOptions proto.InternalMessageInfo

func (m *ReadGroupMemphisOptions) GetXConn() *args.MemphisConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *ReadGroupMemphisOptions) GetArgs() *args.MemphisReadArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type InferSchemaOptions struct {
	// Type of schema to infer from the data
	// @gotags: kong:"-"
	Type InferSchemaOptions_Type `protobuf:"varint,1,opt,name=type,proto3,enum=protos.opts.InferSchemaOptions_Type" json:"type,omitempty" kong:"-"`
	// Existing schema ID. Can be filled out by end user, or by plumber
	// If filled out by end user, plumber will pull the schema and evolve from it
	// If empty, plumber will make a new schema, save and publish to other instances, and then evolve from it
	// @gotags: kong:"-"
	SchemaId             string   `protobuf:"bytes,2,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty" kong:"-"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InferSchemaOptions) Reset()         { *m = InferSchemaOptions{} }
func (m *InferSchemaOptions) String() string { return proto.CompactTextString(m) }
func (*InferSchemaOptions) ProtoMessage()    {}
func (*InferSchemaOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff5a708dd529ae21, []int{25}
}

func (m *InferSchemaOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InferSchemaOptions.Unmarshal(m, b)
}
func (m *InferSchemaOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InferSchemaOptions.Marshal(b, m, deterministic)
}
func (m *InferSchemaOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InferSchemaOptions.Merge(m, src)
}
func (m *InferSchemaOptions) XXX_Size() int {
	return xxx_messageInfo_InferSchemaOptions.Size(m)
}
func (m *InferSchemaOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_InferSchemaOptions.DiscardUnknown(m)
}

var xxx_messageInfo_InferSchemaOptions proto.InternalMessageInfo

func (m *InferSchemaOptions) GetType() InferSchemaOptions_Type {
	if m != nil {
		return m.Type
	}
	return InferSchemaOptions_UNSET
}

func (m *InferSchemaOptions) GetSchemaId() string {
	if m != nil {
		return m.SchemaId
	}
	return ""
}

func init() {
	proto.RegisterEnum("protos.opts.ConvertOption", ConvertOption_name, ConvertOption_value)
	proto.RegisterEnum("protos.opts.InferSchemaOptions_Type", InferSchemaOptions_Type_name, InferSchemaOptions_Type_value)
	proto.RegisterType((*ReadCLIOptions)(nil), "protos.opts.ReadCLIOptions")
	proto.RegisterType((*ReadSampleOptions)(nil), "protos.opts.ReadSampleOptions")
	proto.RegisterType((*ReadFilterOptions)(nil), "protos.opts.ReadFilterOptions")
	proto.RegisterType((*CLIReadOptions)(nil), "protos.opts.CLIReadOptions")
	proto.RegisterType((*ReadGroupKafkaOptions)(nil), "protos.opts.ReadGroupKafkaOptions")
	proto.RegisterType((*ReadGroupActiveMQOptions)(nil), "protos.opts.ReadGroupActiveMQOptions")
	proto.RegisterType((*ReadGroupAWSSQSOptions)(nil), "protos.opts.ReadGroupAWSSQSOptions")
	proto.RegisterType((*ReadGroupMongoOptions)(nil), "protos.opts.ReadGroupMongoOptions")
	proto.RegisterType((*ReadGroupNatsOptions)(nil), "protos.opts.ReadGroupNatsOptions")
	proto.RegisterType((*ReadGroupNatsStreamingOptions)(nil), "protos.opts.ReadGroupNatsStreamingOptions")
	proto.RegisterType((*ReadGroupNatsJetstreamOptions)(nil), "protos.opts.ReadGroupNatsJetstreamOptions")
	proto.RegisterType((*ReadGroupNSQOptions)(nil), "protos.opts.ReadGroupNSQOptions")
	proto.RegisterType((*ReadGroupPostgresOptions)(nil), "protos.opts.ReadGroupPostgresOptions")
	proto.RegisterType((*ReadGroupPulsarOptions)(nil), "protos.opts.ReadGroupPulsarOptions")
	proto.RegisterType((*ReadGroupRabbitOptions)(nil), "protos.opts.ReadGroupRabbitOptions")
	proto.RegisterType((*ReadGroupRabbitStreamsOptions)(nil), "protos.opts.ReadGroupRabbitStreamsOptions")
	proto.RegisterType((*ReadGroupRedisPubSubOptions)(nil), "protos.opts.ReadGroupRedisPubSubOptions")
	proto.RegisterType((*ReadGroupRedisStreamsOptions)(nil), "protos.opts.ReadGroupRedisStreamsOptions")
	proto.RegisterType((*ReadGroupAzureEventHubOptions)(nil), "protos.opts.ReadGroupAzureEventHubOptions")
	proto.RegisterType((*ReadGroupAzureServiceBusOptions)(nil), "protos.opts.ReadGroupAzureServiceBusOptions")
	proto.RegisterType((*ReadGroupMQTTOptions)(nil), "protos.opts.ReadGroupMQTTOptions")
	proto.RegisterType((*ReadGroupGCPPubSubOptions)(nil), "protos.opts.ReadGroupGCPPubSubOptions")
	proto.RegisterType((*ReadGroupKubeMQQueueOptions)(nil), "protos.opts.ReadGroupKubeMQQueueOptions")
	proto.RegisterType((*ReadGroupAWSKinesisOptions)(nil), "protos.opts.ReadGroupAWSKinesisOptions")
	proto.RegisterType((*ReadGroupMemphisOptions)(nil), "protos.opts.ReadGroupMemphisOptions")
	proto.RegisterType((*InferSchemaOptions)(nil), "protos.opts.InferSchemaOptions")
}

func init() { proto.RegisterFile("opts/ps_opts_read.proto", fileDescriptor_ff5a708dd529ae21) }

var fileDescriptor_ff5a708dd529ae21 = []byte{
	// 1682 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x58, 0x69, 0x6f, 0xdb, 0xca,
	0x15, 0xad, 0x12, 0xaf, 0x57, 0x91, 0xe2, 0x4c, 0xbc, 0x8c, 0xed, 0x78, 0x53, 0x92, 0xd6, 0x49,
	0x13, 0x29, 0x71, 0x12, 0x23, 0x45, 0x8a, 0x00, 0x8e, 0xaa, 0x26, 0x4a, 0xe2, 0x8d, 0x74, 0x17,
	0x04, 0x28, 0x08, 0x8a, 0x1a, 0xcb, 0x8c, 0x25, 0x92, 0xe2, 0x90, 0x76, 0x1d, 0xa0, 0x40, 0x81,
	0x02, 0x05, 0x0a, 0x14, 0xef, 0xc3, 0xfb, 0x93, 0x6f, 0xf9, 0x15, 0x0f, 0x33, 0x43, 0x52, 0x1c,
	0x6e, 0xd6, 0xfb, 0x62, 0x4b, 0x73, 0xcf, 0x39, 0xf7, 0xcc, 0x7a, 0x2f, 0x04, 0x4b, 0xb6, 0xe3,
	0xd1, 0x86, 0x43, 0x35, 0xf6, 0x5f, 0x73, 0x89, 0xde, 0xad, 0x3b, 0xae, 0xed, 0xd9, 0xa8, 0xcc,
	0xff, 0xd1, 0x3a, 0x1b, 0x5f, 0x59, 0xd5, 0xdd, 0x1e, 0x47, 0xb1, 0xff, 0x9a, 0x6e, 0x78, 0xe6,
	0x05, 0x19, 0x0c, 0x05, 0x72, 0x65, 0x5d, 0x0e, 0x5e, 0x52, 0xed, 0xdc, 0xb4, 0x08, 0x35, 0x69,
	0x10, 0x5f, 0x49, 0xc5, 0xe9, 0x30, 0x8c, 0xd5, 0xe4, 0xd8, 0x37, 0xdf, 0x25, 0x1a, 0xb9, 0x20,
	0x96, 0xa7, 0x9d, 0xf9, 0x9d, 0x00, 0xf3, 0x20, 0x03, 0x43, 0x89, 0x7b, 0x61, 0x1a, 0x44, 0xeb,
	0xf8, 0xa1, 0xd2, 0x9a, 0x84, 0xea, 0x19, 0x8e, 0xe6, 0xf8, 0x1d, 0x1a, 0x89, 0x60, 0x29, 0x7c,
	0xae, 0x9f, 0x9e, 0xeb, 0x41, 0x64, 0x43, 0x8e, 0xf8, 0x1d, 0x32, 0x18, 0x6a, 0x43, 0x9f, 0xf8,
	0x24, 0xd3, 0xff, 0x80, 0x0c, 0x9c, 0xb3, 0x68, 0x6e, 0xb2, 0xec, 0xc0, 0xb6, 0x7a, 0x76, 0x10,
	0x59, 0x92, 0x23, 0x43, 0xcf, 0xcb, 0x0c, 0x58, 0xba, 0x17, 0x6a, 0x6d, 0xa5, 0x02, 0xda, 0x57,
	0xe2, 0x51, 0xcf, 0x25, 0xfa, 0x20, 0x1f, 0x22, 0xe2, 0xa6, 0xd5, 0x0b, 0x20, 0x8b, 0x32, 0x84,
	0x86, 0xbb, 0x24, 0x6f, 0xa1, 0x63, 0x53, 0xaf, 0xe7, 0x92, 0x30, 0xf5, 0xb2, 0x1c, 0xf4, 0xfb,
	0x54, 0x77, 0x33, 0x43, 0xae, 0xde, 0xe9, 0x98, 0x5e, 0xa6, 0x1b, 0x11, 0x0a, 0xfc, 0xd0, 0xcc,
	0xc5, 0x75, 0x49, 0xd7, 0xa4, 0xf2, 0xbe, 0x6c, 0x66, 0x00, 0x64, 0x89, 0x1a, 0xb1, 0x0c, 0xbb,
	0x6b, 0x5a, 0x3d, 0x86, 0x0a, 0x3f, 0xb3, 0xe3, 0x6a, 0xda, 0x56, 0x80, 0xa9, 0x19, 0x50, 0x55,
	0x88, 0xde, 0x6d, 0x7e, 0x6e, 0x1f, 0x8a, 0x71, 0xf4, 0x10, 0xaa, 0x17, 0xc4, 0xed, 0xd8, 0x94,
	0x68, 0xb6, 0xef, 0x39, 0xbe, 0x87, 0x4b, 0x9b, 0xa5, 0xed, 0x19, 0xa5, 0x12, 0x8c, 0x1e, 0xf2,
	0x41, 0xb4, 0x08, 0x53, 0x8e, 0x4b, 0x3c, 0xef, 0x0a, 0xdf, 0xe0, 0xe1, 0xe0, 0x1b, 0x42, 0x30,
	0xf1, 0x95, 0xda, 0x16, 0xbe, 0xc9, 0x47, 0xf9, 0xe7, 0x5a, 0x1f, 0xee, 0xb0, 0x24, 0xaa, 0x3e,
	0x70, 0xfa, 0x24, 0xcc, 0xb3, 0x01, 0x65, 0xca, 0x07, 0x34, 0x57, 0xf7, 0x08, 0x4f, 0x52, 0x51,
	0x40, 0x0c, 0x29, 0xba, 0x47, 0xd0, 0x2e, 0x2c, 0x05, 0x00, 0xd3, 0xf2, 0x88, 0x7b, 0xa1, 0xf7,
	0x35, 0x4a, 0x0c, 0xdb, 0xea, 0x52, 0x9e, 0xb2, 0xa2, 0x2c, 0x88, 0x70, 0x3b, 0x88, 0xaa, 0x22,
	0x58, 0x7b, 0x24, 0xb2, 0xfd, 0xd9, 0xec, 0x7b, 0xc4, 0x0d, 0xb3, 0xcd, 0xc3, 0xe4, 0xd0, 0x27,
	0xee, 0x15, 0xcf, 0x33, 0xab, 0x88, 0x2f, 0xb5, 0x1f, 0x6e, 0x43, 0xb5, 0xf9, 0xb9, 0xcd, 0xe0,
	0x21, 0x10, 0xc1, 0x84, 0xa5, 0x0f, 0x48, 0x80, 0xe3, 0x9f, 0xd1, 0x7d, 0xa8, 0x18, 0xb6, 0x65,
	0x11, 0x83, 0x41, 0x34, 0xb3, 0xcb, 0xf3, 0xcf, 0x2a, 0xb7, 0x46, 0x83, 0xed, 0x2e, 0x5a, 0x07,
	0x30, 0x6c, 0xcb, 0x33, 0x2d, 0xdf, 0xf6, 0x69, 0x30, 0xfd, 0xd8, 0x08, 0x6a, 0x41, 0x35, 0x98,
	0x4e, 0xb0, 0x03, 0x78, 0x62, 0xb3, 0xb4, 0x5d, 0xde, 0x59, 0xaf, 0xc7, 0xde, 0x8b, 0x7a, 0x6a,
	0x9d, 0x94, 0x0a, 0x95, 0x96, 0xad, 0x05, 0xd5, 0x2e, 0x31, 0xec, 0xee, 0x48, 0x66, 0x52, 0x96,
	0x09, 0x37, 0xba, 0xfe, 0x27, 0x0e, 0x8b, 0x64, 0xba, 0xf1, 0xaf, 0x68, 0x0f, 0xaa, 0x86, 0x6d,
	0x5d, 0x10, 0xd7, 0x0b, 0x77, 0x79, 0x6a, 0xb3, 0xb4, 0x5d, 0xdd, 0x59, 0x91, 0xdc, 0x34, 0x05,
	0x44, 0x90, 0x94, 0x4a, 0xc0, 0x08, 0x4e, 0xc0, 0x2e, 0x4c, 0x9d, 0xf2, 0x35, 0xc6, 0xd3, 0x39,
	0x13, 0x91, 0xb6, 0x40, 0x09, 0xd0, 0xe8, 0x18, 0xe6, 0x4d, 0xeb, 0x94, 0xb8, 0x1a, 0x35, 0xce,
	0xc8, 0x40, 0x8f, 0xe6, 0x31, 0xc3, 0x55, 0x36, 0x24, 0x95, 0x36, 0x03, 0xaa, 0x1c, 0x17, 0xca,
	0x20, 0x33, 0x35, 0x86, 0xe6, 0xe0, 0x26, 0xdb, 0x96, 0x1f, 0xa7, 0xf9, 0xbe, 0xdc, 0x68, 0x77,
	0x11, 0x86, 0xe9, 0xe0, 0xb5, 0xc5, 0x3f, 0x4d, 0x8b, 0x03, 0xba, 0xc7, 0xbf, 0xa2, 0xb7, 0x70,
	0x4b, 0x33, 0xfa, 0x66, 0x94, 0xf6, 0x67, 0xe1, 0x7e, 0x35, 0xe5, 0x7e, 0x74, 0x27, 0x14, 0x68,
	0xf6, 0xcd, 0x30, 0xd7, 0x6b, 0x98, 0xe4, 0x8f, 0x20, 0xee, 0x72, 0x5e, 0x2d, 0xc5, 0x7b, 0xef,
	0xda, 0xbe, 0xf3, 0x89, 0x41, 0x42, 0xba, 0x20, 0xa0, 0x3d, 0x98, 0x09, 0x0b, 0x00, 0x26, 0x9c,
	0xfc, 0x30, 0x9b, 0x2c, 0x9c, 0xee, 0x1f, 0x87, 0xfc, 0x88, 0x86, 0xfe, 0x08, 0xd3, 0x41, 0x19,
	0xc0, 0xa7, 0x5c, 0xe1, 0x7e, 0x8e, 0xc2, 0xdf, 0x54, 0xf5, 0x58, 0x8d, 0x56, 0x5e, 0xbf, 0xa4,
	0xea, 0x90, 0x5b, 0xe7, 0x0f, 0x2d, 0xee, 0x15, 0x59, 0xdf, 0x67, 0x90, 0xc8, 0x3a, 0x27, 0xa0,
	0x57, 0xec, 0x56, 0x78, 0x14, 0x9f, 0x71, 0xe2, 0x56, 0x36, 0xf1, 0x40, 0xf7, 0x68, 0xc8, 0xe3,
	0x70, 0x74, 0x0c, 0x55, 0xf9, 0xa9, 0xc5, 0x26, 0x17, 0x78, 0x9c, 0x2f, 0xa0, 0x86, 0xd0, 0xe8,
	0xe0, 0x5a, 0xf1, 0x51, 0xb4, 0x03, 0x37, 0x2d, 0x3a, 0xc4, 0x5f, 0xb9, 0xce, 0x66, 0x8e, 0x8e,
	0x1a, 0x2d, 0x1d, 0x03, 0xa3, 0x37, 0x30, 0x25, 0x5e, 0x66, 0x7c, 0x5e, 0xb4, 0x68, 0x47, 0x1c,
	0x13, 0x2d, 0x9a, 0xa0, 0x30, 0xb2, 0x78, 0xa0, 0x71, 0xbf, 0x88, 0xac, 0x70, 0x4c, 0x44, 0x16,
	0x14, 0xb6, 0x00, 0xf2, 0xeb, 0x8e, 0x07, 0x45, 0x0b, 0x20, 0x44, 0xc4, 0x64, 0xa3, 0xa5, 0xac,
	0xb8, 0xf1, 0x51, 0xb6, 0x15, 0xac, 0x26, 0x62, 0xab, 0x68, 0x2b, 0xf6, 0x8f, 0x4f, 0x4e, 0xa2,
	0xad, 0x60, 0x70, 0xf4, 0x77, 0xb8, 0x93, 0x6a, 0x00, 0xb0, 0xcd, 0x35, 0x9e, 0xe4, 0x9c, 0x21,
	0x06, 0x57, 0x05, 0xfa, 0x9d, 0x1f, 0xd9, 0xb9, 0xad, 0xcb, 0xe3, 0x48, 0x81, 0xdb, 0x89, 0xf6,
	0x03, 0x3b, 0x45, 0x93, 0xe4, 0xba, 0x2d, 0x86, 0xfd, 0xe0, 0x77, 0xa2, 0x49, 0xea, 0xf1, 0x51,
	0xd4, 0x02, 0x18, 0x35, 0x22, 0x78, 0xc8, 0xe5, 0x7e, 0x9b, 0x2d, 0xf7, 0xbe, 0x79, 0x74, 0xe4,
	0x77, 0xd4, 0x91, 0xd4, 0x6c, 0xcf, 0x70, 0x8e, 0x38, 0x11, 0x7d, 0x82, 0x5b, 0xf1, 0xb6, 0x04,
	0xbb, 0x5c, 0x68, 0x3b, 0xe7, 0xca, 0xfa, 0x1d, 0xb2, 0x7f, 0x7c, 0xcc, 0x80, 0xa1, 0x54, 0x59,
	0xb0, 0xf9, 0x18, 0x13, 0x8b, 0x97, 0x61, 0x4c, 0x8b, 0xc4, 0x14, 0x86, 0x94, 0x7d, 0x95, 0xdd,
	0x60, 0x8c, 0x39, 0x3b, 0x80, 0x8a, 0x54, 0xb2, 0xb1, 0xc7, 0xd5, 0x1e, 0x15, 0xa8, 0x25, 0x8e,
	0x85, 0x30, 0x13, 0x9e, 0x8a, 0x3d, 0x98, 0x09, 0x3b, 0x13, 0xec, 0x17, 0xbd, 0x2d, 0x47, 0x01,
	0x2a, 0x7a, 0x5b, 0x42, 0x5a, 0x74, 0x59, 0xa3, 0xd6, 0x09, 0x5f, 0x5c, 0x77, 0x59, 0x3f, 0x86,
	0x50, 0xe9, 0xb2, 0x46, 0xa3, 0xe8, 0x03, 0x94, 0x63, 0x5d, 0x2d, 0xbe, 0xe4, 0x7a, 0xbf, 0xcb,
	0x7d, 0xb2, 0x3e, 0x09, 0x5c, 0xf4, 0xea, 0xea, 0x97, 0x34, 0x18, 0x42, 0x6f, 0x61, 0x3a, 0xe8,
	0x1f, 0xf1, 0x3f, 0xb9, 0xca, 0x83, 0x9c, 0x83, 0x2f, 0x40, 0xa1, 0x44, 0x48, 0xaa, 0x79, 0xb0,
	0x90, 0xf9, 0x36, 0xa3, 0xdf, 0xc3, 0xa4, 0xc6, 0xea, 0x38, 0x2f, 0xf8, 0xe5, 0x9d, 0xc5, 0x50,
	0x96, 0x75, 0x55, 0x75, 0x8e, 0x6c, 0xda, 0x96, 0xa5, 0x4c, 0xb0, 0xbf, 0xa8, 0x0e, 0x13, 0x6c,
	0x9c, 0xd7, 0xff, 0xf2, 0xa8, 0x56, 0x8e, 0xb0, 0x2c, 0xc7, 0x9e, 0xdb, 0xa3, 0x0a, 0xc7, 0xd5,
	0xfe, 0x05, 0x38, 0xef, 0x51, 0x47, 0x75, 0x39, 0xf1, 0xb2, 0x24, 0x16, 0x82, 0x63, 0xb9, 0x9f,
	0x4b, 0xb9, 0xd7, 0x32, 0xe1, 0x89, 0xf4, 0x97, 0xb0, 0x98, 0x5d, 0x11, 0xd0, 0x13, 0x39, 0xf9,
	0x92, 0xac, 0xc6, 0xa1, 0xb1, 0xd4, 0x0d, 0x29, 0xf5, 0x6a, 0x06, 0x38, 0x91, 0x38, 0xbe, 0xda,
	0xf1, 0x72, 0x52, 0xbc, 0xda, 0x1c, 0x39, 0xe6, 0x6a, 0x73, 0x6c, 0x22, 0xeb, 0x10, 0xe6, 0xb3,
	0x6a, 0x11, 0x7a, 0x2c, 0x27, 0x5d, 0x90, 0x84, 0x18, 0x30, 0x96, 0xf3, 0xa9, 0x94, 0x73, 0x39,
	0x05, 0x4d, 0xa4, 0xfc, 0x7f, 0x09, 0xd6, 0x0a, 0xcb, 0x17, 0x7a, 0x21, 0x27, 0x5f, 0x4f, 0x29,
	0x46, 0x8c, 0x98, 0x8b, 0x5d, 0xc9, 0x45, 0x2d, 0x9f, 0x73, 0x9d, 0x9d, 0xe4, 0x05, 0xbd, 0xde,
	0x4e, 0xc4, 0xf8, 0x15, 0x76, 0x22, 0x4e, 0xc2, 0x8e, 0x05, 0x77, 0x33, 0x6a, 0x32, 0x7a, 0x24,
	0x7b, 0x98, 0x97, 0xf5, 0xd4, 0xf8, 0xa1, 0x7f, 0x22, 0x65, 0xc6, 0x49, 0x64, 0xc1, 0x75, 0x4b,
	0xbc, 0x73, 0xc5, 0xd7, 0x2d, 0x04, 0x8f, 0x79, 0xdd, 0x42, 0x78, 0xc1, 0x75, 0x93, 0x7a, 0x89,
	0xe2, 0xeb, 0x26, 0xa0, 0x63, 0x5e, 0x37, 0x01, 0x2e, 0x48, 0x2c, 0xf5, 0x21, 0xc5, 0x89, 0x05,
	0x74, 0xcc, 0xc4, 0x02, 0x5c, 0x74, 0xde, 0xb2, 0x9a, 0x97, 0xe2, 0xf3, 0x26, 0x31, 0xc6, 0x3c,
	0x6f, 0x12, 0x27, 0x61, 0xe7, 0xbf, 0x25, 0x58, 0x2d, 0xa8, 0xc0, 0xe8, 0xb9, 0x6c, 0xe6, 0x9e,
	0x2c, 0x3c, 0xc2, 0xc7, 0xac, 0xbc, 0x94, 0xac, 0x6c, 0xe6, 0x31, 0x12, 0x46, 0xfe, 0x57, 0x82,
	0x7b, 0x45, 0xc5, 0x1b, 0xed, 0xc8, 0x4e, 0xd6, 0xd2, 0xba, 0xe9, 0x55, 0x79, 0x25, 0x59, 0xd9,
	0xca, 0xa5, 0x14, 0xed, 0x51, 0x56, 0xef, 0x55, 0xbc, 0x47, 0x12, 0x63, 0xcc, 0x3d, 0x92, 0x38,
	0x09, 0x3b, 0xdf, 0x97, 0x60, 0xe3, 0x9a, 0x16, 0x13, 0xbd, 0x92, 0x0d, 0x6d, 0xa6, 0xc5, 0x47,
	0x9c, 0x98, 0xa5, 0xd7, 0x92, 0xa5, 0x07, 0x45, 0xac, 0x82, 0xca, 0x11, 0x6b, 0x9d, 0x8b, 0x2b,
	0x07, 0x03, 0x8e, 0x59, 0x39, 0x18, 0x34, 0x91, 0xf2, 0xdf, 0x25, 0x58, 0xce, 0xed, 0x61, 0x51,
	0x43, 0x4e, 0x2c, 0xd7, 0xbe, 0x08, 0x1d, 0xcb, 0xbe, 0x23, 0x65, 0x5f, 0xcf, 0xc6, 0x17, 0x5d,
	0x97, 0x74, 0xf7, 0x5b, 0x7c, 0x5d, 0x62, 0xf8, 0x31, 0xaf, 0x4b, 0x8c, 0x91, 0x30, 0xf2, 0x9f,
	0x12, 0xac, 0xe4, 0xf7, 0x81, 0xe8, 0x99, 0xec, 0x23, 0xd5, 0x7f, 0x04, 0xf0, 0x98, 0x8d, 0x17,
	0x92, 0x8d, 0x8d, 0x1c, 0x42, 0xc2, 0xc5, 0x37, 0x58, 0xca, 0x69, 0x23, 0xd1, 0x53, 0xd9, 0x81,
	0x5c, 0x87, 0x02, 0x6c, 0x2c, 0xfd, 0x33, 0x29, 0xfd, 0xbd, 0x2c, 0x74, 0x22, 0xf7, 0x77, 0x25,
	0x40, 0xe9, 0xdf, 0x3a, 0xd8, 0x89, 0xf6, 0xae, 0x1c, 0xf1, 0x63, 0x54, 0x35, 0xd1, 0xf2, 0xa6,
	0xe1, 0xf5, 0x93, 0x2b, 0x87, 0x28, 0x9c, 0x81, 0x56, 0x61, 0x36, 0xf8, 0x79, 0x25, 0xfa, 0xb9,
	0x6a, 0x46, 0x0c, 0xb4, 0xbb, 0xb5, 0x2d, 0x98, 0x60, 0x50, 0x34, 0x0b, 0x93, 0x7f, 0x39, 0x50,
	0x5b, 0x27, 0x73, 0xbf, 0x41, 0x55, 0x80, 0x8f, 0xea, 0xe1, 0x81, 0xda, 0xfc, 0xd0, 0xda, 0xdf,
	0x9b, 0x2b, 0x3d, 0xfe, 0x07, 0x54, 0xa4, 0x1f, 0x7f, 0x10, 0x86, 0xf9, 0xe6, 0xe1, 0xc1, 0x5f,
	0x5b, 0xca, 0x89, 0x76, 0x78, 0x74, 0xd2, 0x3e, 0x3c, 0xd0, 0x42, 0xea, 0x32, 0x2c, 0x24, 0x22,
	0xef, 0xf6, 0xd4, 0xd6, 0xee, 0xcb, 0xb9, 0x12, 0x5a, 0x82, 0xbb, 0x89, 0xd0, 0xfb, 0x2f, 0xed,
	0xa3, 0xb9, 0x1b, 0xef, 0xde, 0x7c, 0xf9, 0x43, 0xcf, 0xf4, 0xce, 0xfc, 0x4e, 0xdd, 0xb0, 0x07,
	0x8d, 0x8e, 0xee, 0x19, 0x67, 0x86, 0xed, 0x3a, 0x0d, 0xa7, 0xef, 0x0f, 0x3a, 0xc4, 0x7d, 0x2a,
	0xac, 0xd2, 0x46, 0xc7, 0x37, 0xfb, 0xdd, 0x46, 0xcf, 0x6e, 0x88, 0x99, 0x37, 0xd8, 0xcc, 0x3b,
	0x53, 0xfc, 0xcb, 0x8b, 0x5f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xf1, 0xcb, 0x60, 0x9f, 0x82, 0x17,
	0x00, 0x00,
}
