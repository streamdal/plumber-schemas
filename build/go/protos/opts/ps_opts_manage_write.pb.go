// Code generated by protoc-gen-go. DO NOT EDIT.
// source: opts/ps_opts_manage_write.proto

package opts

import (
	fmt "fmt"
	args "github.com/batchcorp/plumber-schemas/build/go/protos/args"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CreateWriteOptions struct {
	// @gotags: kong:"help='ID of the underlying connection',required"
	ConnectionId string `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty" kong:"help='ID of the underlying connection',required"`
	// @gotags: kong:"help='Friendly name for the connection',required"
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" kong:"help='Friendly name for the connection',required"`
	// @gotags: kong:"help='Optional notes to associate with the connection'"
	Notes string `protobuf:"bytes,3,opt,name=notes,proto3" json:"notes,omitempty" kong:"help='Optional notes to associate with the connection'"`
	// @gotags: kong:"cmd,help='Apache Kafka'"
	Kafka *args.KafkaWriteArgs `protobuf:"bytes,100,opt,name=kafka,proto3" json:"kafka,omitempty" kong:"cmd,help='Apache Kafka'"`
	// @gotags: kong:"cmd,help='Apache ActiveMQ'"
	Activemq *args.ActiveMQWriteArgs `protobuf:"bytes,101,opt,name=activemq,proto3" json:"activemq,omitempty" kong:"cmd,help='Apache ActiveMQ'"`
	// @gotags: kong:"cmd,help='AWS Simple Queue System'"
	AwsSqs *args.AWSSQSWriteArgs `protobuf:"bytes,102,opt,name=aws_sqs,json=awsSqs,proto3" json:"aws_sqs,omitempty" kong:"cmd,help='AWS Simple Queue System'"`
	// @gotags: kong:"cmd,help='AWS Simple Notification System'"
	AwsSns *args.AWSSNSWriteArgs `protobuf:"bytes,103,opt,name=aws_sns,json=awsSns,proto3" json:"aws_sns,omitempty" kong:"cmd,help='AWS Simple Notification System'"`
	// @gotags: kong:"cmd,help='NATS'"
	Nats *args.NatsWriteArgs `protobuf:"bytes,104,opt,name=nats,proto3" json:"nats,omitempty" kong:"cmd,help='NATS'"`
	// @gotags: kong:"cmd,help='NATS Streaming'"
	NatsStreaming *args.NatsStreamingWriteArgs `protobuf:"bytes,105,opt,name=nats_streaming,json=natsStreaming,proto3" json:"nats_streaming,omitempty" kong:"cmd,help='NATS Streaming'"`
	// @gotags: kong:"cmd,help='NSQ'"
	Nsq *args.NSQWriteArgs `protobuf:"bytes,106,opt,name=nsq,proto3" json:"nsq,omitempty" kong:"cmd,help='NSQ'"`
	// @gotags: kong:"cmd,help='RabbitMQ'"
	Rabbit *args.RabbitWriteArgs `protobuf:"bytes,107,opt,name=rabbit,proto3" json:"rabbit,omitempty" kong:"cmd,help='RabbitMQ'"`
	// @gotags: kong:"cmd,help='MQTT'"
	Mqtt *args.MQTTWriteArgs `protobuf:"bytes,108,opt,name=mqtt,proto3" json:"mqtt,omitempty" kong:"cmd,help='MQTT'"`
	// @gotags: kong:"cmd,help='Azure Service Bus'"
	AzureServiceBus *args.AzureServiceBusWriteArgs `protobuf:"bytes,109,opt,name=azure_service_bus,json=azureServiceBus,proto3" json:"azure_service_bus,omitempty" kong:"cmd,help='Azure Service Bus'"`
	// @gotags: kong:"cmd,help='Azure Event Hub'"
	AzureEventHub *args.AzureEventHubWriteArgs `protobuf:"bytes,110,opt,name=azure_event_hub,json=azureEventHub,proto3" json:"azure_event_hub,omitempty" kong:"cmd,help='Azure Event Hub'"`
	// @gotags: kong:"cmd,help='Google Cloud Platform Pub/Sub'"
	GcpPubsub *args.GCPPubSubWriteArgs `protobuf:"bytes,111,opt,name=gcp_pubsub,json=gcpPubsub,proto3" json:"gcp_pubsub,omitempty" kong:"cmd,help='Google Cloud Platform Pub/Sub'"`
	// @gotags: kong:"cmd,help='KubeMQ Queue'"
	KubemqQueue *args.KubeMQQueueWriteArgs `protobuf:"bytes,112,opt,name=kubemq_queue,json=kubemqQueue,proto3" json:"kubemq_queue,omitempty" kong:"cmd,help='KubeMQ Queue'"`
	// @gotags: kong:"cmd,help='Redis PubSub'"
	RedisPubsub *args.RedisPubSubWriteArgs `protobuf:"bytes,113,opt,name=redis_pubsub,json=redisPubsub,proto3" json:"redis_pubsub,omitempty" kong:"cmd,help='Redis PubSub'"`
	// @gotags: kong:"cmd,help='Redis Streams'"
	RedisStreams *args.RedisStreamsWriteArgs `protobuf:"bytes,114,opt,name=redis_streams,json=redisStreams,proto3" json:"redis_streams,omitempty" kong:"cmd,help='Redis Streams'"`
	// @gotags: kong:"cmd,help='Apache Pulsar'"
	Pulsar *args.PulsarWriteArgs `protobuf:"bytes,115,opt,name=pulsar,proto3" json:"pulsar,omitempty" kong:"cmd,help='Apache Pulsar'"`
	// @gotags: kong:"cmd,help='RabbitMQ Streams'"
	RabbitStreams *args.RabbitStreamsWriteArgs `protobuf:"bytes,116,opt,name=rabbit_streams,json=rabbitStreams,proto3" json:"rabbit_streams,omitempty" kong:"cmd,help='RabbitMQ Streams'"`
	// @gotags: kong:"cmd,help='NATS JetStream'"
	NatsJetstream *args.NatsJetstreamWriteArgs `protobuf:"bytes,117,opt,name=nats_jetstream,json=natsJetstream,proto3" json:"nats_jetstream,omitempty" kong:"cmd,help='NATS JetStream'"`
	// @gotags: kong:"cmd,help='AWS Kinesis Streams'"
	AwsKinesis *args.AWSKinesisWriteArgs `protobuf:"bytes,118,opt,name=aws_kinesis,json=awsKinesis,proto3" json:"aws_kinesis,omitempty" kong:"cmd,help='AWS Kinesis Streams'"`
	// @gotags: kong:"cmd,help='Memphis'"
	Memphis *args.MemphisWriteArgs `protobuf:"bytes,119,opt,name=memphis,proto3" json:"memphis,omitempty" kong:"cmd,help='Memphis'"`
	// @gotags: kong:"cmd,help='Streamdal'"
	Streamdal *args.StreamdalWriteArgs `protobuf:"bytes,120,opt,name=streamdal,proto3" json:"streamdal,omitempty" kong:"cmd,help='Streamdal'"`
	// @gotags: kong:"-"
	XWriteId string `protobuf:"bytes,1000,opt,name=_write_id,json=WriteId,proto3" json:"_write_id,omitempty" kong:"-"`
	// @gotags: kong:"-"
	XActive              bool     `protobuf:"varint,1001,opt,name=_active,json=Active,proto3" json:"_active,omitempty" kong:"-"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateWriteOptions) Reset()         { *m = CreateWriteOptions{} }
func (m *CreateWriteOptions) String() string { return proto.CompactTextString(m) }
func (*CreateWriteOptions) ProtoMessage()    {}
func (*CreateWriteOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_f78eee20a41724b3, []int{0}
}

func (m *CreateWriteOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateWriteOptions.Unmarshal(m, b)
}
func (m *CreateWriteOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateWriteOptions.Marshal(b, m, deterministic)
}
func (m *CreateWriteOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateWriteOptions.Merge(m, src)
}
func (m *CreateWriteOptions) XXX_Size() int {
	return xxx_messageInfo_CreateWriteOptions.Size(m)
}
func (m *CreateWriteOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateWriteOptions.DiscardUnknown(m)
}

var xxx_messageInfo_CreateWriteOptions proto.InternalMessageInfo

func (m *CreateWriteOptions) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func (m *CreateWriteOptions) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateWriteOptions) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

func (m *CreateWriteOptions) GetKafka() *args.KafkaWriteArgs {
	if m != nil {
		return m.Kafka
	}
	return nil
}

func (m *CreateWriteOptions) GetActivemq() *args.ActiveMQWriteArgs {
	if m != nil {
		return m.Activemq
	}
	return nil
}

func (m *CreateWriteOptions) GetAwsSqs() *args.AWSSQSWriteArgs {
	if m != nil {
		return m.AwsSqs
	}
	return nil
}

func (m *CreateWriteOptions) GetAwsSns() *args.AWSSNSWriteArgs {
	if m != nil {
		return m.AwsSns
	}
	return nil
}

func (m *CreateWriteOptions) GetNats() *args.NatsWriteArgs {
	if m != nil {
		return m.Nats
	}
	return nil
}

func (m *CreateWriteOptions) GetNatsStreaming() *args.NatsStreamingWriteArgs {
	if m != nil {
		return m.NatsStreaming
	}
	return nil
}

func (m *CreateWriteOptions) GetNsq() *args.NSQWriteArgs {
	if m != nil {
		return m.Nsq
	}
	return nil
}

func (m *CreateWriteOptions) GetRabbit() *args.RabbitWriteArgs {
	if m != nil {
		return m.Rabbit
	}
	return nil
}

func (m *CreateWriteOptions) GetMqtt() *args.MQTTWriteArgs {
	if m != nil {
		return m.Mqtt
	}
	return nil
}

func (m *CreateWriteOptions) GetAzureServiceBus() *args.AzureServiceBusWriteArgs {
	if m != nil {
		return m.AzureServiceBus
	}
	return nil
}

func (m *CreateWriteOptions) GetAzureEventHub() *args.AzureEventHubWriteArgs {
	if m != nil {
		return m.AzureEventHub
	}
	return nil
}

func (m *CreateWriteOptions) GetGcpPubsub() *args.GCPPubSubWriteArgs {
	if m != nil {
		return m.GcpPubsub
	}
	return nil
}

func (m *CreateWriteOptions) GetKubemqQueue() *args.KubeMQQueueWriteArgs {
	if m != nil {
		return m.KubemqQueue
	}
	return nil
}

func (m *CreateWriteOptions) GetRedisPubsub() *args.RedisPubSubWriteArgs {
	if m != nil {
		return m.RedisPubsub
	}
	return nil
}

func (m *CreateWriteOptions) GetRedisStreams() *args.RedisStreamsWriteArgs {
	if m != nil {
		return m.RedisStreams
	}
	return nil
}

func (m *CreateWriteOptions) GetPulsar() *args.PulsarWriteArgs {
	if m != nil {
		return m.Pulsar
	}
	return nil
}

func (m *CreateWriteOptions) GetRabbitStreams() *args.RabbitStreamsWriteArgs {
	if m != nil {
		return m.RabbitStreams
	}
	return nil
}

func (m *CreateWriteOptions) GetNatsJetstream() *args.NatsJetstreamWriteArgs {
	if m != nil {
		return m.NatsJetstream
	}
	return nil
}

func (m *CreateWriteOptions) GetAwsKinesis() *args.AWSKinesisWriteArgs {
	if m != nil {
		return m.AwsKinesis
	}
	return nil
}

func (m *CreateWriteOptions) GetMemphis() *args.MemphisWriteArgs {
	if m != nil {
		return m.Memphis
	}
	return nil
}

func (m *CreateWriteOptions) GetStreamdal() *args.StreamdalWriteArgs {
	if m != nil {
		return m.Streamdal
	}
	return nil
}

func (m *CreateWriteOptions) GetXWriteId() string {
	if m != nil {
		return m.XWriteId
	}
	return ""
}

func (m *CreateWriteOptions) GetXActive() bool {
	if m != nil {
		return m.XActive
	}
	return false
}

type GetWriteOptions struct {
	// @gotags: kong:"help='ID of the write resource to get (leave empty to get all)'"
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" kong:"help='ID of the write resource to get (leave empty to get all)'"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetWriteOptions) Reset()         { *m = GetWriteOptions{} }
func (m *GetWriteOptions) String() string { return proto.CompactTextString(m) }
func (*GetWriteOptions) ProtoMessage()    {}
func (*GetWriteOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_f78eee20a41724b3, []int{1}
}

func (m *GetWriteOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetWriteOptions.Unmarshal(m, b)
}
func (m *GetWriteOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetWriteOptions.Marshal(b, m, deterministic)
}
func (m *GetWriteOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWriteOptions.Merge(m, src)
}
func (m *GetWriteOptions) XXX_Size() int {
	return xxx_messageInfo_GetWriteOptions.Size(m)
}
func (m *GetWriteOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWriteOptions.DiscardUnknown(m)
}

var xxx_messageInfo_GetWriteOptions proto.InternalMessageInfo

func (m *GetWriteOptions) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DeleteWriteOptions struct {
	// @gotags: kong:"help='ID of the write resource to delete',required=true"
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" kong:"help='ID of the write resource to delete',required=true"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteWriteOptions) Reset()         { *m = DeleteWriteOptions{} }
func (m *DeleteWriteOptions) String() string { return proto.CompactTextString(m) }
func (*DeleteWriteOptions) ProtoMessage()    {}
func (*DeleteWriteOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_f78eee20a41724b3, []int{2}
}

func (m *DeleteWriteOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteWriteOptions.Unmarshal(m, b)
}
func (m *DeleteWriteOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteWriteOptions.Marshal(b, m, deterministic)
}
func (m *DeleteWriteOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteWriteOptions.Merge(m, src)
}
func (m *DeleteWriteOptions) XXX_Size() int {
	return xxx_messageInfo_DeleteWriteOptions.Size(m)
}
func (m *DeleteWriteOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteWriteOptions.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteWriteOptions proto.InternalMessageInfo

func (m *DeleteWriteOptions) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*CreateWriteOptions)(nil), "protos.opts.CreateWriteOptions")
	proto.RegisterType((*GetWriteOptions)(nil), "protos.opts.GetWriteOptions")
	proto.RegisterType((*DeleteWriteOptions)(nil), "protos.opts.DeleteWriteOptions")
}

func init() { proto.RegisterFile("opts/ps_opts_manage_write.proto", fileDescriptor_f78eee20a41724b3) }

var fileDescriptor_f78eee20a41724b3 = []byte{
	// 848 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x56, 0xeb, 0x6e, 0xfb, 0x34,
	0x14, 0xd7, 0xf6, 0x67, 0xed, 0xea, 0xae, 0x9b, 0xb0, 0x10, 0x78, 0xdd, 0xad, 0xeb, 0x86, 0x34,
	0x09, 0xd1, 0x8a, 0x9b, 0x10, 0x20, 0x90, 0x76, 0x41, 0x63, 0x9b, 0x36, 0xda, 0x66, 0xd2, 0x24,
	0xbe, 0x44, 0x4e, 0xe2, 0xa5, 0x59, 0x1b, 0x27, 0xb1, 0x9d, 0x16, 0xf1, 0x7c, 0x3c, 0x0c, 0xbc,
	0x05, 0xb2, 0x9d, 0x9b, 0xdb, 0x8c, 0x4f, 0x69, 0xce, 0xef, 0x62, 0xfb, 0xe4, 0x9c, 0x53, 0x83,
	0x93, 0x28, 0x16, 0x7c, 0x18, 0x73, 0x5b, 0x3e, 0xed, 0x10, 0x53, 0xec, 0x13, 0x7b, 0xc9, 0x02,
	0x41, 0x06, 0x31, 0x8b, 0x44, 0x04, 0xdb, 0xea, 0xc1, 0x07, 0x12, 0xef, 0x1e, 0x60, 0xe6, 0x2b,
	0xb6, 0x7c, 0xda, 0xd8, 0x15, 0xc1, 0x82, 0x84, 0x89, 0x66, 0x76, 0x8f, 0x4d, 0x70, 0xc9, 0xed,
	0x59, 0x40, 0x09, 0x0f, 0x78, 0x86, 0x77, 0xd7, 0x70, 0x4e, 0xff, 0x07, 0x4b, 0x72, 0xac, 0x6f,
	0x62, 0x7f, 0xa5, 0x8c, 0xd8, 0x64, 0x41, 0xa8, 0xb0, 0xa7, 0xa9, 0x93, 0x71, 0xce, 0x6b, 0x38,
	0x9c, 0xb0, 0x45, 0xe0, 0x12, 0xdb, 0x49, 0x73, 0xa7, 0x23, 0x83, 0xe5, 0xbb, 0xb1, 0x1d, 0xa7,
	0x0e, 0x2f, 0x4c, 0x90, 0x01, 0xcf, 0xf0, 0xeb, 0x0c, 0x67, 0xc8, 0x89, 0x89, 0xa4, 0x0e, 0x09,
	0x13, 0x3b, 0x49, 0x49, 0x4a, 0x6a, 0xf7, 0x1f, 0x92, 0x30, 0x9e, 0x16, 0xe7, 0xfe, 0xcc, 0xc4,
	0x12, 0x21, 0x6a, 0x01, 0x8a, 0x45, 0xae, 0x38, 0x5d, 0x03, 0xec, 0x37, 0x22, 0xb8, 0x60, 0x04,
	0x87, 0xef, 0x53, 0x34, 0x1e, 0x50, 0x3f, 0xa3, 0x7c, 0x6a, 0x52, 0x78, 0xfe, 0x9d, 0xf6, 0x8d,
	0x78, 0x9c, 0xce, 0x39, 0x66, 0xb5, 0x10, 0xc3, 0x8e, 0x13, 0x88, 0xda, 0x05, 0x35, 0x94, 0x2d,
	0xc9, 0x6b, 0xb3, 0xc4, 0x88, 0x17, 0x70, 0x33, 0xc1, 0xbd, 0x1a, 0x82, 0x69, 0x71, 0x68, 0x30,
	0x34, 0xe6, 0xe1, 0xb9, 0x46, 0xfb, 0x7f, 0xb7, 0x01, 0xbc, 0x66, 0x04, 0x0b, 0xf2, 0x22, 0x2b,
	0xf4, 0xf7, 0x58, 0x04, 0x11, 0xe5, 0xf0, 0x0c, 0x74, 0xdc, 0x88, 0x52, 0xe2, 0xca, 0x57, 0x3b,
	0xf0, 0xd0, 0x46, 0x6f, 0xe3, 0xa2, 0x35, 0xd9, 0x29, 0x83, 0x77, 0x1e, 0x84, 0xe0, 0x23, 0x8a,
	0x43, 0x82, 0x36, 0x15, 0xa6, 0x7e, 0xc3, 0x4f, 0xc0, 0x16, 0x8d, 0x04, 0xe1, 0xe8, 0x83, 0x0a,
	0xea, 0x17, 0xf8, 0x15, 0xd8, 0x52, 0xdf, 0x1e, 0x79, 0xbd, 0x8d, 0x8b, 0xf6, 0xd7, 0x07, 0x83,
	0xac, 0x03, 0xe4, 0x96, 0x06, 0x0f, 0x12, 0x51, 0xab, 0x5f, 0x32, 0x9f, 0x4f, 0x34, 0x13, 0xfe,
	0x08, 0xb6, 0xf3, 0x66, 0x40, 0x44, 0xa9, 0x8e, 0x0d, 0xd5, 0xa5, 0x02, 0x1f, 0xc7, 0xa5, 0xb0,
	0xe0, 0xc3, 0xef, 0x40, 0x33, 0xab, 0x77, 0xf4, 0xaa, 0xa4, 0x87, 0xa6, 0xf4, 0xc5, 0xb2, 0xc6,
	0x56, 0x29, 0x6c, 0xe0, 0x25, 0xb7, 0x12, 0x5e, 0xc8, 0x28, 0x47, 0xfe, 0x3b, 0xb2, 0xa7, 0x55,
	0x19, 0xe5, 0x70, 0x20, 0xd3, 0x20, 0x38, 0x9a, 0x2a, 0x4d, 0xd7, 0xd0, 0x3c, 0x61, 0xc1, 0x4b,
	0x85, 0xe2, 0xc1, 0x7b, 0xb0, 0x6b, 0x16, 0x17, 0x0a, 0x94, 0xf2, 0x6c, 0x4d, 0x69, 0xe5, 0x8c,
	0xd2, 0xa2, 0x43, 0xab, 0x71, 0xf8, 0x05, 0xf8, 0x40, 0x79, 0x82, 0xde, 0x94, 0xc1, 0xbe, 0x69,
	0x60, 0x55, 0x72, 0x23, 0x59, 0xf0, 0x5b, 0xd0, 0xd0, 0x45, 0x86, 0x66, 0x35, 0xc7, 0x9b, 0x28,
	0xa8, 0x72, 0x3c, 0xcd, 0x95, 0xc7, 0x93, 0x0d, 0x86, 0xe6, 0x35, 0xc7, 0x7b, 0x1c, 0x3f, 0x3f,
	0x57, 0x8e, 0x27, 0x79, 0x70, 0x0c, 0x3e, 0x5e, 0x1b, 0x16, 0x28, 0x54, 0xe2, 0xcf, 0xcd, 0x7c,
	0x4a, 0x96, 0xa5, 0x49, 0x57, 0x69, 0x25, 0x4d, 0x7b, 0xd8, 0x44, 0xe0, 0x03, 0xd8, 0x5b, 0x99,
	0x51, 0x88, 0xd6, 0xa4, 0x4c, 0x19, 0xfe, 0x2a, 0x29, 0xbf, 0xa5, 0x4e, 0x25, 0x65, 0xb8, 0x1a,
	0x87, 0xbf, 0x00, 0x50, 0x8e, 0x29, 0x14, 0x29, 0x9f, 0x13, 0xc3, 0xe7, 0xf6, 0x7a, 0x34, 0x4a,
	0x1d, 0xab, 0xea, 0xd1, 0xf2, 0xdd, 0x78, 0xa4, 0x14, 0xf0, 0x06, 0xec, 0x54, 0xa7, 0x15, 0x8a,
	0x95, 0xc3, 0xa9, 0x59, 0xd2, 0xa9, 0x43, 0x1e, 0xc7, 0x63, 0x89, 0x97, 0x1e, 0x6d, 0x2d, 0x53,
	0x51, 0xe9, 0x52, 0xed, 0x66, 0x94, 0xd4, 0xb8, 0x4c, 0x24, 0x61, 0x75, 0x27, 0x6d, 0x96, 0x45,
	0xe5, 0x5e, 0x6e, 0x41, 0xc7, 0x68, 0x79, 0xc4, 0x94, 0x4d, 0x7f, 0xdd, 0x46, 0x97, 0x4c, 0x25,
	0xc9, 0x7a, 0xf9, 0x2c, 0x2c, 0x4b, 0x43, 0x4f, 0x2d, 0xc4, 0x6b, 0x4a, 0x63, 0xa4, 0xa0, 0x4a,
	0x69, 0x68, 0xae, 0xac, 0x64, 0x73, 0x6a, 0x21, 0x51, 0xf3, 0x59, 0x74, 0x61, 0xad, 0x6d, 0xa0,
	0xc3, 0xaa, 0xf1, 0xa2, 0x2b, 0x8a, 0xa9, 0x8c, 0xd2, 0x77, 0xba, 0xe2, 0x3e, 0x67, 0xac, 0x74,
	0x45, 0x11, 0x87, 0x97, 0xa0, 0x5d, 0xf9, 0xaf, 0x44, 0x0b, 0x65, 0xd4, 0x5b, 0x6d, 0xe6, 0x07,
	0x0d, 0x97, 0x2e, 0x00, 0x2f, 0x79, 0x16, 0x84, 0xdf, 0x83, 0x66, 0xf6, 0x97, 0x83, 0x96, 0x4a,
	0x7e, 0x64, 0x16, 0xbe, 0xc6, 0x4a, 0x6d, 0xce, 0x86, 0x3f, 0x83, 0x56, 0x31, 0x63, 0xd1, 0x9f,
	0x35, 0xd5, 0x65, 0xe5, 0x68, 0xa5, 0xba, 0x0a, 0x05, 0x3c, 0x00, 0x2d, 0x7d, 0x57, 0x90, 0x43,
	0xf7, 0x9f, 0xa6, 0x1a, 0xa2, 0x4d, 0xc5, 0xbc, 0xf3, 0x20, 0x02, 0xcd, 0xec, 0x86, 0x80, 0xfe,
	0x95, 0xd0, 0xf6, 0xa4, 0xa1, 0xc7, 0x60, 0xff, 0x14, 0xec, 0xdd, 0x12, 0x61, 0x8c, 0xf0, 0x5d,
	0xb0, 0x59, 0xcc, 0xed, 0xcd, 0xc0, 0xeb, 0x9f, 0x03, 0x78, 0x43, 0xe6, 0x64, 0x65, 0xd0, 0xaf,
	0xb0, 0xae, 0x7e, 0xfa, 0xe3, 0x07, 0x3f, 0x10, 0xf2, 0x16, 0xe0, 0x46, 0xe1, 0xd0, 0xc1, 0xc2,
	0x9d, 0xba, 0x11, 0x8b, 0x87, 0xf1, 0x3c, 0x0d, 0x1d, 0xc2, 0xbe, 0xe4, 0xee, 0x94, 0x84, 0x98,
	0x0f, 0x9d, 0x34, 0x98, 0x7b, 0x43, 0x3f, 0x1a, 0xea, 0xa3, 0x0d, 0xe5, 0x5d, 0xc6, 0x69, 0xa8,
	0x97, 0x6f, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x97, 0x2b, 0x7b, 0x8a, 0x02, 0x09, 0x00, 0x00,
}
