// Code generated by protoc-gen-go. DO NOT EDIT.
// source: opts/ps_opts_cli.proto

package opts

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GlobalCLIOptions struct {
	// @gotags: kong:"help='Enable debug output',short=d"
	Debug bool `protobuf:"varint,1,opt,name=debug,proto3" json:"debug,omitempty" kong:"help='Enable debug output',short=d"`
	// @gotags: kong:"help='Disable fancy output (like curl -s)',short=q"
	Quiet bool `protobuf:"varint,2,opt,name=quiet,proto3" json:"quiet,omitempty" kong:"help='Disable fancy output (like curl -s)',short=q"`
	// @gotags: kong:"help='Display plumber version'"
	Version bool `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty" kong:"help='Display plumber version'"`
	// @gotags: kong:"-"
	XFullCommand string `protobuf:"bytes,1000,opt,name=_full_command,json=FullCommand,proto3" json:"_full_command,omitempty" kong:"-"`
	// @gotags: kong:"-"
	XAction string `protobuf:"bytes,1001,opt,name=_action,json=Action,proto3" json:"_action,omitempty" kong:"-"`
	// @gotags: kong:"-"
	XBackend string `protobuf:"bytes,1002,opt,name=_backend,json=Backend,proto3" json:"_backend,omitempty" kong:"-"`
	// @gotags: kong:"-"
	XCommands            []string `protobuf:"bytes,1003,rep,name=_commands,json=Commands,proto3" json:"_commands,omitempty" kong:"-"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GlobalCLIOptions) Reset()         { *m = GlobalCLIOptions{} }
func (m *GlobalCLIOptions) String() string { return proto.CompactTextString(m) }
func (*GlobalCLIOptions) ProtoMessage()    {}
func (*GlobalCLIOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6a10a7c41f3437b, []int{0}
}

func (m *GlobalCLIOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GlobalCLIOptions.Unmarshal(m, b)
}
func (m *GlobalCLIOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GlobalCLIOptions.Marshal(b, m, deterministic)
}
func (m *GlobalCLIOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalCLIOptions.Merge(m, src)
}
func (m *GlobalCLIOptions) XXX_Size() int {
	return xxx_messageInfo_GlobalCLIOptions.Size(m)
}
func (m *GlobalCLIOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalCLIOptions.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalCLIOptions proto.InternalMessageInfo

func (m *GlobalCLIOptions) GetDebug() bool {
	if m != nil {
		return m.Debug
	}
	return false
}

func (m *GlobalCLIOptions) GetQuiet() bool {
	if m != nil {
		return m.Quiet
	}
	return false
}

func (m *GlobalCLIOptions) GetVersion() bool {
	if m != nil {
		return m.Version
	}
	return false
}

func (m *GlobalCLIOptions) GetXFullCommand() string {
	if m != nil {
		return m.XFullCommand
	}
	return ""
}

func (m *GlobalCLIOptions) GetXAction() string {
	if m != nil {
		return m.XAction
	}
	return ""
}

func (m *GlobalCLIOptions) GetXBackend() string {
	if m != nil {
		return m.XBackend
	}
	return ""
}

func (m *GlobalCLIOptions) GetXCommands() []string {
	if m != nil {
		return m.XCommands
	}
	return nil
}

// CLI options in plumber are derived 100% from the protobuf schemas.
// The CLIOptions type is used for populating base CLI options. Introducing
// a top-level CLI option should begin here (and trickle all the way down to
// any newly introduced types).
//
// For more info, check README_CLI.md
type CLIOptions struct {
	// @gotags: kong:"embed"
	Global *GlobalCLIOptions `protobuf:"bytes,1,opt,name=global,proto3" json:"global,omitempty" kong:"embed"`
	// @gotags: kong:"cmd,help='Read message(s) from messaging system'"
	Read *CLIReadOptions `protobuf:"bytes,2,opt,name=read,proto3" json:"read,omitempty" kong:"cmd,help='Read message(s) from messaging system'"`
	// @gotags: kong:"cmd,help='Write message(s) to messaging system'"
	Write *CLIWriteOptions `protobuf:"bytes,3,opt,name=write,proto3" json:"write,omitempty" kong:"cmd,help='Write message(s) to messaging system'"`
	// @gotags: kong:"-"
	Relay *RelayOptions `protobuf:"bytes,4,opt,name=relay,proto3" json:"relay,omitempty" kong:"-"` // Deprecated: Do not use.
	// @gotags: kong:"cmd,help='Run plumber in server mode'"
	Server *ServerOptions `protobuf:"bytes,7,opt,name=server,proto3" json:"server,omitempty" kong:"cmd,help='Run plumber in server mode'"`
	// @gotags: kong:"cmd,help='Manage plumber server'"
	Manage *ManageOptions `protobuf:"bytes,8,opt,name=manage,proto3" json:"manage,omitempty" kong:"cmd,help='Manage plumber server'"`
	// @gotags: kong:"cmd,help='Use plumber as a destination tunnel in Streamdal'"
	Tunnel *TunnelOptions `protobuf:"bytes,5,opt,name=tunnel,proto3" json:"tunnel,omitempty" kong:"cmd,help='Use plumber as a destination tunnel in Streamdal'"`
	// @gotags: kong:"cmd,help='Control your Streamdal resources via the public API'"
	Streamdal            *StreamdalOptions `protobuf:"bytes,6,opt,name=streamdal,proto3" json:"streamdal,omitempty" kong:"cmd,help='Control your Streamdal resources via the public API'"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CLIOptions) Reset()         { *m = CLIOptions{} }
func (m *CLIOptions) String() string { return proto.CompactTextString(m) }
func (*CLIOptions) ProtoMessage()    {}
func (*CLIOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6a10a7c41f3437b, []int{1}
}

func (m *CLIOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLIOptions.Unmarshal(m, b)
}
func (m *CLIOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLIOptions.Marshal(b, m, deterministic)
}
func (m *CLIOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLIOptions.Merge(m, src)
}
func (m *CLIOptions) XXX_Size() int {
	return xxx_messageInfo_CLIOptions.Size(m)
}
func (m *CLIOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_CLIOptions.DiscardUnknown(m)
}

var xxx_messageInfo_CLIOptions proto.InternalMessageInfo

func (m *CLIOptions) GetGlobal() *GlobalCLIOptions {
	if m != nil {
		return m.Global
	}
	return nil
}

func (m *CLIOptions) GetRead() *CLIReadOptions {
	if m != nil {
		return m.Read
	}
	return nil
}

func (m *CLIOptions) GetWrite() *CLIWriteOptions {
	if m != nil {
		return m.Write
	}
	return nil
}

// Deprecated: Do not use.
func (m *CLIOptions) GetRelay() *RelayOptions {
	if m != nil {
		return m.Relay
	}
	return nil
}

func (m *CLIOptions) GetServer() *ServerOptions {
	if m != nil {
		return m.Server
	}
	return nil
}

func (m *CLIOptions) GetManage() *ManageOptions {
	if m != nil {
		return m.Manage
	}
	return nil
}

func (m *CLIOptions) GetTunnel() *TunnelOptions {
	if m != nil {
		return m.Tunnel
	}
	return nil
}

func (m *CLIOptions) GetStreamdal() *StreamdalOptions {
	if m != nil {
		return m.Streamdal
	}
	return nil
}

func init() {
	proto.RegisterType((*GlobalCLIOptions)(nil), "protos.opts.GlobalCLIOptions")
	proto.RegisterType((*CLIOptions)(nil), "protos.opts.CLIOptions")
}

func init() { proto.RegisterFile("opts/ps_opts_cli.proto", fileDescriptor_e6a10a7c41f3437b) }

var fileDescriptor_e6a10a7c41f3437b = []byte{
	// 468 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xdf, 0x8a, 0xd4, 0x30,
	0x14, 0xc6, 0xe9, 0xce, 0x4e, 0x3b, 0x93, 0x22, 0x48, 0x10, 0xcd, 0x8e, 0x23, 0x0c, 0xeb, 0xcd,
	0xdc, 0xd8, 0x42, 0x17, 0x2f, 0x64, 0xaf, 0x9c, 0x01, 0x65, 0x61, 0x45, 0xe8, 0x0a, 0x82, 0x37,
	0x25, 0x6d, 0x63, 0xa7, 0x98, 0x36, 0x35, 0x49, 0x57, 0x7c, 0x31, 0xdf, 0xc3, 0xb7, 0xf0, 0xcf,
	0x4b, 0x48, 0x4e, 0xda, 0x3a, 0x1d, 0x7a, 0x55, 0xce, 0xf9, 0xbe, 0xdf, 0x49, 0xbf, 0xe4, 0xa0,
	0xc7, 0xa2, 0xd1, 0x2a, 0x6c, 0x54, 0x62, 0xbe, 0x49, 0xc6, 0xcb, 0xa0, 0x91, 0x42, 0x0b, 0xec,
	0xc3, 0x47, 0x05, 0xa6, 0xbd, 0xba, 0x18, 0x99, 0x2a, 0x5a, 0xd3, 0x82, 0x59, 0xdf, 0xea, 0xc9,
	0x48, 0x92, 0x8c, 0xe6, 0x9d, 0x40, 0x4e, 0x04, 0x4e, 0xbf, 0x77, 0xca, 0x78, 0x9a, 0x62, 0xf2,
	0x9e, 0xc9, 0x4e, 0x5a, 0x8f, 0x25, 0x2d, 0x19, 0xad, 0x72, 0xca, 0x27, 0x41, 0xdd, 0xd6, 0x35,
	0xe3, 0x93, 0xa7, 0x7d, 0x93, 0xa5, 0xee, 0x7e, 0xf0, 0xf2, 0xa7, 0x83, 0x1e, 0xbe, 0xe5, 0x22,
	0xa5, 0x7c, 0x7f, 0x7b, 0xf3, 0xbe, 0xd1, 0xa5, 0xa8, 0x15, 0x7e, 0x84, 0xe6, 0x39, 0x4b, 0xdb,
	0x82, 0x38, 0x1b, 0x67, 0xbb, 0x88, 0x6d, 0x61, 0xba, 0x5f, 0xdb, 0x92, 0x69, 0x72, 0x66, 0xbb,
	0x50, 0x60, 0x82, 0xbc, 0x7b, 0x26, 0x55, 0x29, 0x6a, 0x32, 0x83, 0x7e, 0x5f, 0xe2, 0xe7, 0xe8,
	0x41, 0xf2, 0xb9, 0xe5, 0x3c, 0xc9, 0x44, 0x55, 0xd1, 0x3a, 0x27, 0xbf, 0xbc, 0x8d, 0xb3, 0x5d,
	0xc6, 0xfe, 0x9b, 0x96, 0xf3, 0xbd, 0xed, 0x19, 0x3c, 0xa1, 0x99, 0x39, 0x96, 0xfc, 0xb6, 0xb2,
	0xfb, 0x1a, 0x4a, 0xbc, 0x42, 0x8b, 0x24, 0xa5, 0xd9, 0x17, 0x56, 0xe7, 0xe4, 0x8f, 0x95, 0xbc,
	0x9d, 0xad, 0xf1, 0x1a, 0x2d, 0xfb, 0xa9, 0x8a, 0xfc, 0xf5, 0x36, 0xb3, 0xed, 0x32, 0x5e, 0x74,
	0x23, 0xd5, 0xe5, 0x8f, 0x19, 0x42, 0x47, 0x69, 0x5e, 0x22, 0xb7, 0x80, 0x84, 0x10, 0xc7, 0x8f,
	0x9e, 0x05, 0x47, 0x8f, 0x17, 0x9c, 0x86, 0x8f, 0x3b, 0x33, 0x0e, 0xd1, 0xb9, 0x79, 0x2f, 0x48,
	0xeb, 0x47, 0x4f, 0x47, 0xd0, 0xfe, 0xf6, 0x26, 0x66, 0x34, 0xef, 0x11, 0x30, 0xe2, 0x08, 0xcd,
	0xe1, 0x66, 0xe1, 0x1e, 0xfc, 0x68, 0x7d, 0x4a, 0x7c, 0x34, 0x62, 0x8f, 0x58, 0x2b, 0xbe, 0x42,
	0x73, 0x78, 0x7b, 0x72, 0x0e, 0xcc, 0xc5, 0x88, 0x89, 0x8d, 0xd2, 0x01, 0xbb, 0x33, 0xe2, 0xc4,
	0xd6, 0x8b, 0x23, 0xe4, 0xda, 0xb5, 0x20, 0x1e, 0x50, 0xab, 0x11, 0x75, 0x07, 0xd2, 0x90, 0xc6,
	0x3a, 0x0d, 0x63, 0x17, 0x93, 0x2c, 0x26, 0x98, 0x77, 0x20, 0x0d, 0x8c, 0x75, 0x1a, 0xc6, 0x6e,
	0x11, 0x99, 0x4f, 0x30, 0x1f, 0x40, 0x1a, 0x18, 0xeb, 0xc4, 0xd7, 0x68, 0x39, 0xec, 0x25, 0x71,
	0x27, 0xee, 0xfb, 0xae, 0x57, 0x7b, 0xf2, 0xbf, 0x7f, 0x77, 0xfd, 0xe9, 0x55, 0x51, 0xea, 0x43,
	0x9b, 0x06, 0x99, 0xa8, 0xc2, 0x94, 0xea, 0xec, 0x90, 0x09, 0xd9, 0x84, 0x0d, 0x6f, 0xab, 0x94,
	0xc9, 0x17, 0x2a, 0x3b, 0xb0, 0x8a, 0xaa, 0x30, 0x6d, 0x4b, 0x9e, 0x87, 0x85, 0x08, 0xed, 0xe0,
	0xd0, 0x0c, 0x4e, 0x5d, 0x28, 0xae, 0xfe, 0x05, 0x00, 0x00, 0xff, 0xff, 0xb5, 0xa2, 0xfe, 0xbd,
	0xb3, 0x03, 0x00, 0x00,
}
