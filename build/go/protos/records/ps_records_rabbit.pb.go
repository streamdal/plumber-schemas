// Code generated by protoc-gen-go. DO NOT EDIT.
// source: records/ps_records_rabbit.proto

package records

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RabbitHeader struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RabbitHeader) Reset()         { *m = RabbitHeader{} }
func (m *RabbitHeader) String() string { return proto.CompactTextString(m) }
func (*RabbitHeader) ProtoMessage()    {}
func (*RabbitHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_d786d860e4447439, []int{0}
}

func (m *RabbitHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RabbitHeader.Unmarshal(m, b)
}
func (m *RabbitHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RabbitHeader.Marshal(b, m, deterministic)
}
func (m *RabbitHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RabbitHeader.Merge(m, src)
}
func (m *RabbitHeader) XXX_Size() int {
	return xxx_messageInfo_RabbitHeader.Size(m)
}
func (m *RabbitHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_RabbitHeader.DiscardUnknown(m)
}

var xxx_messageInfo_RabbitHeader proto.InternalMessageInfo

func (m *RabbitHeader) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *RabbitHeader) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Rabbit struct {
	Body                 []byte          `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	Timestamp            int64           `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Type                 string          `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Exchange             string          `protobuf:"bytes,4,opt,name=exchange,proto3" json:"exchange,omitempty"`
	RoutingKey           string          `protobuf:"bytes,5,opt,name=routing_key,json=routingKey,proto3" json:"routing_key,omitempty"`
	ContentType          string          `protobuf:"bytes,6,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	ContentEncoding      string          `protobuf:"bytes,7,opt,name=content_encoding,json=contentEncoding,proto3" json:"content_encoding,omitempty"`
	Priority             int32           `protobuf:"varint,8,opt,name=priority,proto3" json:"priority,omitempty"`
	Expiration           string          `protobuf:"bytes,9,opt,name=expiration,proto3" json:"expiration,omitempty"`
	MessageId            string          `protobuf:"bytes,10,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	UserId               string          `protobuf:"bytes,11,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AppId                string          `protobuf:"bytes,12,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	ReplyTo              string          `protobuf:"bytes,13,opt,name=reply_to,json=replyTo,proto3" json:"reply_to,omitempty"`
	CorrelationId        string          `protobuf:"bytes,14,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	Headers              []*RabbitHeader `protobuf:"bytes,15,rep,name=headers,proto3" json:"headers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Rabbit) Reset()         { *m = Rabbit{} }
func (m *Rabbit) String() string { return proto.CompactTextString(m) }
func (*Rabbit) ProtoMessage()    {}
func (*Rabbit) Descriptor() ([]byte, []int) {
	return fileDescriptor_d786d860e4447439, []int{1}
}

func (m *Rabbit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Rabbit.Unmarshal(m, b)
}
func (m *Rabbit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Rabbit.Marshal(b, m, deterministic)
}
func (m *Rabbit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rabbit.Merge(m, src)
}
func (m *Rabbit) XXX_Size() int {
	return xxx_messageInfo_Rabbit.Size(m)
}
func (m *Rabbit) XXX_DiscardUnknown() {
	xxx_messageInfo_Rabbit.DiscardUnknown(m)
}

var xxx_messageInfo_Rabbit proto.InternalMessageInfo

func (m *Rabbit) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *Rabbit) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Rabbit) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Rabbit) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *Rabbit) GetRoutingKey() string {
	if m != nil {
		return m.RoutingKey
	}
	return ""
}

func (m *Rabbit) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *Rabbit) GetContentEncoding() string {
	if m != nil {
		return m.ContentEncoding
	}
	return ""
}

func (m *Rabbit) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *Rabbit) GetExpiration() string {
	if m != nil {
		return m.Expiration
	}
	return ""
}

func (m *Rabbit) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

func (m *Rabbit) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Rabbit) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *Rabbit) GetReplyTo() string {
	if m != nil {
		return m.ReplyTo
	}
	return ""
}

func (m *Rabbit) GetCorrelationId() string {
	if m != nil {
		return m.CorrelationId
	}
	return ""
}

func (m *Rabbit) GetHeaders() []*RabbitHeader {
	if m != nil {
		return m.Headers
	}
	return nil
}

func init() {
	proto.RegisterType((*RabbitHeader)(nil), "protos.records.RabbitHeader")
	proto.RegisterType((*Rabbit)(nil), "protos.records.Rabbit")
}

func init() { proto.RegisterFile("records/ps_records_rabbit.proto", fileDescriptor_d786d860e4447439) }

var fileDescriptor_d786d860e4447439 = []byte{
	// 415 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x92, 0x5f, 0x8b, 0xd4, 0x30,
	0x14, 0xc5, 0x59, 0xbb, 0xd3, 0x99, 0xb9, 0x33, 0x3b, 0xbb, 0x04, 0xc5, 0x28, 0xab, 0x3b, 0x2e,
	0x08, 0xe3, 0x83, 0x2d, 0x28, 0xec, 0x93, 0xf8, 0x20, 0x08, 0x0e, 0xbe, 0x95, 0x7d, 0xf2, 0xa5,
	0xa4, 0xc9, 0xa5, 0x0d, 0xb6, 0x4d, 0x48, 0x52, 0xd9, 0x7e, 0x59, 0x3f, 0x8b, 0xe4, 0xb6, 0xfb,
	0xc7, 0xa7, 0xde, 0xf3, 0x3b, 0xf7, 0x9c, 0x86, 0xa6, 0x70, 0xe5, 0x50, 0x1a, 0xa7, 0x7c, 0x6e,
	0x7d, 0x39, 0x8f, 0xa5, 0x13, 0x55, 0xa5, 0x43, 0x66, 0x9d, 0x09, 0x86, 0xed, 0xe8, 0xe1, 0xb3,
	0xd9, 0xbc, 0xbe, 0x81, 0x6d, 0x41, 0xfe, 0x0f, 0x14, 0x0a, 0x1d, 0xbb, 0x80, 0xe4, 0x37, 0x8e,
	0xfc, 0x64, 0x7f, 0x72, 0x58, 0x17, 0x71, 0x64, 0xcf, 0x61, 0xf1, 0x47, 0xb4, 0x03, 0xf2, 0x67,
	0xc4, 0x26, 0x71, 0xfd, 0x37, 0x81, 0x74, 0x0a, 0x32, 0x06, 0xa7, 0x95, 0x51, 0x53, 0x66, 0x5b,
	0xd0, 0xcc, 0x2e, 0x61, 0x1d, 0x74, 0x87, 0x3e, 0x88, 0xce, 0x52, 0x30, 0x29, 0x1e, 0x41, 0x4c,
	0x84, 0xd1, 0x22, 0x4f, 0xa8, 0x91, 0x66, 0xf6, 0x1a, 0x56, 0x78, 0x27, 0x1b, 0xd1, 0xd7, 0xc8,
	0x4f, 0x89, 0x3f, 0x68, 0x76, 0x05, 0x1b, 0x67, 0x86, 0xa0, 0xfb, 0xba, 0x8c, 0x87, 0x5b, 0x90,
	0x0d, 0x33, 0xfa, 0x89, 0x23, 0x7b, 0x07, 0x5b, 0x69, 0xfa, 0x80, 0x7d, 0x28, 0xa9, 0x38, 0xa5,
	0x8d, 0xcd, 0xcc, 0x6e, 0x63, 0xff, 0x07, 0xb8, 0xb8, 0x5f, 0xc1, 0x5e, 0x1a, 0xa5, 0xfb, 0x9a,
	0x2f, 0x69, 0xed, 0x7c, 0xe6, 0xdf, 0x67, 0x1c, 0x8f, 0x62, 0x9d, 0x36, 0x4e, 0x87, 0x91, 0xaf,
	0xf6, 0x27, 0x87, 0x45, 0xf1, 0xa0, 0xd9, 0x5b, 0x00, 0xbc, 0xb3, 0xda, 0x89, 0xa0, 0x4d, 0xcf,
	0xd7, 0xd3, 0x49, 0x1e, 0x09, 0x7b, 0x03, 0xd0, 0xa1, 0xf7, 0xa2, 0xc6, 0x52, 0x2b, 0x0e, 0xe4,
	0xaf, 0x67, 0x72, 0x54, 0xec, 0x25, 0x2c, 0x07, 0x8f, 0x2e, 0x7a, 0x1b, 0xf2, 0xd2, 0x28, 0x8f,
	0x8a, 0xbd, 0x80, 0x54, 0x58, 0x1b, 0xf9, 0x76, 0xfa, 0xcc, 0xc2, 0xda, 0xa3, 0x62, 0xaf, 0x60,
	0xe5, 0xd0, 0xb6, 0x63, 0x19, 0x0c, 0x3f, 0x23, 0x63, 0x49, 0xfa, 0xd6, 0xb0, 0xf7, 0xb0, 0x93,
	0xc6, 0x39, 0x6c, 0xe9, 0xc5, 0x31, 0xb9, 0xa3, 0x85, 0xb3, 0x27, 0xf4, 0xa8, 0xd8, 0x0d, 0x2c,
	0x1b, 0xba, 0x5a, 0xcf, 0xcf, 0xf7, 0xc9, 0x61, 0xf3, 0xe9, 0x32, 0xfb, 0xff, 0x17, 0xc8, 0x9e,
	0xde, 0x7f, 0x71, 0xbf, 0xfc, 0xed, 0xeb, 0xaf, 0x2f, 0xb5, 0x0e, 0xcd, 0x50, 0x65, 0xd2, 0x74,
	0x79, 0x25, 0x82, 0x6c, 0xa4, 0x71, 0x36, 0xb7, 0xed, 0xd0, 0x55, 0xe8, 0x3e, 0x7a, 0xd9, 0x60,
	0x27, 0x7c, 0x5e, 0x0d, 0xba, 0x55, 0x79, 0x6d, 0xf2, 0xa9, 0x35, 0x9f, 0x5b, 0xab, 0x94, 0xf4,
	0xe7, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x30, 0x1b, 0xbb, 0xe5, 0x92, 0x02, 0x00, 0x00,
}
