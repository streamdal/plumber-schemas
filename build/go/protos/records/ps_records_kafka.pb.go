// Code generated by protoc-gen-go. DO NOT EDIT.
// source: records/ps_records_kafka.proto

package records

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type KafkaHeader struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KafkaHeader) Reset()         { *m = KafkaHeader{} }
func (m *KafkaHeader) String() string { return proto.CompactTextString(m) }
func (*KafkaHeader) ProtoMessage()    {}
func (*KafkaHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_47b9f8fc5ac029c9, []int{0}
}

func (m *KafkaHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KafkaHeader.Unmarshal(m, b)
}
func (m *KafkaHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KafkaHeader.Marshal(b, m, deterministic)
}
func (m *KafkaHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KafkaHeader.Merge(m, src)
}
func (m *KafkaHeader) XXX_Size() int {
	return xxx_messageInfo_KafkaHeader.Size(m)
}
func (m *KafkaHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_KafkaHeader.DiscardUnknown(m)
}

var xxx_messageInfo_KafkaHeader proto.InternalMessageInfo

func (m *KafkaHeader) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KafkaHeader) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Kafka struct {
	Topic                string         `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Key                  []byte         `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value                []byte         `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Timestamp            int64          `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Offset               int64          `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	Partition            int32          `protobuf:"varint,6,opt,name=partition,proto3" json:"partition,omitempty"`
	Headers              []*KafkaHeader `protobuf:"bytes,7,rep,name=headers,proto3" json:"headers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Kafka) Reset()         { *m = Kafka{} }
func (m *Kafka) String() string { return proto.CompactTextString(m) }
func (*Kafka) ProtoMessage()    {}
func (*Kafka) Descriptor() ([]byte, []int) {
	return fileDescriptor_47b9f8fc5ac029c9, []int{1}
}

func (m *Kafka) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Kafka.Unmarshal(m, b)
}
func (m *Kafka) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Kafka.Marshal(b, m, deterministic)
}
func (m *Kafka) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Kafka.Merge(m, src)
}
func (m *Kafka) XXX_Size() int {
	return xxx_messageInfo_Kafka.Size(m)
}
func (m *Kafka) XXX_DiscardUnknown() {
	xxx_messageInfo_Kafka.DiscardUnknown(m)
}

var xxx_messageInfo_Kafka proto.InternalMessageInfo

func (m *Kafka) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Kafka) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Kafka) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Kafka) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Kafka) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *Kafka) GetPartition() int32 {
	if m != nil {
		return m.Partition
	}
	return 0
}

func (m *Kafka) GetHeaders() []*KafkaHeader {
	if m != nil {
		return m.Headers
	}
	return nil
}

func init() {
	proto.RegisterType((*KafkaHeader)(nil), "protos.records.KafkaHeader")
	proto.RegisterType((*Kafka)(nil), "protos.records.Kafka")
}

func init() { proto.RegisterFile("records/ps_records_kafka.proto", fileDescriptor_47b9f8fc5ac029c9) }

var fileDescriptor_47b9f8fc5ac029c9 = []byte{
	// 263 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x8f, 0xc1, 0x4a, 0xf4, 0x30,
	0x1c, 0xc4, 0xc9, 0xd7, 0xaf, 0x5d, 0x36, 0x2b, 0x22, 0x41, 0x24, 0xa0, 0x48, 0xd9, 0x53, 0x2f,
	0x26, 0xa0, 0xec, 0x4d, 0x3c, 0x78, 0x12, 0xbc, 0xf5, 0xe8, 0x65, 0x49, 0xd2, 0x74, 0x1b, 0xda,
	0x98, 0x90, 0xa4, 0x82, 0x6f, 0xe9, 0x23, 0x49, 0xd2, 0x2c, 0xab, 0x9e, 0xf2, 0xff, 0xcd, 0x64,
	0x06, 0x06, 0xde, 0x3a, 0x29, 0x8c, 0xeb, 0x3c, 0xb5, 0x7e, 0x9f, 0xcf, 0xfd, 0xc8, 0xfa, 0x91,
	0x11, 0xeb, 0x4c, 0x30, 0xe8, 0x3c, 0x3d, 0x9e, 0x64, 0x6f, 0xbb, 0x83, 0x9b, 0xd7, 0x68, 0xbf,
	0x48, 0xd6, 0x49, 0x87, 0x2e, 0x60, 0x31, 0xca, 0x4f, 0x0c, 0x6a, 0xd0, 0xac, 0xdb, 0x78, 0xa2,
	0x4b, 0x58, 0x7e, 0xb0, 0x69, 0x96, 0xf8, 0x5f, 0xd2, 0x16, 0xd8, 0x7e, 0x01, 0x58, 0xa6, 0x5c,
	0xf4, 0x83, 0xb1, 0x4a, 0xe4, 0xcc, 0x02, 0xc7, 0x9e, 0x98, 0x39, 0xfb, 0xd3, 0x53, 0x24, 0x6d,
	0x01, 0x74, 0x03, 0xd7, 0x41, 0x69, 0xe9, 0x03, 0xd3, 0x16, 0xff, 0xaf, 0x41, 0x53, 0xb4, 0x27,
	0x01, 0x5d, 0xc1, 0xca, 0xf4, 0xbd, 0x97, 0x01, 0x97, 0xc9, 0xca, 0x14, 0x53, 0x96, 0xb9, 0xa0,
	0x82, 0x32, 0xef, 0xb8, 0xaa, 0x41, 0x53, 0xb6, 0x27, 0x01, 0xed, 0xe0, 0x6a, 0x48, 0x6b, 0x3c,
	0x5e, 0xd5, 0x45, 0xb3, 0xb9, 0xbf, 0x26, 0xbf, 0x47, 0x93, 0x1f, 0x8b, 0xdb, 0xe3, 0xdf, 0xe7,
	0xa7, 0xb7, 0xc7, 0x83, 0x0a, 0xc3, 0xcc, 0x89, 0x30, 0x9a, 0x72, 0x16, 0xc4, 0x20, 0x8c, 0xb3,
	0xd4, 0x4e, 0xb3, 0xe6, 0xd2, 0xdd, 0x79, 0x31, 0x48, 0xcd, 0x3c, 0xe5, 0xb3, 0x9a, 0x3a, 0x7a,
	0x30, 0x74, 0x29, 0xa5, 0xb9, 0x94, 0x57, 0x89, 0x1f, 0xbe, 0x03, 0x00, 0x00, 0xff, 0xff, 0x79,
	0x84, 0x8b, 0x95, 0x82, 0x01, 0x00, 0x00,
}
