// Code generated by protoc-gen-go. DO NOT EDIT.
// source: records/ps_records_activemq.proto

package records

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ActiveMQ struct {
	Destination          string   `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	ContentType          string   `protobuf:"bytes,2,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	SubscriptionId       string   `protobuf:"bytes,3,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	Timestamp            int64    `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Value                []byte   `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActiveMQ) Reset()         { *m = ActiveMQ{} }
func (m *ActiveMQ) String() string { return proto.CompactTextString(m) }
func (*ActiveMQ) ProtoMessage()    {}
func (*ActiveMQ) Descriptor() ([]byte, []int) {
	return fileDescriptor_8000da1c2b98da6e, []int{0}
}

func (m *ActiveMQ) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ActiveMQ.Unmarshal(m, b)
}
func (m *ActiveMQ) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ActiveMQ.Marshal(b, m, deterministic)
}
func (m *ActiveMQ) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActiveMQ.Merge(m, src)
}
func (m *ActiveMQ) XXX_Size() int {
	return xxx_messageInfo_ActiveMQ.Size(m)
}
func (m *ActiveMQ) XXX_DiscardUnknown() {
	xxx_messageInfo_ActiveMQ.DiscardUnknown(m)
}

var xxx_messageInfo_ActiveMQ proto.InternalMessageInfo

func (m *ActiveMQ) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *ActiveMQ) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *ActiveMQ) GetSubscriptionId() string {
	if m != nil {
		return m.SubscriptionId
	}
	return ""
}

func (m *ActiveMQ) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ActiveMQ) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*ActiveMQ)(nil), "protos.records.ActiveMQ")
}

func init() { proto.RegisterFile("records/ps_records_activemq.proto", fileDescriptor_8000da1c2b98da6e) }

var fileDescriptor_8000da1c2b98da6e = []byte{
	// 237 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8f, 0x3d, 0x4f, 0xc3, 0x30,
	0x10, 0x86, 0x65, 0x4a, 0x11, 0x35, 0x55, 0x91, 0x2c, 0x06, 0x0f, 0x0c, 0x29, 0x0b, 0x5d, 0x88,
	0x07, 0x56, 0x84, 0x04, 0x1b, 0x03, 0x03, 0x11, 0x13, 0x4b, 0xe4, 0x8f, 0x53, 0x63, 0x29, 0x8e,
	0x8d, 0xef, 0x5c, 0xa9, 0xff, 0x89, 0x1f, 0x89, 0x48, 0x22, 0xd1, 0xe9, 0xee, 0x7d, 0xee, 0xb9,
	0xe1, 0xe5, 0xdb, 0x0c, 0x36, 0x66, 0x87, 0x2a, 0x61, 0x3b, 0xaf, 0xad, 0xb6, 0xe4, 0x0f, 0x10,
	0xbe, 0xeb, 0x94, 0x23, 0x45, 0xb1, 0x19, 0x07, 0xd6, 0xf3, 0xf9, 0xee, 0x87, 0xf1, 0xcb, 0x97,
	0x51, 0x79, 0xff, 0x10, 0x15, 0xbf, 0x72, 0x80, 0xe4, 0x07, 0x4d, 0x3e, 0x0e, 0x92, 0x55, 0x6c,
	0xb7, 0x6a, 0x4e, 0x91, 0xd8, 0xf2, 0xb5, 0x8d, 0x03, 0xc1, 0x40, 0x2d, 0x1d, 0x13, 0xc8, 0xb3,
	0x49, 0x99, 0xd9, 0xe7, 0x31, 0x81, 0xb8, 0xe7, 0xd7, 0x58, 0x0c, 0xda, 0xec, 0xd3, 0xdf, 0x4b,
	0xeb, 0x9d, 0x5c, 0x8c, 0xd6, 0xe6, 0x14, 0xbf, 0x39, 0x71, 0xcb, 0x57, 0xe4, 0x03, 0x20, 0xe9,
	0x90, 0xe4, 0x79, 0xc5, 0x76, 0x8b, 0xe6, 0x1f, 0x88, 0x1b, 0xbe, 0x3c, 0xe8, 0xbe, 0x80, 0x5c,
	0x56, 0x6c, 0xb7, 0x6e, 0xa6, 0xf0, 0xfa, 0xfc, 0xf5, 0xb4, 0xf7, 0xd4, 0x15, 0x53, 0xdb, 0x18,
	0x94, 0xd1, 0x64, 0x3b, 0x1b, 0x73, 0x52, 0xa9, 0x2f, 0xc1, 0x40, 0x7e, 0x40, 0xdb, 0x41, 0xd0,
	0xa8, 0x4c, 0xf1, 0xbd, 0x53, 0xfb, 0xa8, 0xa6, 0xba, 0x6a, 0xae, 0x6b, 0x2e, 0xc6, 0xfc, 0xf8,
	0x1b, 0x00, 0x00, 0xff, 0xff, 0xcb, 0x13, 0x81, 0x77, 0x2a, 0x01, 0x00, 0x00,
}
