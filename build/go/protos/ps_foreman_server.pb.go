// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ps_foreman_server.proto

package protos

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PlumberInfo struct {
	TeamId               string   `protobuf:"bytes,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	ClusterId            string   `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlumberInfo) Reset()         { *m = PlumberInfo{} }
func (m *PlumberInfo) String() string { return proto.CompactTextString(m) }
func (*PlumberInfo) ProtoMessage()    {}
func (*PlumberInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f45a754b4dc96eaa, []int{0}
}

func (m *PlumberInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlumberInfo.Unmarshal(m, b)
}
func (m *PlumberInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlumberInfo.Marshal(b, m, deterministic)
}
func (m *PlumberInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlumberInfo.Merge(m, src)
}
func (m *PlumberInfo) XXX_Size() int {
	return xxx_messageInfo_PlumberInfo.Size(m)
}
func (m *PlumberInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PlumberInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PlumberInfo proto.InternalMessageInfo

func (m *PlumberInfo) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

func (m *PlumberInfo) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

type ListPlumbersRequest struct {
	// Authenticate between ui-bff and Foreman
	AuthToken string `protobuf:"bytes,1,opt,name=auth_token,json=authToken,proto3" json:"auth_token,omitempty"`
	// Team ID to list connected plumbers for
	TeamId               string   `protobuf:"bytes,2,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListPlumbersRequest) Reset()         { *m = ListPlumbersRequest{} }
func (m *ListPlumbersRequest) String() string { return proto.CompactTextString(m) }
func (*ListPlumbersRequest) ProtoMessage()    {}
func (*ListPlumbersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f45a754b4dc96eaa, []int{1}
}

func (m *ListPlumbersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPlumbersRequest.Unmarshal(m, b)
}
func (m *ListPlumbersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPlumbersRequest.Marshal(b, m, deterministic)
}
func (m *ListPlumbersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPlumbersRequest.Merge(m, src)
}
func (m *ListPlumbersRequest) XXX_Size() int {
	return xxx_messageInfo_ListPlumbersRequest.Size(m)
}
func (m *ListPlumbersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPlumbersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListPlumbersRequest proto.InternalMessageInfo

func (m *ListPlumbersRequest) GetAuthToken() string {
	if m != nil {
		return m.AuthToken
	}
	return ""
}

func (m *ListPlumbersRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type ListPlumbersResponse struct {
	// List of plumbers
	Plumbers             []*PlumberInfo `protobuf:"bytes,1,rep,name=plumbers,proto3" json:"plumbers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ListPlumbersResponse) Reset()         { *m = ListPlumbersResponse{} }
func (m *ListPlumbersResponse) String() string { return proto.CompactTextString(m) }
func (*ListPlumbersResponse) ProtoMessage()    {}
func (*ListPlumbersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f45a754b4dc96eaa, []int{2}
}

func (m *ListPlumbersResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPlumbersResponse.Unmarshal(m, b)
}
func (m *ListPlumbersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPlumbersResponse.Marshal(b, m, deterministic)
}
func (m *ListPlumbersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPlumbersResponse.Merge(m, src)
}
func (m *ListPlumbersResponse) XXX_Size() int {
	return xxx_messageInfo_ListPlumbersResponse.Size(m)
}
func (m *ListPlumbersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPlumbersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListPlumbersResponse proto.InternalMessageInfo

func (m *ListPlumbersResponse) GetPlumbers() []*PlumberInfo {
	if m != nil {
		return m.Plumbers
	}
	return nil
}

func init() {
	proto.RegisterType((*PlumberInfo)(nil), "protos.PlumberInfo")
	proto.RegisterType((*ListPlumbersRequest)(nil), "protos.ListPlumbersRequest")
	proto.RegisterType((*ListPlumbersResponse)(nil), "protos.ListPlumbersResponse")
}

func init() { proto.RegisterFile("ps_foreman_server.proto", fileDescriptor_f45a754b4dc96eaa) }

var fileDescriptor_f45a754b4dc96eaa = []byte{
	// 625 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x96, 0x5f, 0x6f, 0xd3, 0x30,
	0x14, 0xc5, 0xd5, 0x21, 0x8d, 0xd5, 0x5d, 0xc7, 0xc8, 0x90, 0x5a, 0xba, 0x8e, 0x95, 0x3e, 0xed,
	0x85, 0x46, 0x1a, 0x88, 0x37, 0x24, 0x46, 0x61, 0x51, 0xa5, 0xa1, 0xa1, 0xae, 0x93, 0x10, 0x2f,
	0x51, 0x9a, 0xde, 0xad, 0x15, 0x49, 0x6c, 0x62, 0x07, 0x89, 0xef, 0xc2, 0x87, 0x45, 0xc9, 0x75,
	0xea, 0x7f, 0x29, 0x4f, 0x55, 0xce, 0xb9, 0xf7, 0x97, 0x13, 0x5f, 0xc7, 0x29, 0xe9, 0x31, 0x1e,
	0x3e, 0xd0, 0x1c, 0xd2, 0x28, 0x0b, 0x39, 0xe4, 0xbf, 0x21, 0x9f, 0xb0, 0x9c, 0x0a, 0xea, 0xed,
	0x57, 0x3f, 0x7c, 0x70, 0xcc, 0x78, 0x18, 0xd3, 0x2c, 0x83, 0x58, 0xa0, 0x33, 0x38, 0x62, 0x3c,
	0xcc, 0x21, 0x89, 0xfe, 0xc8, 0xeb, 0x67, 0x8c, 0x1b, 0xad, 0x95, 0x20, 0x8a, 0x2c, 0x83, 0x04,
	0x85, 0xf1, 0x17, 0xd2, 0xf9, 0x96, 0x14, 0xe9, 0x12, 0xf2, 0x59, 0xf6, 0x40, 0xbd, 0x1e, 0x79,
	0x2a, 0x20, 0x4a, 0xc3, 0xcd, 0xaa, 0xdf, 0x1a, 0xb5, 0x2e, 0xda, 0xf3, 0xfd, 0xf2, 0x72, 0xb6,
	0xf2, 0xce, 0x08, 0x89, 0x93, 0x82, 0x0b, 0xc8, 0x4b, 0x6f, 0xaf, 0xf2, 0xda, 0x52, 0x99, 0xad,
	0xc6, 0x5f, 0xc9, 0xc9, 0xcd, 0x86, 0x0b, 0x89, 0xe2, 0x73, 0xf8, 0x55, 0x00, 0x17, 0x65, 0x57,
	0x54, 0x88, 0x75, 0x28, 0xe8, 0x4f, 0xc8, 0x24, 0xb1, 0x5d, 0x2a, 0x8b, 0x52, 0xd0, 0xef, 0xb6,
	0xa7, 0xdf, 0x6d, 0x1c, 0x90, 0x17, 0x26, 0x8e, 0x33, 0x9a, 0x71, 0xf0, 0x7c, 0x72, 0xc0, 0xa4,
	0xd6, 0x6f, 0x8d, 0x9e, 0x5c, 0x74, 0x2e, 0x4f, 0xf0, 0x39, 0xf8, 0x44, 0x7b, 0x8a, 0xf9, 0xb6,
	0xe8, 0xf2, 0x6f, 0x97, 0x74, 0xaf, 0x71, 0x0d, 0xef, 0xaa, 0x75, 0xf0, 0x66, 0xe4, 0x50, 0x47,
	0x7b, 0xa7, 0x35, 0xa0, 0x21, 0xff, 0x60, 0xd8, 0x6c, 0xca, 0x34, 0xdf, 0xc9, 0xf3, 0x00, 0xc4,
	0x55, 0x92, 0x4c, 0x71, 0x08, 0x1b, 0x9a, 0x71, 0x6f, 0x54, 0xb7, 0x38, 0x56, 0x0d, 0x7d, 0xfd,
	0x9f, 0x0a, 0x49, 0xbe, 0x21, 0xdd, 0x00, 0x84, 0x72, 0xbc, 0xa1, 0xd6, 0xa3, 0xe4, 0x9a, 0x78,
	0xb6, 0xc3, 0x95, 0xb4, 0x7b, 0x72, 0x3c, 0xcd, 0x21, 0x12, 0xa0, 0x01, 0xcf, 0xeb, 0x16, 0xdb,
	0xa9, 0x99, 0xa3, 0xdd, 0x05, 0x12, 0x7b, 0x4b, 0x8e, 0x16, 0xc0, 0xf5, 0x94, 0xdb, 0x1c, 0xa6,
	0x5e, 0x23, 0x5f, 0xed, 0xb2, 0x55, 0xce, 0x7b, 0xb6, 0xda, 0x91, 0xd3, 0x76, 0x9c, 0x9c, 0x6e,
	0x81, 0xc2, 0x7e, 0x86, 0x04, 0x9a, 0xb1, 0xb6, 0xe3, 0x60, 0xdd, 0x02, 0x89, 0x9d, 0x91, 0x43,
	0x1c, 0xe0, 0xbc, 0x7c, 0xe1, 0xb4, 0x8d, 0xa4, 0xab, 0xce, 0x46, 0x32, 0x4d, 0x89, 0xfa, 0x40,
	0x0e, 0x02, 0x10, 0x95, 0xe8, 0xf5, 0xb4, 0xca, 0x4a, 0xa9, 0x11, 0x7d, 0xd7, 0x90, 0xed, 0xd7,
	0xa4, 0x83, 0x43, 0x42, 0xc2, 0xc0, 0x9c, 0x9c, 0x01, 0x39, 0x6d, 0xf4, 0x14, 0x07, 0x17, 0xd1,
	0xe2, 0x68, 0xa2, 0xc3, 0x31, 0x3c, 0xc5, 0x99, 0x03, 0x2f, 0x52, 0x9b, 0xa3, 0x89, 0x0e, 0xc7,
	0xf0, 0x24, 0xe7, 0x23, 0x69, 0xdf, 0x09, 0xca, 0x90, 0xb2, 0x7d, 0xfc, 0xad, 0x54, 0x33, 0x5e,
	0x36, 0x38, 0x2a, 0x09, 0xce, 0xcf, 0x4a, 0xa2, 0x89, 0x4e, 0x12, 0xc3, 0x53, 0x49, 0x02, 0x10,
	0x8b, 0xea, 0xe0, 0xf4, 0xf4, 0x41, 0xa0, 0xe4, 0x24, 0xd1, 0x1c, 0xe3, 0x8d, 0xbe, 0x4a, 0x12,
	0xd4, 0xb9, 0x67, 0xed, 0x08, 0x29, 0x37, 0xbd, 0xd1, 0xba, 0xab, 0xf6, 0x1e, 0x0e, 0x50, 0x46,
	0xb2, 0xc6, 0x6a, 0xa6, 0x1a, 0x36, 0x9b, 0x12, 0x35, 0x25, 0xa4, 0x5c, 0x37, 0x09, 0x32, 0xd6,
	0xd2, 0xc4, 0x0c, 0x9a, 0x2c, 0x95, 0x07, 0x07, 0x68, 0xe7, 0xd1, 0x55, 0x27, 0x8f, 0x69, 0x2a,
	0x14, 0xee, 0x29, 0x1b, 0xa5, 0xab, 0x0e, 0xca, 0x34, 0x15, 0x0a, 0x87, 0x69, 0xa3, 0x74, 0xd5,
	0x41, 0x99, 0xa6, 0x3a, 0x43, 0x02, 0x10, 0xf8, 0x09, 0xb9, 0x65, 0x78, 0xd2, 0x9f, 0x6b, 0x33,
	0x32, 0x1c, 0xe7, 0x0c, 0x71, 0x0b, 0x10, 0xfb, 0xe9, 0xfd, 0x8f, 0x77, 0x8f, 0x1b, 0xb1, 0x2e,
	0x96, 0x93, 0x98, 0xa6, 0xfe, 0x32, 0x12, 0xf1, 0x3a, 0xa6, 0x39, 0xf3, 0xe5, 0xf7, 0xeb, 0x0d,
	0x8f, 0xd7, 0x90, 0x46, 0xdc, 0x5f, 0x16, 0x9b, 0x64, 0xe5, 0x3f, 0x52, 0x1f, 0x81, 0x4b, 0xfc,
	0x07, 0xf0, 0xf6, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x71, 0xb8, 0x8b, 0x00, 0x23, 0x08, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ForemanServerClient is the client API for ForemanServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ForemanServerClient interface {
	// ListPlumbers is called by ui-bff, received by Foreman
	// It returns all connected plumber instances for a given team
	ListPlumbers(ctx context.Context, in *ListPlumbersRequest, opts ...grpc.CallOption) (*ListPlumbersResponse, error)
	// List configured/known connections
	GetAllConnections(ctx context.Context, in *GetAllConnectionsRequest, opts ...grpc.CallOption) (*GetAllConnectionsResponse, error)
	// Fetch a specific connection by ID
	GetConnection(ctx context.Context, in *GetConnectionRequest, opts ...grpc.CallOption) (*GetConnectionResponse, error)
	// Create a connection in plumber
	CreateConnection(ctx context.Context, in *CreateConnectionRequest, opts ...grpc.CallOption) (*CreateConnectionResponse, error)
	// Test a connection before saving its configuration
	TestConnection(ctx context.Context, in *TestConnectionRequest, opts ...grpc.CallOption) (*TestConnectionResponse, error)
	// Any active connections will be restarted
	UpdateConnection(ctx context.Context, in *UpdateConnectionRequest, opts ...grpc.CallOption) (*UpdateConnectionResponse, error)
	// If there are any active connections, delete will cause them to get closed
	DeleteConnection(ctx context.Context, in *DeleteConnectionRequest, opts ...grpc.CallOption) (*DeleteConnectionResponse, error)
	GetAllRelays(ctx context.Context, in *GetAllRelaysRequest, opts ...grpc.CallOption) (*GetAllRelaysResponse, error)
	GetRelay(ctx context.Context, in *GetRelayRequest, opts ...grpc.CallOption) (*GetRelayResponse, error)
	CreateRelay(ctx context.Context, in *CreateRelayRequest, opts ...grpc.CallOption) (*CreateRelayResponse, error)
	UpdateRelay(ctx context.Context, in *UpdateRelayRequest, opts ...grpc.CallOption) (*UpdateRelayResponse, error)
	ResumeRelay(ctx context.Context, in *ResumeRelayRequest, opts ...grpc.CallOption) (*ResumeRelayResponse, error)
	StopRelay(ctx context.Context, in *StopRelayRequest, opts ...grpc.CallOption) (*StopRelayResponse, error)
	DeleteRelay(ctx context.Context, in *DeleteRelayRequest, opts ...grpc.CallOption) (*DeleteRelayResponse, error)
	GetTunnel(ctx context.Context, in *GetTunnelRequest, opts ...grpc.CallOption) (*GetTunnelResponse, error)
	GetAllTunnels(ctx context.Context, in *GetAllTunnelsRequest, opts ...grpc.CallOption) (*GetAllTunnelsResponse, error)
	CreateTunnel(ctx context.Context, in *CreateTunnelRequest, opts ...grpc.CallOption) (*CreateTunnelResponse, error)
	StopTunnel(ctx context.Context, in *StopTunnelRequest, opts ...grpc.CallOption) (*StopTunnelResponse, error)
	ResumeTunnel(ctx context.Context, in *ResumeTunnelRequest, opts ...grpc.CallOption) (*ResumeTunnelResponse, error)
	UpdateTunnel(ctx context.Context, in *UpdateTunnelRequest, opts ...grpc.CallOption) (*UpdateTunnelResponse, error)
	DeleteTunnel(ctx context.Context, in *DeleteTunnelRequest, opts ...grpc.CallOption) (*DeleteTunnelResponse, error)
	GetServerOptions(ctx context.Context, in *GetServerOptionsRequest, opts ...grpc.CallOption) (*GetServerOptionsResponse, error)
}

type foremanServerClient struct {
	cc *grpc.ClientConn
}

func NewForemanServerClient(cc *grpc.ClientConn) ForemanServerClient {
	return &foremanServerClient{cc}
}

func (c *foremanServerClient) ListPlumbers(ctx context.Context, in *ListPlumbersRequest, opts ...grpc.CallOption) (*ListPlumbersResponse, error) {
	out := new(ListPlumbersResponse)
	err := c.cc.Invoke(ctx, "/protos.ForemanServer/ListPlumbers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foremanServerClient) GetAllConnections(ctx context.Context, in *GetAllConnectionsRequest, opts ...grpc.CallOption) (*GetAllConnectionsResponse, error) {
	out := new(GetAllConnectionsResponse)
	err := c.cc.Invoke(ctx, "/protos.ForemanServer/GetAllConnections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foremanServerClient) GetConnection(ctx context.Context, in *GetConnectionRequest, opts ...grpc.CallOption) (*GetConnectionResponse, error) {
	out := new(GetConnectionResponse)
	err := c.cc.Invoke(ctx, "/protos.ForemanServer/GetConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foremanServerClient) CreateConnection(ctx context.Context, in *CreateConnectionRequest, opts ...grpc.CallOption) (*CreateConnectionResponse, error) {
	out := new(CreateConnectionResponse)
	err := c.cc.Invoke(ctx, "/protos.ForemanServer/CreateConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foremanServerClient) TestConnection(ctx context.Context, in *TestConnectionRequest, opts ...grpc.CallOption) (*TestConnectionResponse, error) {
	out := new(TestConnectionResponse)
	err := c.cc.Invoke(ctx, "/protos.ForemanServer/TestConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foremanServerClient) UpdateConnection(ctx context.Context, in *UpdateConnectionRequest, opts ...grpc.CallOption) (*UpdateConnectionResponse, error) {
	out := new(UpdateConnectionResponse)
	err := c.cc.Invoke(ctx, "/protos.ForemanServer/UpdateConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foremanServerClient) DeleteConnection(ctx context.Context, in *DeleteConnectionRequest, opts ...grpc.CallOption) (*DeleteConnectionResponse, error) {
	out := new(DeleteConnectionResponse)
	err := c.cc.Invoke(ctx, "/protos.ForemanServer/DeleteConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foremanServerClient) GetAllRelays(ctx context.Context, in *GetAllRelaysRequest, opts ...grpc.CallOption) (*GetAllRelaysResponse, error) {
	out := new(GetAllRelaysResponse)
	err := c.cc.Invoke(ctx, "/protos.ForemanServer/GetAllRelays", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foremanServerClient) GetRelay(ctx context.Context, in *GetRelayRequest, opts ...grpc.CallOption) (*GetRelayResponse, error) {
	out := new(GetRelayResponse)
	err := c.cc.Invoke(ctx, "/protos.ForemanServer/GetRelay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foremanServerClient) CreateRelay(ctx context.Context, in *CreateRelayRequest, opts ...grpc.CallOption) (*CreateRelayResponse, error) {
	out := new(CreateRelayResponse)
	err := c.cc.Invoke(ctx, "/protos.ForemanServer/CreateRelay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foremanServerClient) UpdateRelay(ctx context.Context, in *UpdateRelayRequest, opts ...grpc.CallOption) (*UpdateRelayResponse, error) {
	out := new(UpdateRelayResponse)
	err := c.cc.Invoke(ctx, "/protos.ForemanServer/UpdateRelay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foremanServerClient) ResumeRelay(ctx context.Context, in *ResumeRelayRequest, opts ...grpc.CallOption) (*ResumeRelayResponse, error) {
	out := new(ResumeRelayResponse)
	err := c.cc.Invoke(ctx, "/protos.ForemanServer/ResumeRelay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foremanServerClient) StopRelay(ctx context.Context, in *StopRelayRequest, opts ...grpc.CallOption) (*StopRelayResponse, error) {
	out := new(StopRelayResponse)
	err := c.cc.Invoke(ctx, "/protos.ForemanServer/StopRelay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foremanServerClient) DeleteRelay(ctx context.Context, in *DeleteRelayRequest, opts ...grpc.CallOption) (*DeleteRelayResponse, error) {
	out := new(DeleteRelayResponse)
	err := c.cc.Invoke(ctx, "/protos.ForemanServer/DeleteRelay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foremanServerClient) GetTunnel(ctx context.Context, in *GetTunnelRequest, opts ...grpc.CallOption) (*GetTunnelResponse, error) {
	out := new(GetTunnelResponse)
	err := c.cc.Invoke(ctx, "/protos.ForemanServer/GetTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foremanServerClient) GetAllTunnels(ctx context.Context, in *GetAllTunnelsRequest, opts ...grpc.CallOption) (*GetAllTunnelsResponse, error) {
	out := new(GetAllTunnelsResponse)
	err := c.cc.Invoke(ctx, "/protos.ForemanServer/GetAllTunnels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foremanServerClient) CreateTunnel(ctx context.Context, in *CreateTunnelRequest, opts ...grpc.CallOption) (*CreateTunnelResponse, error) {
	out := new(CreateTunnelResponse)
	err := c.cc.Invoke(ctx, "/protos.ForemanServer/CreateTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foremanServerClient) StopTunnel(ctx context.Context, in *StopTunnelRequest, opts ...grpc.CallOption) (*StopTunnelResponse, error) {
	out := new(StopTunnelResponse)
	err := c.cc.Invoke(ctx, "/protos.ForemanServer/StopTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foremanServerClient) ResumeTunnel(ctx context.Context, in *ResumeTunnelRequest, opts ...grpc.CallOption) (*ResumeTunnelResponse, error) {
	out := new(ResumeTunnelResponse)
	err := c.cc.Invoke(ctx, "/protos.ForemanServer/ResumeTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foremanServerClient) UpdateTunnel(ctx context.Context, in *UpdateTunnelRequest, opts ...grpc.CallOption) (*UpdateTunnelResponse, error) {
	out := new(UpdateTunnelResponse)
	err := c.cc.Invoke(ctx, "/protos.ForemanServer/UpdateTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foremanServerClient) DeleteTunnel(ctx context.Context, in *DeleteTunnelRequest, opts ...grpc.CallOption) (*DeleteTunnelResponse, error) {
	out := new(DeleteTunnelResponse)
	err := c.cc.Invoke(ctx, "/protos.ForemanServer/DeleteTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foremanServerClient) GetServerOptions(ctx context.Context, in *GetServerOptionsRequest, opts ...grpc.CallOption) (*GetServerOptionsResponse, error) {
	out := new(GetServerOptionsResponse)
	err := c.cc.Invoke(ctx, "/protos.ForemanServer/GetServerOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ForemanServerServer is the server API for ForemanServer service.
type ForemanServerServer interface {
	// ListPlumbers is called by ui-bff, received by Foreman
	// It returns all connected plumber instances for a given team
	ListPlumbers(context.Context, *ListPlumbersRequest) (*ListPlumbersResponse, error)
	// List configured/known connections
	GetAllConnections(context.Context, *GetAllConnectionsRequest) (*GetAllConnectionsResponse, error)
	// Fetch a specific connection by ID
	GetConnection(context.Context, *GetConnectionRequest) (*GetConnectionResponse, error)
	// Create a connection in plumber
	CreateConnection(context.Context, *CreateConnectionRequest) (*CreateConnectionResponse, error)
	// Test a connection before saving its configuration
	TestConnection(context.Context, *TestConnectionRequest) (*TestConnectionResponse, error)
	// Any active connections will be restarted
	UpdateConnection(context.Context, *UpdateConnectionRequest) (*UpdateConnectionResponse, error)
	// If there are any active connections, delete will cause them to get closed
	DeleteConnection(context.Context, *DeleteConnectionRequest) (*DeleteConnectionResponse, error)
	GetAllRelays(context.Context, *GetAllRelaysRequest) (*GetAllRelaysResponse, error)
	GetRelay(context.Context, *GetRelayRequest) (*GetRelayResponse, error)
	CreateRelay(context.Context, *CreateRelayRequest) (*CreateRelayResponse, error)
	UpdateRelay(context.Context, *UpdateRelayRequest) (*UpdateRelayResponse, error)
	ResumeRelay(context.Context, *ResumeRelayRequest) (*ResumeRelayResponse, error)
	StopRelay(context.Context, *StopRelayRequest) (*StopRelayResponse, error)
	DeleteRelay(context.Context, *DeleteRelayRequest) (*DeleteRelayResponse, error)
	GetTunnel(context.Context, *GetTunnelRequest) (*GetTunnelResponse, error)
	GetAllTunnels(context.Context, *GetAllTunnelsRequest) (*GetAllTunnelsResponse, error)
	CreateTunnel(context.Context, *CreateTunnelRequest) (*CreateTunnelResponse, error)
	StopTunnel(context.Context, *StopTunnelRequest) (*StopTunnelResponse, error)
	ResumeTunnel(context.Context, *ResumeTunnelRequest) (*ResumeTunnelResponse, error)
	UpdateTunnel(context.Context, *UpdateTunnelRequest) (*UpdateTunnelResponse, error)
	DeleteTunnel(context.Context, *DeleteTunnelRequest) (*DeleteTunnelResponse, error)
	GetServerOptions(context.Context, *GetServerOptionsRequest) (*GetServerOptionsResponse, error)
}

// UnimplementedForemanServerServer can be embedded to have forward compatible implementations.
type UnimplementedForemanServerServer struct {
}

func (*UnimplementedForemanServerServer) ListPlumbers(ctx context.Context, req *ListPlumbersRequest) (*ListPlumbersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlumbers not implemented")
}
func (*UnimplementedForemanServerServer) GetAllConnections(ctx context.Context, req *GetAllConnectionsRequest) (*GetAllConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllConnections not implemented")
}
func (*UnimplementedForemanServerServer) GetConnection(ctx context.Context, req *GetConnectionRequest) (*GetConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnection not implemented")
}
func (*UnimplementedForemanServerServer) CreateConnection(ctx context.Context, req *CreateConnectionRequest) (*CreateConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnection not implemented")
}
func (*UnimplementedForemanServerServer) TestConnection(ctx context.Context, req *TestConnectionRequest) (*TestConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestConnection not implemented")
}
func (*UnimplementedForemanServerServer) UpdateConnection(ctx context.Context, req *UpdateConnectionRequest) (*UpdateConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConnection not implemented")
}
func (*UnimplementedForemanServerServer) DeleteConnection(ctx context.Context, req *DeleteConnectionRequest) (*DeleteConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConnection not implemented")
}
func (*UnimplementedForemanServerServer) GetAllRelays(ctx context.Context, req *GetAllRelaysRequest) (*GetAllRelaysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRelays not implemented")
}
func (*UnimplementedForemanServerServer) GetRelay(ctx context.Context, req *GetRelayRequest) (*GetRelayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelay not implemented")
}
func (*UnimplementedForemanServerServer) CreateRelay(ctx context.Context, req *CreateRelayRequest) (*CreateRelayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRelay not implemented")
}
func (*UnimplementedForemanServerServer) UpdateRelay(ctx context.Context, req *UpdateRelayRequest) (*UpdateRelayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRelay not implemented")
}
func (*UnimplementedForemanServerServer) ResumeRelay(ctx context.Context, req *ResumeRelayRequest) (*ResumeRelayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeRelay not implemented")
}
func (*UnimplementedForemanServerServer) StopRelay(ctx context.Context, req *StopRelayRequest) (*StopRelayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopRelay not implemented")
}
func (*UnimplementedForemanServerServer) DeleteRelay(ctx context.Context, req *DeleteRelayRequest) (*DeleteRelayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRelay not implemented")
}
func (*UnimplementedForemanServerServer) GetTunnel(ctx context.Context, req *GetTunnelRequest) (*GetTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTunnel not implemented")
}
func (*UnimplementedForemanServerServer) GetAllTunnels(ctx context.Context, req *GetAllTunnelsRequest) (*GetAllTunnelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTunnels not implemented")
}
func (*UnimplementedForemanServerServer) CreateTunnel(ctx context.Context, req *CreateTunnelRequest) (*CreateTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTunnel not implemented")
}
func (*UnimplementedForemanServerServer) StopTunnel(ctx context.Context, req *StopTunnelRequest) (*StopTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopTunnel not implemented")
}
func (*UnimplementedForemanServerServer) ResumeTunnel(ctx context.Context, req *ResumeTunnelRequest) (*ResumeTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeTunnel not implemented")
}
func (*UnimplementedForemanServerServer) UpdateTunnel(ctx context.Context, req *UpdateTunnelRequest) (*UpdateTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTunnel not implemented")
}
func (*UnimplementedForemanServerServer) DeleteTunnel(ctx context.Context, req *DeleteTunnelRequest) (*DeleteTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTunnel not implemented")
}
func (*UnimplementedForemanServerServer) GetServerOptions(ctx context.Context, req *GetServerOptionsRequest) (*GetServerOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerOptions not implemented")
}

func RegisterForemanServerServer(s *grpc.Server, srv ForemanServerServer) {
	s.RegisterService(&_ForemanServer_serviceDesc, srv)
}

func _ForemanServer_ListPlumbers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPlumbersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForemanServerServer).ListPlumbers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ForemanServer/ListPlumbers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForemanServerServer).ListPlumbers(ctx, req.(*ListPlumbersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForemanServer_GetAllConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllConnectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForemanServerServer).GetAllConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ForemanServer/GetAllConnections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForemanServerServer).GetAllConnections(ctx, req.(*GetAllConnectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForemanServer_GetConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForemanServerServer).GetConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ForemanServer/GetConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForemanServerServer).GetConnection(ctx, req.(*GetConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForemanServer_CreateConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForemanServerServer).CreateConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ForemanServer/CreateConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForemanServerServer).CreateConnection(ctx, req.(*CreateConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForemanServer_TestConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForemanServerServer).TestConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ForemanServer/TestConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForemanServerServer).TestConnection(ctx, req.(*TestConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForemanServer_UpdateConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForemanServerServer).UpdateConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ForemanServer/UpdateConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForemanServerServer).UpdateConnection(ctx, req.(*UpdateConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForemanServer_DeleteConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForemanServerServer).DeleteConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ForemanServer/DeleteConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForemanServerServer).DeleteConnection(ctx, req.(*DeleteConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForemanServer_GetAllRelays_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRelaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForemanServerServer).GetAllRelays(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ForemanServer/GetAllRelays",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForemanServerServer).GetAllRelays(ctx, req.(*GetAllRelaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForemanServer_GetRelay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRelayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForemanServerServer).GetRelay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ForemanServer/GetRelay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForemanServerServer).GetRelay(ctx, req.(*GetRelayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForemanServer_CreateRelay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRelayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForemanServerServer).CreateRelay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ForemanServer/CreateRelay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForemanServerServer).CreateRelay(ctx, req.(*CreateRelayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForemanServer_UpdateRelay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRelayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForemanServerServer).UpdateRelay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ForemanServer/UpdateRelay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForemanServerServer).UpdateRelay(ctx, req.(*UpdateRelayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForemanServer_ResumeRelay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeRelayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForemanServerServer).ResumeRelay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ForemanServer/ResumeRelay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForemanServerServer).ResumeRelay(ctx, req.(*ResumeRelayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForemanServer_StopRelay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRelayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForemanServerServer).StopRelay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ForemanServer/StopRelay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForemanServerServer).StopRelay(ctx, req.(*StopRelayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForemanServer_DeleteRelay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRelayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForemanServerServer).DeleteRelay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ForemanServer/DeleteRelay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForemanServerServer).DeleteRelay(ctx, req.(*DeleteRelayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForemanServer_GetTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForemanServerServer).GetTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ForemanServer/GetTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForemanServerServer).GetTunnel(ctx, req.(*GetTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForemanServer_GetAllTunnels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTunnelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForemanServerServer).GetAllTunnels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ForemanServer/GetAllTunnels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForemanServerServer).GetAllTunnels(ctx, req.(*GetAllTunnelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForemanServer_CreateTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForemanServerServer).CreateTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ForemanServer/CreateTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForemanServerServer).CreateTunnel(ctx, req.(*CreateTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForemanServer_StopTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForemanServerServer).StopTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ForemanServer/StopTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForemanServerServer).StopTunnel(ctx, req.(*StopTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForemanServer_ResumeTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForemanServerServer).ResumeTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ForemanServer/ResumeTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForemanServerServer).ResumeTunnel(ctx, req.(*ResumeTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForemanServer_UpdateTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForemanServerServer).UpdateTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ForemanServer/UpdateTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForemanServerServer).UpdateTunnel(ctx, req.(*UpdateTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForemanServer_DeleteTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForemanServerServer).DeleteTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ForemanServer/DeleteTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForemanServerServer).DeleteTunnel(ctx, req.(*DeleteTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForemanServer_GetServerOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForemanServerServer).GetServerOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ForemanServer/GetServerOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForemanServerServer).GetServerOptions(ctx, req.(*GetServerOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ForemanServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.ForemanServer",
	HandlerType: (*ForemanServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPlumbers",
			Handler:    _ForemanServer_ListPlumbers_Handler,
		},
		{
			MethodName: "GetAllConnections",
			Handler:    _ForemanServer_GetAllConnections_Handler,
		},
		{
			MethodName: "GetConnection",
			Handler:    _ForemanServer_GetConnection_Handler,
		},
		{
			MethodName: "CreateConnection",
			Handler:    _ForemanServer_CreateConnection_Handler,
		},
		{
			MethodName: "TestConnection",
			Handler:    _ForemanServer_TestConnection_Handler,
		},
		{
			MethodName: "UpdateConnection",
			Handler:    _ForemanServer_UpdateConnection_Handler,
		},
		{
			MethodName: "DeleteConnection",
			Handler:    _ForemanServer_DeleteConnection_Handler,
		},
		{
			MethodName: "GetAllRelays",
			Handler:    _ForemanServer_GetAllRelays_Handler,
		},
		{
			MethodName: "GetRelay",
			Handler:    _ForemanServer_GetRelay_Handler,
		},
		{
			MethodName: "CreateRelay",
			Handler:    _ForemanServer_CreateRelay_Handler,
		},
		{
			MethodName: "UpdateRelay",
			Handler:    _ForemanServer_UpdateRelay_Handler,
		},
		{
			MethodName: "ResumeRelay",
			Handler:    _ForemanServer_ResumeRelay_Handler,
		},
		{
			MethodName: "StopRelay",
			Handler:    _ForemanServer_StopRelay_Handler,
		},
		{
			MethodName: "DeleteRelay",
			Handler:    _ForemanServer_DeleteRelay_Handler,
		},
		{
			MethodName: "GetTunnel",
			Handler:    _ForemanServer_GetTunnel_Handler,
		},
		{
			MethodName: "GetAllTunnels",
			Handler:    _ForemanServer_GetAllTunnels_Handler,
		},
		{
			MethodName: "CreateTunnel",
			Handler:    _ForemanServer_CreateTunnel_Handler,
		},
		{
			MethodName: "StopTunnel",
			Handler:    _ForemanServer_StopTunnel_Handler,
		},
		{
			MethodName: "ResumeTunnel",
			Handler:    _ForemanServer_ResumeTunnel_Handler,
		},
		{
			MethodName: "UpdateTunnel",
			Handler:    _ForemanServer_UpdateTunnel_Handler,
		},
		{
			MethodName: "DeleteTunnel",
			Handler:    _ForemanServer_DeleteTunnel_Handler,
		},
		{
			MethodName: "GetServerOptions",
			Handler:    _ForemanServer_GetServerOptions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ps_foreman_server.proto",
}
