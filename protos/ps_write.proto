syntax = "proto3";

package protos;

import "common/ps_common_auth.proto";
import "common/ps_common_status.proto";
import "opts/ps_opts_manage_write.proto";
import "opts/ps_opts_relay.proto";

option go_package = "github.com/batchcorp/plumber-schemas/build/go/protos";

message GetAllWriteRequest {
  // Every gRPC request must have a valid auth config
  common.Auth auth = 9999;
}

message GetAllWriteResponse {
  common.Status status = 1000;

  // TODO: Expand connection in resp
  // Will be set as empty []Relay if no relays are configured
  repeated opts.CreateWriteOptions opts = 1;
}

///////////////////////////////////////////////////////////////////////////////

message GetWriteRequest{
  // Every gRPC request must have a valid auth config
  common.Auth auth = 9999;

  string write_id = 1;
}

message GetWriteResponse {
  common.Status status = 1000;

  // TODO: Expand connection in resp
  opts.CreateWriteOptions opts = 1;
}

///////////////////////////////////////////////////////////////////////////////

message CreateWriteRequest{
  // Every gRPC request must have a valid auth config
  common.Auth auth = 9999;

  opts.CreateWriteOptions opts = 1;
}

message CreateWriteResponse {
  common.Status status = 1000;

  // ID of the created source entry
  string write_id = 1;
}

///////////////////////////////////////////////////////////////////////////////

// WARNING: Destinations used in channels will be interrupted/restarted
message UpdateWriteRequest{
  // Every gRPC request must have a valid auth config
  common.Auth auth = 9999;

  string write_id = 1;

  opts.CreateWriteOptions opts = 2;
}

message UpdateWriteResponse {
  common.Status status = 1000;
}

///////////////////////////////////////////////////////////////////////////////

// NOTE: Delete won't succeed if a channel exists that uses the source
message DeleteWriteRequest{
  // Every gRPC request must have a valid auth config
  common.Auth auth = 9999;

  string write_id = 1;
}

message DeleteWriteResponse {
  common.Status status = 1000;
}
