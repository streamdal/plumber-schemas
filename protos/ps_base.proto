syntax = "proto3";

package protos;

import "ps_channel.proto";
import "ps_connect.proto";
import "ps_write.proto";
import "ps_server.proto";
import "ps_read.proto";
import "ps_tunnel.proto";

option go_package = "github.com/batchcorp/plumber-schemas/build/go/protos";

service PlumberServer {
  // IMPORTANT!
  // Any changes to methods in this service must be duplicated to ps_foreman_server.proto:ForemanServer
  // IMPORTANT!

  // -------------------- Connection ---------------------

  // List configured/known connections
  rpc GetAllConnections (GetAllConnectionsRequest) returns (GetAllConnectionsResponse);

  // Fetch a specific connection by ID
  rpc GetConnection(GetConnectionRequest) returns (GetConnectionResponse);

  // Create a connection in plumber
  rpc CreateConnection(CreateConnectionRequest) returns (CreateConnectionResponse);

  // Test a connection before saving its configuration
  rpc TestConnection(TestConnectionRequest) returns (TestConnectionResponse);

  // Any active connections will be restarted
  rpc UpdateConnection(UpdateConnectionRequest) returns (UpdateConnectionResponse);

  // If there are any active connections, delete will cause them to get closed
  rpc DeleteConnection(DeleteConnectionRequest) returns (DeleteConnectionResponse);

  // --------------------- Source ---------------------

  rpc GetSource(GetSourceRequest) returns (GetSourceResponse);

  rpc GetAllSources(GetAllSourcesRequest) returns (GetAllSourcesResponse);

  rpc CreateSource(CreateSourceRequest) returns (CreateSourceResponse);

  rpc UpdateSource(UpdateSourceRequest) returns (UpdateSourceResponse);

  rpc DeleteSource(DeleteSourceRequest) returns (DeleteSourceResponse);

  // --------------------- Destination ---------------------

  rpc GetDestination(GetDestinationRequest) returns (GetDestinationResponse);

  rpc GetAllDestinations(GetAllReadRequest) returns (GetAllReadResponse);

  rpc CreateDestination(CreateDestinationRequest) returns (CreateDestinationResponse);

  rpc UpdateDestination(UpdateDestinationRequest) returns (UpdateDestinationResponse);

  rpc DeleteDestination(DeleteDestinationRequest) returns (DeleteDestinationResponse);

  // --------------------- Channel ---------------------

  rpc GetChannel(GetChannelRequest) returns (GetChannelResponse);

  rpc GetAllChannels(GetAllChannelsRequest) returns (GetAllChannelsResponse);

  rpc CreateChannel(CreateChannelRequest) returns (CreateChannelResponse);

  rpc UpdateChannel(UpdateChannelRequest) returns (UpdateChannelResponse);

  rpc DeleteChannel(DeleteChannelRequest) returns (DeleteChannelResponse);

  rpc StopChannel(StopChannelRequest) returns (StopChannelResponse);

  rpc ResumeChannel(ResumeChannelRequest) returns (ResumeChannelResponse);

  // --------------------- Tunnel ---------------------

  rpc GetTunnel(GetTunnelRequest) returns (GetTunnelResponse);

  rpc GetAllTunnels(GetAllTunnelsRequest) returns (GetAllTunnelsResponse);

  rpc CreateTunnel(CreateTunnelRequest) returns (CreateTunnelResponse);

  rpc StopTunnel(StopTunnelRequest) returns (StopTunnelResponse);

  rpc ResumeTunnel(ResumeTunnelRequest) returns (ResumeTunnelResponse);

  rpc UpdateTunnel(UpdateTunnelRequest) returns (UpdateTunnelResponse);

  rpc DeleteTunnel(DeleteTunnelRequest) returns (DeleteTunnelResponse);

  // ------------------- Server -------------------

  rpc GetServerOptions(GetServerOptionsRequest) returns (GetServerOptionsResponse);
}
