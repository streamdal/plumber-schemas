syntax = "proto3";

package protos.opts;

import "args/ps_args_activemq.proto";
import "args/ps_args_aws_kinesis.proto";
import "args/ps_args_aws_sns.proto";
import "args/ps_args_aws_sqs.proto";
import "args/ps_args_azure_event_hub.proto";
import "args/ps_args_azure_service_bus.proto";
import "args/ps_args_gcp_pubsub.proto";
import "args/ps_args_kafka.proto";
import "args/ps_args_kubemq_queue.proto";
import "args/ps_args_memphis.proto";
import "args/ps_args_mqtt.proto";
import "args/ps_args_nats.proto";
import "args/ps_args_nats_jetstream.proto";
import "args/ps_args_nats_streaming.proto";
import "args/ps_args_nsq.proto";
import "args/ps_args_pulsar.proto";
import "args/ps_args_rabbit.proto";
import "args/ps_args_rabbit_streams.proto";
import "args/ps_args_redis_pubsub.proto";
import "args/ps_args_redis_streams.proto";

option go_package = "github.com/streamdal/plumber-schemas/build/go/protos/opts";

message TunnelOptions {
  // @gotags: kong:"help='API token to use for tunnel (create here: https://console.streamdal.com/account/security)',required"
  string api_token = 1;

  // @gotags: kong:"-"
  string connection_id = 2;

  // @gotags: kong:"help='Tunnel API address',default='dproxy.streamdal.com:443'"
  string _grpc_address = 3;

  // @gotags: kong:"help='Tunnel API initial connection timeout',default=5"
  uint32 _grpc_timeout_seconds = 4;

  // @gotags: kong:"help='Use gRPC insecure mode when talking to Streamdal'"
  bool _grpc_insecure = 5;

  // Optional for server and CLI
  // NOTE: CLI-based tunnels will be treated as ephemeral.
  // @gotags: kong:"help='Name to identify tunnel in Streamdal console. If omitted, your IP address will be used'"
  string name = 6;

  // ID of the created tunnel; populated by plumber.
  // @gotags: kong:"-"
  string _tunnel_id = 1000;

  // Set by CreateTunnel() StopTunnel() and ResumeTunnel() methods in Plumber
  // @gotags: kong:"-"
  bool _active  = 1001;

  // --------------------------------------------------------------------- //
  //                       SUPPORTED BACKENDS (100-999)                    //
  // --------------------------------------------------------------------- //

  // @gotags: kong:"cmd,help='Apache Kafka'"
  TunnelGroupKafkaOptions kafka = 100;

  // @gotags: kong:"cmd,help='Apache ActiveMQ'"
  TunnelGroupActiveMQOptions activemq = 101;

  // @gotags: kong:"cmd,help='AWS Simple Queue System'"
  TunnelGroupAWSSQSOptions aws_sqs = 102;

  // @gotags: kong:"cmd,help='AWS Simple Notification System'"
  TunnelGroupAWSSNSOptions aws_sns = 103;

  // @gotags: kong:"cmd,help='NATS'"
  TunnelGroupNatsOptions nats = 104;

  // @gotags: kong:"cmd,help='NATS Streaming'"
  TunnelGroupNatsStreamingOptions nats_streaming = 105;

  // @gotags: kong:"cmd,help='NSQ'"
  TunnelGroupNSQOptions nsq = 106;

  // @gotags: kong:"cmd,help='RabbitMQ'"
  TunnelGroupRabbitOptions rabbit = 107;

  // @gotags: kong:"cmd,help='MQTT'"
  TunnelGroupMQTTOptions mqtt = 108;

  // @gotags: kong:"cmd,help='Azure Service Bus'"
  TunnelGroupAzureServiceBusOptions azure_service_bus = 109;

  // @gotags: kong:"cmd,help='Azure Event Hub'"
  TunnelGroupAzureEventHubOptions azure_event_hub = 110;

  // @gotags: kong:"cmd,help='Google Cloud Platform Pub/Sub'"
  TunnelGroupGCPPubSubOptions gcp_pubsub = 111;

  // @gotags: kong:"cmd,help='KubeMQ Queue'"
  TunnelGroupKubeMQQueueOptions kubemq_queue = 112;

  // @gotags: kong:"cmd,help='Redis PubSub'"
  TunnelGroupRedisPubSubOptions redis_pubsub = 113;

  // @gotags: kong:"cmd,help='Redis Streams'"
  TunnelGroupRedisStreamsOptions redis_streams = 114;

  // @gotags: kong:"cmd,help='Apache Pulsar'"
  TunnelGroupPulsarOptions pulsar = 115;

  // @gotags: kong:"cmd,help='RabbitMQ Streams'"
  TunnelGroupRabbitStreamsOptions rabbit_streams = 116;

  // @gotags: kong:"cmd,help='NATS JetStream'"
  TunnelGroupNatsJetstreamOptions nats_jetstream = 117;

  // @gotags: kong:"cmd,help='AWS Kinesis Streams'"
  TunnelGroupAWSKinesisOptions aws_kinesis = 118;

  // @gotags: kong:"cmd,help='Memphis'"
  TunnelGroupMemphisOptions memphis = 119;
}

message TunnelGroupKafkaOptions {
  // @gotags: kong:"embed"
  args.KafkaConn _conn = 1;

  // @gotags: kong:"embed"
  args.KafkaWriteArgs args = 2;
}

message TunnelGroupActiveMQOptions {
  // @gotags: kong:"embed"
  args.ActiveMQConn _conn = 1;

  // @gotags: kong:"embed"
  args.ActiveMQWriteArgs args = 2;
}

message TunnelGroupAWSSQSOptions {
  // @gotags: kong:"embed"
  args.AWSSQSConn _conn = 1;

  // @gotags: kong:"embed"
  args.AWSSQSWriteArgs args = 2;
}

message TunnelGroupAWSSNSOptions {
  // @gotags: kong:"embed"
  args.AWSSNSConn _conn = 1;

  // @gotags: kong:"embed"
  args.AWSSNSWriteArgs args = 2;
}

message TunnelGroupNatsOptions {
  // @gotags: kong:"embed"
  args.NatsConn _conn = 1;

  // @gotags: kong:"embed"
  args.NatsWriteArgs args = 2;
}

message TunnelGroupNatsJetstreamOptions {
  // @gotags: kong:"embed"
  args.NatsJetstreamConn _conn = 1;

  // @gotags: kong:"embed"
  args.NatsJetstreamWriteArgs args = 2;
}

message TunnelGroupNatsStreamingOptions {
  // @gotags: kong:"embed"
  args.NatsStreamingConn _conn = 1;

  // @gotags: kong:"embed"
  args.NatsStreamingWriteArgs args = 2;
}

message TunnelGroupNSQOptions {
  // @gotags: kong:"embed"
  args.NSQConn _conn = 1;

  // @gotags: kong:"embed"
  args.NSQWriteArgs args = 2;
}

message TunnelGroupRabbitOptions {
  // @gotags: kong:"embed"
  args.RabbitConn _conn = 1;

  // @gotags: kong:"embed"
  args.RabbitWriteArgs args = 2;
}

message TunnelGroupRabbitStreamsOptions {
  // @gotags: kong:"embed"
  args.RabbitStreamsConn _conn = 1;

  // @gotags: kong:"embed"
  args.RabbitStreamsWriteArgs args = 2;
}

message TunnelGroupRedisPubSubOptions {
  // @gotags: kong:"embed"
  args.RedisPubSubConn _conn = 1;

  // @gotags: kong:"embed"
  args.RedisPubSubWriteArgs args = 2;
}

message TunnelGroupRedisStreamsOptions {
  // @gotags: kong:"embed"
  args.RedisStreamsConn _conn = 1;

  // @gotags: kong:"embed"
  args.RedisStreamsWriteArgs args = 2;
}

message TunnelGroupAzureEventHubOptions {
  // @gotags: kong:"embed"
  args.AzureEventHubConn _conn = 1;

  // @gotags: kong:"embed"
  args.AzureEventHubWriteArgs args = 2;
}

message TunnelGroupAzureServiceBusOptions {
  // @gotags: kong:"embed"{
  args.AzureServiceBusConn _conn = 1;

  // @gotags: kong:"embed"
  args.AzureServiceBusWriteArgs args = 2;
}

message TunnelGroupMQTTOptions {
  // @gotags: kong:"embed"
  args.MQTTConn _conn = 1;

  // @gotags: kong:"embed"
  args.MQTTWriteArgs args = 2;
}

message TunnelGroupGCPPubSubOptions {
  // @gotags: kong:"embed"
  args.GCPPubSubConn _conn = 1;

  // @gotags: kong:"embed"
  args.GCPPubSubWriteArgs args = 2;
}

message TunnelGroupKubeMQQueueOptions {
  // @gotags: kong:"embed"
  args.KubeMQQueueConn _conn = 1;

  // @gotags: kong:"embed"
  args.KubeMQQueueWriteArgs args = 2;
}

message TunnelGroupPulsarOptions {
  // @gotags: kong:"embed"
  args.PulsarConn _conn = 1;

  // @gotags: kong:"embed"
  args.PulsarWriteArgs args = 2;
}

message TunnelGroupAWSKinesisOptions {
  // @gotags: kong:"embed"
  args.AWSKinesisConn _conn = 1;

  // @gotags: kong:"embed"
  args.AWSKinesisWriteArgs args = 2;
}

message TunnelGroupMemphisOptions {
  // @gotags: kong:"embed"
  args.MemphisConn _conn = 1;

  // @gotags: kong:"embed"
  args.MemphisWriteArgs args = 2;
}
