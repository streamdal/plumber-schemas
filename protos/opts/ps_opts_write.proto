syntax = "proto3";

package protos.opts;

import "args/ps_args_activemq.proto";
import "args/ps_args_aws_kinesis.proto";
import "args/ps_args_aws_sns.proto";
import "args/ps_args_aws_sqs.proto";
import "args/ps_args_azure_event_hub.proto";
import "args/ps_args_azure_service_bus.proto";
import "args/ps_args_gcp_pubsub.proto";
import "args/ps_args_kafka.proto";
import "args/ps_args_kubemq_queue.proto";
import "args/ps_args_memphis.proto";
import "args/ps_args_mqtt.proto";
import "args/ps_args_nats.proto";
import "args/ps_args_nats_jetstream.proto";
import "args/ps_args_nats_streaming.proto";
import "args/ps_args_nsq.proto";
import "args/ps_args_pulsar.proto";
import "args/ps_args_rabbit.proto";
import "args/ps_args_rabbit_streams.proto";
import "args/ps_args_redis_pubsub.proto";
import "args/ps_args_redis_streams.proto";
import "encoding/ps_encoding_options.proto";
import "records/ps_records_base.proto";

option go_package = "github.com/streamdal/plumber-schemas/build/go/protos/opts";

message WriteCLIOptions {
  // @gotags: kong:"help='Write data from input file',existingfile,xor=input"
  string input_file = 1;

  // @gotags: kong:"help='Treat input as JSON array - each array element will be written as a separate message'"
  bool input_as_json_array = 2;

  // @gotags: kong:"-"
  repeated string input_stdin = 3;
}

// Write is the structure that backends accept for facilitating a write.
// NOTE: _conn is only used by the CLI - desktop does not need to set it.
message WriteOptions {
  // Required for desktop; ignored in CLI.
  // @gotags: kong:"-"
  string connection_id = 1;

  // @gotags: kong:"embed"
  records.WriteRecord record = 2;

  // @gotags: kong:"embed"
  encoding.EncodeOptions encode_options = 3;

  // --------------------------------------------------------------------- //
  //                          PRIVATE FIELDS (1000+)                       //
  // --------------------------------------------------------------------- //

  // Optional; CLI-specific and non-backend-specific options
  // @gotags: kong:"embed"
  WriteCLIOptions _cli_options = 1000;

  // --------------------------------------------------------------------- //
  //                       SUPPORTED BACKENDS (100-999)                    //
  // --------------------------------------------------------------------- //

  // @gotags: kong:"cmd,help='Apache Kafka'"
  WriteGroupKafkaOptions kafka = 100;

  // @gotags: kong:"cmd,help='Apache ActiveMQ'"
  WriteGroupActiveMQOptions activemq = 101;

  // @gotags: kong:"cmd,help='AWS Simple Queue System'"
  WriteGroupAWSSQSOptions aws_sqs = 102;

  // @gotags: kong:"cmd,help='AWS Simple Notification System'"
  WriteGroupAWSSNSOptions aws_sns = 103;

  // @gotags: kong:"cmd,help='NATS'"
  WriteGroupNatsOptions nats = 104;

  // @gotags: kong:"cmd,help='NATS Streaming'"
  WriteGroupNatsStreamingOptions nats_streaming = 105;

  // @gotags: kong:"cmd,help='NSQ'"
  WriteGroupNSQOptions nsq = 106;

  // @gotags: kong:"cmd,help='Apache Pulsar'"
  WriteGroupPulsarOptions pulsar = 107;

  // @gotags: kong:"cmd,help='RabbitMQ'"
  WriteGroupRabbitOptions rabbit = 108;

  // @gotags: kong:"cmd,help='RabbitMQ Streams'"
  WriteGroupRabbitStreamsOptions rabbit_streams = 109;

  // @gotags: kong:"cmd,help='MQTT'"
  WriteGroupMQTTOptions mqtt = 110;

  // @gotags: kong:"cmd,help='Azure Service Bus'"
  WriteGroupAzureServiceBusOptions azure_service_bus = 111;

  // @gotags: kong:"cmd,help='Azure Event Hub'"
  WriteGroupAzureEventHubOptions azure_event_hub = 112;

  // @gotags: kong:"cmd,help='Google Cloud Platform Pub/Sub'"
  WriteGroupGCPPubSubOptions gcp_pubsub = 113;

  // @gotags: kong:"cmd,help='KubeMQ Queue'"
  WriteGroupKubeMQQueueOptions kubemq_queue = 114;

  // @gotags: kong:"cmd,help='Redis PubSub'"
  WriteGroupRedisPubSubOptions redis_pubsub = 115;

  // @gotags: kong:"cmd,help='Redis Streams'"
  WriteGroupRedisStreamsOptions redis_streams = 116;

  // @gotags: kong:"cmd,help='NATS JetStream'"
  WriteGroupNatsJetstreamOptions nats_jetstream = 117;

  // @gotags: kong:"cmd,help='AWS Kinesis Streams'"
  WriteGroupAWSKinesisOptions aws_kinesis = 118;

  // @gotags: kong:"cmd,help='Memphis'"
  WriteGroupMemphisOptions memphis = 119;
}

message WriteGroupKafkaOptions {
  // @gotags: kong:"embed"
  args.KafkaConn _conn = 1;

  // @gotags: kong:"embed"
  args.KafkaWriteArgs args = 2;
}

message WriteGroupActiveMQOptions {
  // @gotags: kong:"embed"
  args.ActiveMQConn _conn = 1;

  // @gotags: kong:"embed"
  args.ActiveMQWriteArgs args = 2;
}

message WriteGroupAWSSQSOptions {
  // @gotags: kong:"embed"
  args.AWSSQSConn _conn = 1;

  // @gotags: kong:"embed"
  args.AWSSQSWriteArgs args = 2;
}

message WriteGroupAWSSNSOptions {
  // @gotags: kong:"embed"
  args.AWSSNSConn _conn = 1;

  // @gotags: kong:"embed"
  args.AWSSNSWriteArgs args = 2;
}

message WriteGroupNatsOptions {
  // @gotags: kong:"embed"
  args.NatsConn _conn = 1;

  // @gotags: kong:"embed"
  args.NatsWriteArgs args = 2;
}

message WriteGroupNatsJetstreamOptions {
  // @gotags: kong:"embed"
  args.NatsJetstreamConn _conn = 1;

  // @gotags: kong:"embed"
  args.NatsJetstreamWriteArgs args = 2;
}

message WriteGroupNatsStreamingOptions {
  // @gotags: kong:"embed"
  args.NatsStreamingConn _conn = 1;

  // @gotags: kong:"embed"
  args.NatsStreamingWriteArgs args = 2;
}

message WriteGroupNSQOptions {
  // @gotags: kong:"embed"
  args.NSQConn _conn = 1;

  // @gotags: kong:"embed"
  args.NSQWriteArgs args = 2;
}

message WriteGroupPulsarOptions {
  // @gotags: kong:"embed"
  args.PulsarConn _conn = 1;

  // @gotags: kong:"embed"
  args.PulsarWriteArgs args = 2;
}

message WriteGroupRabbitOptions {
  // @gotags: kong:"embed"
  args.RabbitConn _conn = 1;

  // @gotags: kong:"embed"
  args.RabbitWriteArgs args = 2;
}

message WriteGroupRabbitStreamsOptions {
  // @gotags: kong:"embed"
  args.RabbitStreamsConn _conn = 1;

  // @gotags: kong:"embed"
  args.RabbitStreamsWriteArgs args = 2;
}

message WriteGroupRedisPubSubOptions {
  // @gotags: kong:"embed"
  args.RedisPubSubConn _conn = 1;

  // @gotags: kong:"embed"
  args.RedisPubSubWriteArgs args = 2;
}

message WriteGroupRedisStreamsOptions {
  // @gotags: kong:"embed"
  args.RedisStreamsConn _conn = 1;

  // @gotags: kong:"embed"
  args.RedisStreamsWriteArgs args = 2;
}

message WriteGroupAzureEventHubOptions {
  // @gotags: kong:"embed"
  args.AzureEventHubConn _conn = 1;

  // @gotags: kong:"embed"
  args.AzureEventHubWriteArgs args = 2;
}

message WriteGroupAzureServiceBusOptions {
  // @gotags: kong:"embed"{
  args.AzureServiceBusConn _conn = 1;

  // @gotags: kong:"embed"
  args.AzureServiceBusWriteArgs args = 2;
}

message WriteGroupMQTTOptions {
  // @gotags: kong:"embed"
  args.MQTTConn _conn = 1;

  // @gotags: kong:"embed"
  args.MQTTWriteArgs args = 2;
}

message WriteGroupGCPPubSubOptions {
  // @gotags: kong:"embed"
  args.GCPPubSubConn _conn = 1;

  // @gotags: kong:"embed"
  args.GCPPubSubWriteArgs args = 2;
}

message WriteGroupKubeMQQueueOptions {
  // @gotags: kong:"embed"
  args.KubeMQQueueConn _conn = 1;

  // @gotags: kong:"embed"
  args.KubeMQQueueWriteArgs args = 2;
}

message WriteGroupAWSKinesisOptions {
  // @gotags: kong:"embed"
  args.AWSKinesisConn _conn = 1;

  // @gotags: kong:"embed"
  args.AWSKinesisWriteArgs args = 2;
}

message WriteGroupMemphisOptions {
  // @gotags: kong:"embed"
  args.MemphisConn _conn = 1;

  // @gotags: kong:"embed"
  args.MemphisWriteArgs args = 2;
}
