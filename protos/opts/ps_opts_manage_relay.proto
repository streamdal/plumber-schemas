syntax = "proto3";

package protos.opts;

import "args/ps_args_aws_sqs.proto";
import "args/ps_args_azure_service_bus.proto";
import "args/ps_args_gcp_pubsub.proto";
import "args/ps_args_kafka.proto";
import "args/ps_args_kubemq_queue.proto";
import "args/ps_args_mongo.proto";
import "args/ps_args_mqtt.proto";
import "args/ps_args_nats.proto";
import "args/ps_args_nats_jetstream.proto";
import "args/ps_args_nats_streaming.proto";
import "args/ps_args_nsq.proto";
import "args/ps_args_postgres.proto";
import "args/ps_args_rabbit.proto";
import "args/ps_args_redis_pubsub.proto";
import "args/ps_args_redis_streams.proto";


option go_package = "github.com/batchcorp/plumber-schemas/build/go/protos/opts";

message GetRelayOptions {
  // @gotags: kong:"help='ID of the relay to get (leave empty to get all)'"
  string id = 1;
}

message CreateRelayOptions {
  // @gotags: kong:"help='ID of the connection to use',required"
  string connection_id = 1;

  // @gotags: kong:"help='Secret collection token',required"
  string collection_token = 2;

  // @gotags: kong:"help='How many messages to send in a single batch',default=1000"
  int32 batch_size = 3;

  // @gotags: kong:"help='How many times plumber will try re-sending a batch',default=3"
  int32 batch_max_retry = 4;

  // @gotags: kong:"help='How many workers to launch per relay',default=10"
  int32 num_workers = 5;

  // @gotags: kong:"help='Alternative collector to relay events to',default='grpc-collector.streamdal.com:9000'"
  string streamdal_grpc_address = 6;

  // @gotags: kong:"help='Whether to use TLS with collector'"
  bool streamdal_grpc_disable_tls = 7;

  // @gotags: kong:"help='How long to wait before giving up talking to the gRPC collector',default=5"
  int32 streamdal_grpc_timeout_seconds = 8;

  // @gotags: kong:"help='Consumed messages are intended to be dead-lettered'"
  bool dead_letter = 9;

  // --------------------------------------------------------------------- //
  //                       SUPPORTED BACKENDS (100-999)                    //
  // --------------------------------------------------------------------- //

  // @gotags: kong:"cmd,help='Apache Kafka'"
  args.KafkaRelayArgs kafka = 100;

  // @gotags: kong:"cmd,help='AWS Simple Queue System'"
  args.AWSSQSRelayArgs aws_sqs = 101;

  // @gotags: kong:"cmd,help='MongoDB (CDC)'"
  args.MongoReadArgs mongo = 102;

  // @gotags: kong:"cmd,help='NSQ'"
  args.NSQReadArgs nsq = 103;

  // @gotags: kong:"cmd,help='MQTT'"
  args.RabbitReadArgs rabbit = 104;

  // @gotags: kong:"cmd,help='MQTT'"
  args.MQTTReadArgs mqtt = 105;

  // @gotags: kong:"cmd,help='Azure Service Bus'"
  args.AzureServiceBusReadArgs azure_service_bus = 106;

  // @gotags: kong:"cmd,help='Google Cloud Platform Pub/Sub'"
  args.GCPPubSubReadArgs gcp_pubsub = 107;

  // @gotags: kong:"cmd,help='KubeMQ Queue'"
  args.KubeMQQueueReadArgs kubemq_queue = 108;

  // @gotags: kong:"cmd,help='Redis PubSub'"
  args.RedisPubSubReadArgs redis_pubsub = 109;

  // @gotags: kong:"cmd,help='Redis Streams'"
  args.RedisStreamsReadArgs redis_streams = 111;

  // @gotags: kong:"cmd,help='PostgreSQL (CDC)'"
  args.PostgresReadArgs postgres = 112;

  // @gotags: kong:"cmd,help='NATS'"
  args.NatsReadArgs nats = 113;

  // @gotags: kong:"cmd,help='NATS Streaming'"
  args.NatsStreamingReadArgs nats_streaming = 114;

  // @gotags: kong:"cmd,help='NATS JetStream'"
  args.NatsJetstreamReadArgs nats_jetstream = 115;
}

message DeleteRelayOptions {
  // @gotags: kong:"help='ID of the relay to delete',required=true"
  string id = 1;
}

message StopRelayOptions {
  // @gotags: kong:"help='ID of the relay to stop',required=true"
  string id = 1;
}

message ResumeRelayOptions {
  // @gotags: kong:"help='ID of the relay to resume',required=true"
  string id = 1;
}
