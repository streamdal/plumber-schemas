syntax = "proto3";

package protos.opts;

import "opts/ps_opts_write.proto";

option go_package = "github.com/streamdal/plumber-schemas/build/go/protos/opts";

enum StreamdalOutputType {
  TABLE = 0;
  JSON  = 1;
}

enum StreamdalReplayType {
  SINGLE     = 0;
  CONTINUOUS = 1;
}

message StreamdalOptions {
  // @gotags: kong:"help='How to output results (options: table json)',default=table,type=pbenum,pbenum_lowercase"
  StreamdalOutputType output_type = 1;

  // @gotags: kong:"help='Alternative URL to use for Streamdal API',default='https://api.streamdal.com'"
  string api_url = 2;

  // @gotags: kong:"cmd,help='Login to the Streamdal platform'"
  StreamdalLoginOptions login = 3;

  // @gotags: kong:"cmd,help='Login to Streamdal'"
  StreamdalLogoutOptions logout = 4;

  // @gotags: kong:"cmd,help='List Streamdal resources'"
  StreamdalListOptions list = 5;

  // @gotags: kong:"cmd,help='Create operations'"
  StreamdalCreateOptions create = 6;

  // @gotags: kong:"cmd,help='Search operations'"
  StreamdalSearchOptions search = 7;

  // @gotags: kong:"cmd,help='Archive a resource'"
  StreamdalArchiveOptions archive = 8;
}

message StreamdalLoginOptions {
    // None
}

message StreamdalLogoutOptions {
    // None
}

message StreamdalListCollectionOptions {
    // None
}

message StreamdalListDestinationOptions {
    // None
}

message StreamdalListSchemaOptions {
    // None
}
message StreamdalListReplayOptions {
    // None
}

message StreamdalArchiveOptions {
  // @gotags: kong:"embed,cmd,help='Archive a replay'"
  StreamdalArchiveReplayOptions replay = 1;
}

message StreamdalArchiveReplayOptions {
  // @gotags: kong:"help='Replay ID to archive',required"
  string replay_id = 1;
}

message StreamdalListOptions {
  // @gotags: kong:"cmd,help='List all collections'"
  StreamdalListCollectionOptions collection = 1;

  // @gotags: kong:"cmd,help='List all destinations'"
  StreamdalListDestinationOptions destination = 2;

  // @gotags: kong:"cmd,help='List all replays'"
  StreamdalListReplayOptions replay = 3;

  // @gotags: kong:"cmd,help='List all schemas'"
  StreamdalListSchemaOptions schema = 4;
}

message StreamdalCreateOptions {
  // @gotags: kong:"cmd,help='Create a collection'"
  StreamdalCreateCollectionOptions collection = 1;

  // @gotags: kong:"cmd,help='Create a replay'"
  StreamdalCreateReplayOptions replay = 2;

  // @gotags: kong:"cmd,help='Create a destination'"
  StreamdalCreateDestinationOptions destination = 3;
}

message StreamdalSearchOptions {
  // @gotags: kong:"help='Query to perform',default='*'"
  string query = 1;

  // @gotags: kong:"help='Collection id to query',required"
  string collection_id = 2;

  // @gotags: kong:"help='Which page to display',default=1"
  int32 page = 3;

    // TODO: Should be able to override default pagesize
}

message StreamdalCreateCollectionOptions {
  // @gotags: kong:"help='Friendly name for the collection',required"
  string name = 1;

  // @gotags: kong:"help='Schema the collection will use (can be obtained running _plumber streamdal list schema_)',required"
  string schema_id = 2;

  // @gotags: kong:"help='Optional notes for the collection'"
  string notes = 3;

  // @gotags: kong:"help='(Protobuf Schemas Only) Envelope Type (deep or shallow)',default='deep'"
  string envelope_type = 4;


  // @gotags: kong:"help='(Protobuf Schemas Only) Envelope Message Name (Ex: events.MessageEnvelope)'"
  string envelope_root_message = 5;

  // @gotags: kong:"help='(Shallow Envelope Protobuf Schemas Only) Payload Message Name (Ex: events.ShallowPayload)'"
  string payload_field_message = 6;

  // @gotags: kong:"help='(Shallow Envelope Protobuf Schemas Only) Field ID containing the message encoded with Payload Message'"
  string payload_field_id = 7;

}

message StreamdalCreateReplayOptions {
  // @gotags: kong:"help='Friendly name to assign to the replay',required"
  string name = 1;

  // @gotags: kong:"help='One-time/single or continuous replay (options: single, continuous)',type=pbenum,pbenum_lowercase,default=single"
  StreamdalReplayType type = 2;

  // @gotags: kong:"help='Notes to attach to the replay'"
  string notes = 3;

  // @gotags: kong:"help='Collection ID to replay from',required"
  string collection_id = 4;

  // @gotags: kong:"help='Destination ID to replay to',required"
  string destination_id = 5;

  // @gotags: kong:"help='Search query',default='*'"
  string query = 6;

  // @gotags: kong:"help='Where to begin search (RFC3339 timestamp)',required"
  string from_timestamp = 7;

  // @gotags: kong:"help='Where to end search (RFC3339 timestamp)',required"
  string to_timestamp = 8;
}

message StreamdalCreateDestinationOptions {
  // @gotags: kong:"help='Friendly name to assign to the destination',required"
  string name = 1;

  // @gotags: kong:"help='Any notes to include with the destination'"
  string notes = 2;

  // Used internally by CLI
  // @gotags: kong:"-"
  string _api_destination_type = 1000;

  // @gotags: kong:"cmd,help='Apache Kafka'"
  opts.WriteGroupKafkaOptions kafka = 100;

  // @gotags: kong:"cmd,help='RabbitMQ'"
  opts.WriteGroupRabbitOptions rabbit = 101;

  // @gotags: kong:"cmd,help='KubeMQ Queue'"
  opts.WriteGroupKubeMQQueueOptions kubemq_queue = 102;

  // @gotags: kong:"cmd,help='AWS Simple Queue System'"
  WriteGroupAWSSQSOptions aws_sqs = 103;

  // @gotags: kong:"cmd,help='HTTP Destination (POST)'"
  HTTPDestination http = 104;
}

message HTTPDestination {
  // @gotags: kong:"help='Full URL to HTTP server (ex: https://example.com/some/path)',required"
  string url = 1;

  // @gotags: kong:"help='Optional map of headers to pass on replay (--headers key1=value1,key2=value2..)'"
  map<string, string> headers = 2;
}
