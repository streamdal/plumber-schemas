syntax = "proto3";

package protos.opts;

import "args/ps_args_activemq.proto";
import "args/ps_args_aws_kinesis.proto";
import "args/ps_args_aws_sqs.proto";
import "args/ps_args_azure_event_hub.proto";
import "args/ps_args_azure_service_bus.proto";
import "args/ps_args_gcp_pubsub.proto";
import "args/ps_args_kafka.proto";
import "args/ps_args_kubemq_queue.proto";
import "args/ps_args_memphis.proto";
import "args/ps_args_mongo.proto";
import "args/ps_args_mqtt.proto";
import "args/ps_args_nats.proto";
import "args/ps_args_nats_jetstream.proto";
import "args/ps_args_nats_streaming.proto";
import "args/ps_args_nsq.proto";
import "args/ps_args_postgres.proto";
import "args/ps_args_pulsar.proto";
import "args/ps_args_rabbit.proto";
import "args/ps_args_rabbit_streams.proto";
import "args/ps_args_redis_pubsub.proto";
import "args/ps_args_redis_streams.proto";
import "encoding/ps_encoding_options.proto";

option go_package = "github.com/streamdal/plumber-schemas/build/go/protos/opts";

enum ConvertOption {
  CONVERT_OPTION_UNSET  = 0;
  CONVERT_OPTION_BASE64 = 1;
  CONVERT_OPTION_GZIP   = 2;
}

message ReadCLIOptions {
  // @gotags: kong:"help='Display more verbose information during reads (varies by backend)'"
  bool verbose_output = 1;

  // @gotags: kong:"help='Pretty (colorized) output'"
  bool pretty = 2;

  // @gotags: kong:"help='Display all output as JSON (including tabular metadata)'"
  bool json = 3;
}

message ReadSampleOptions {
  // @gotags: kong:"help='How many events to fetch during a sample interval',default=100"
  uint32 sample_rate = 1;

  // @gotags: kong:"help='Sample interval seconds',enum:'1,60',default=60"
  uint32 sample_interval_seconds = 2;
}

message ReadFilterOptions {
  // @gotags: kong:"-"
  string query = 1;
}

// Relay is the structure that backends accept for facilitating a relay.
message ReadOptions {
  // Required; friendly name for the read
  // @gotags: kong:"-"
  string name = 1;

  // Required for desktop; ignored in CLI.
  // @gotags: kong:"-"
  string connection_id = 2;

  // Required; specify if a read is continuous or not (default: false)
  // @gotags: kong:"help='Follow/read continuously',short=f"
  bool continuous = 3;

  // Optional; specify if reading should utilize sampling
  // @gotags: kong:"embed,group=sampling"
  ReadSampleOptions sample_options = 4;

  // Optional; decode_options specify how to decode the _value_ in a message.
  // If left unset, plumber will still populate records.ReadRecord.Decoded
  // with the (untouched) value.
  // @gotags: kong:"embed,group=decode"
  encoding.DecodeOptions decode_options = 5;

  // @gotags: kong:"help='Convert output before it is printed to STDOUT (options: unset; base64; gzip)',type=pbenum,pbenum_strip_prefix=CONVERT_OPTION_,pbenum_lowercase,default=unset"
  ConvertOption convert_output = 6;

  // @gotags: kong:"-"
  ReadFilterOptions filter = 7;

  // Whether to infer a JSON schema from this read. Ignored if schema_id is populated. Desktop use only
  // @gotags: kong:"-"
  InferSchemaOptions infer_schema_options = 8;

  // --------------------------------------------------------------------- //
  //                          PRIVATE FIELDS (1000+)                       //
  // --------------------------------------------------------------------- //

  // Automatically set by plumber when a new read is created
  // @gotags: kong:"-"
  string _id = 1000;

  // Used by plumber to set read state
  // @gotags: kong:"-"
  bool _active = 1001;

  // Contains options/fields specific to the CLI
  // @gotags: kong:"embed"
  ReadCLIOptions _cli_options = 1002;

  // --------------------------------------------------------------------- //
  //                       SUPPORTED BACKENDS (100-999)                    //
  // --------------------------------------------------------------------- //

  // @gotags: kong:"cmd,help='Apache Kafka'"
  ReadGroupKafkaOptions kafka = 100;

  // @gotags: kong:"cmd,help='Apache ActiveMQ (STOMP)'"
  ReadGroupActiveMQOptions activemq = 101;

  // @gotags: kong:"cmd,help='AWS Simple Queue System'"
  ReadGroupAWSSQSOptions aws_sqs = 102;

  // @gotags: kong:"cmd,help='MongoDB'"
  ReadGroupMongoOptions mongo = 103;

  // @gotags: kong:"cmd,help='NATS'"
  ReadGroupNatsOptions nats = 104;

  // @gotags: kong:"cmd,help='NATS Streaming'"
  ReadGroupNatsStreamingOptions nats_streaming = 105;

  // @gotags: kong:"cmd,help='NSQ'"
  ReadGroupNSQOptions nsq = 106;

  // @gotags: kong:"cmd,help='Apache Pulsar'"
  ReadGroupPulsarOptions pulsar = 107;

  // @gotags: kong:"cmd,help='RabbitMQ'"
  ReadGroupRabbitOptions rabbit = 108;

  // @gotags: kong:"cmd,help='RabbitMQ Streams'"
  ReadGroupRabbitStreamsOptions rabbit_streams = 109;

  // @gotags: kong:"cmd,help='MQTT'"
  ReadGroupMQTTOptions mqtt = 110;

  // @gotags: kong:"cmd,help='Azure Service Bus'"
  ReadGroupAzureServiceBusOptions azure_service_bus = 111;

  // @gotags: kong:"cmd,help='Azure Event Hub'"
  ReadGroupAzureEventHubOptions azure_event_hub = 112;

  // @gotags: kong:"cmd,help='Google Cloud Platform Pub/Sub'"
  ReadGroupGCPPubSubOptions gcp_pubsub = 113;

  // @gotags: kong:"cmd,help='KubeMQ Queue'"
  ReadGroupKubeMQQueueOptions kubemq_queue = 114;

  // @gotags: kong:"cmd,help='Redis PubSub'"
  ReadGroupRedisPubSubOptions redis_pubsub = 115;

  // @gotags: kong:"cmd,help='Redis Streams'"
  ReadGroupRedisStreamsOptions redis_streams = 116;

  // @gotags: kong:"cmd,help='PostgreSQL'"
  ReadGroupPostgresOptions postgres = 117;

  // @gotags: kong:"cmd,help='NATS Jetstream'"
  ReadGroupNatsJetstreamOptions nats_jetstream = 118;

  // @gotags: kong:"cmd,help='AWS Kinesis Streams'"
  ReadGroupAWSKinesisOptions aws_kinesis = 119;

  // @gotags: kong:"cmd,help='Memphis'"
  ReadGroupMemphisOptions memphis = 120;
}

message ReadGroupKafkaOptions {
  // @gotags: kong:"embed"
  args.KafkaConn _conn = 1;

  // @gotags: kong:"embed"
  args.KafkaReadArgs args = 2;
}

message ReadGroupActiveMQOptions {
  // @gotags: kong:"embed"
  args.ActiveMQConn _conn = 1;

  // @gotags: kong:"embed"
  args.ActiveMQReadArgs args = 2;
}

message ReadGroupAWSSQSOptions {
  // @gotags: kong:"embed"
  args.AWSSQSConn _conn = 1;

  // @gotags: kong:"embed"
  args.AWSSQSReadArgs args = 2;
}

message ReadGroupMongoOptions {
  // @gotags: kong:"embed"
  args.MongoConn _conn = 1;

  // @gotags: kong:"embed"
  args.MongoReadArgs args = 2;
}

message ReadGroupNatsOptions {
  // @gotags: kong:"embed"
  args.NatsConn _conn = 1;

  // @gotags: kong:"embed"
  args.NatsReadArgs args = 2;
}

message ReadGroupNatsStreamingOptions {
  // @gotags: kong:"embed"
  args.NatsStreamingConn _conn = 1;

  // @gotags: kong:"embed"
  args.NatsStreamingReadArgs args = 2;
}

message ReadGroupNatsJetstreamOptions {
  // @gotags: kong:"embed"
  args.NatsJetstreamConn _conn = 1;

  // @gotags: kong:"embed"
  args.NatsJetstreamReadArgs args = 2;
}

message ReadGroupNSQOptions {
  // @gotags: kong:"embed"
  args.NSQConn _conn = 1;

  // @gotags: kong:"embed"
  args.NSQReadArgs args = 2;
}

message ReadGroupPostgresOptions {
  // @gotags: kong:"embed"
  args.PostgresConn _conn = 1;

  // @gotags: kong:"embed"
  args.PostgresReadArgs args = 2;
}

message ReadGroupPulsarOptions {
  // @gotags: kong:"embed"
  args.PulsarConn _conn = 1;

  // @gotags: kong:"embed"
  args.PulsarReadArgs args = 2;
}

message ReadGroupRabbitOptions {
  // @gotags: kong:"embed"
  args.RabbitConn _conn = 1;

  // @gotags: kong:"embed"
  args.RabbitReadArgs args = 2;
}

message ReadGroupRabbitStreamsOptions {
  // @gotags: kong:"embed"
  args.RabbitStreamsConn _conn = 1;

  // @gotags: kong:"embed"
  args.RabbitStreamsReadArgs args = 2;
}

message ReadGroupRedisPubSubOptions {
  // @gotags: kong:"embed"
  args.RedisPubSubConn _conn = 1;

  // @gotags: kong:"embed"
  args.RedisPubSubReadArgs args = 2;
}

message ReadGroupRedisStreamsOptions {
  // @gotags: kong:"embed"
  args.RedisStreamsConn _conn = 1;

  // @gotags: kong:"embed"
  args.RedisStreamsReadArgs args = 2;
}

message ReadGroupAzureEventHubOptions {
  // @gotags: kong:"embed"
  args.AzureEventHubConn _conn = 1;

  // @gotags: kong:"embed"
  args.AzureEventHubReadArgs args = 2;
}

message ReadGroupAzureServiceBusOptions {
  // @gotags: kong:"embed"
  args.AzureServiceBusConn _conn = 1;

  // @gotags: kong:"embed"
  args.AzureServiceBusReadArgs args = 2;
}

message ReadGroupMQTTOptions {
  // @gotags: kong:"embed"
  args.MQTTConn _conn = 1;

  // @gotags: kong:"embed"
  args.MQTTReadArgs args = 2;
}

message ReadGroupGCPPubSubOptions {
  // @gotags: kong:"embed"
  args.GCPPubSubConn _conn  = 1;

  // @gotags: kong:"embed"
  args.GCPPubSubReadArgs args = 2;
}

message ReadGroupKubeMQQueueOptions {
  // @gotags: kong:"embed"
  args.KubeMQQueueConn _conn = 1;

  // @gotags: kong:"embed"
  args.KubeMQQueueReadArgs args = 2;
}

message ReadGroupAWSKinesisOptions {
  // @gotags: kong:"embed"
  args.AWSKinesisConn _conn = 1;

  // @gotags: kong:"embed"
  args.AWSKinesisReadArgs args = 2;
}

message ReadGroupMemphisOptions {
  // @gotags: kong:"embed"
  args.MemphisConn _conn = 1;

  // @gotags: kong:"embed"
  args.MemphisReadArgs args = 2;
}



message InferSchemaOptions {
  enum Type {
    UNSET = 0;
    JSONSCHEMA = 1;
        // TODO: expand with other types when we support them
  }

  // Type of schema to infer from the data
  // @gotags: kong:"-"
  Type type = 1;

  // Existing schema ID. Can be filled out by end user, or by plumber
  // If filled out by end user, plumber will pull the schema and evolve from it
  // If empty, plumber will make a new schema, save and publish to other instances, and then evolve from it
  // @gotags: kong:"-"
  string schema_id = 2;
}
