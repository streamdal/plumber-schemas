// ps_common_dataquality.proto contains data quality rule structures
syntax = "proto3";

package protos.common;

option go_package = "github.com/batchcorp/plumber-schemas/build/go/protos/common";

message RuleSet {
  string id = 1;

  // name will be used to identify this rule set in the frontend, it serves no other purpose
  string name = 2;

  // Determines when this rule is ran
  RuleMode mode = 3;

  // What key to run these rules on
  // Kafka:
  //   - Key is the topic being published to, or read from
  // RabbitMQ
  //   - Key is the binding/routing key depending on publish or consume
  map<string, Rule> rules = 4;

  // The bus this rule set is associated with
  string bus = 5;

  // Incrementing number to track rule set versions. Set by plumber
  int32 version = 6;
}


enum RuleType {
  RULE_TYPE_UNSET = 0;
  RULE_TYPE_MATCH = 1;
  RULE_TYPE_TRANSFORM = 2;
  RULE_TYPE_CUSTOM = 3;
}

enum RuleMode {
  RULE_MODE_UNSET = 0;
  RULE_MODE_PUBLISH = 1;
  RULE_MODE_CONSUME = 2;
}

enum RuleFailureMode {
  RULE_FAILURE_MODE_UNSET = 0;

  // Reject message on publish, ignore message on consume
  RULE_FAILURE_MODE_REJECT = 1;

  // Send message to Streamdal DLQ
  RULE_FAILURE_MODE_DLQ = 2;

  // Run a transform on the message
  RULE_FAILURE_MODE_TRANSFORM = 3;

  // Send an alert to slack
  RULE_FAILURE_MODE_ALERT_SLACK = 4;
}

message Rule {

  string id = 1;

  // Defines which kind of wasm function we're executing
  RuleType type = 2;

  // The failure mode to use if the rule fails
  RuleFailureMode failure_mode = 3;

  oneof rule_config {
    RuleConfigMatch match_config = 1000;
    RuleConfigTransform transform_config = 1001;
    RuleConfigCustom custom_config = 1002;
  }

  // The failure mode configuration
  oneof failure_mode_config {
    FailureModeReject reject = 2000;
    FailureModeDLQ dlq = 2001;
    FailureModeTransform transform = 2002;
    FailureModeAlertSlack alert_slack = 2003;
  }
}

message RuleConfigMatch {
  // The json path we are matching on
  string path = 1;

  // The type of detective matcher we're using.
  // See MatchType in https://github.com/streamdal/dataqual/blob/main/detective/detective.go
  string type = 2;

  // The values we are matching on if the matcher takes arguments (ex: string_contains_any),
  // otherwise this is ignored
  repeated string args = 3;
}

message RuleConfigTransform {
  // The json path of the field we are transforming
  string path = 1;

  // The value to replace the field with
  string value = 2;
}

message RuleConfigCustom {
  // TODO
}

message FailureModeReject {
  // Purposefully blank
}


message FailureModeDLQ {
  string streamdal_token = 1;
}

message FailureModeTransform {
  // The key we are replacing
  string path = 1;

  // The value we are replacing it with
  string value = 2;
}

message FailureModeAlertSlack {
  string slack_channel = 1;
}