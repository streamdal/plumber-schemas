syntax = "proto3";

package protos;

import "common/ps_common_auth.proto";
import "common/ps_common_status.proto";
import "opts/ps_opts_tunnel.proto";

option go_package = "github.com/streamdal/plumber-schemas/build/go/protos";

message GetAllTunnelsRequest {
  // Every gRPC request must have a valid auth config
  common.Auth auth = 9999;
}

message GetAllTunnelsResponse {
  common.Status status = 1000;

  // Will be set as empty []Tunnel if no tunnels are configured
  repeated opts.TunnelOptions opts = 1;
}

///////////////////////////////////////////////////////////////////////////////

message GetTunnelRequest {
  // Every gRPC request must have a valid auth config
  common.Auth auth = 9999;

  string tunnel_id = 1;
}

message GetTunnelResponse {
  common.Status status = 1000;

  // Set only if status is OK
  opts.TunnelOptions opts = 1;
}

///////////////////////////////////////////////////////////////////////////////

message CreateTunnelRequest {
  // Every gRPC request must have a valid auth config
  common.Auth auth = 9999;

  opts.TunnelOptions opts = 1;
}

message CreateTunnelResponse {
  common.Status status = 1000;

  // ID of the created tunnel entry
  string tunnel_id = 1;
}

///////////////////////////////////////////////////////////////////////////////

// WARNING: Updating a destination that is in-use can result in missing data during replay
message UpdateTunnelRequest {
  // Every gRPC request must have a valid auth config
  common.Auth auth = 9999;

  string tunnel_id = 1;

  opts.TunnelOptions opts = 2;
}

message UpdateTunnelResponse {
  common.Status status = 1000;
}

///////////////////////////////////////////////////////////////////////////////

// Resume a paused relay
message ResumeTunnelRequest {
  // Every gRPC request must have a valid auth config
  common.Auth auth = 9999;

  string tunnel_id = 1;
}

message ResumeTunnelResponse {
  common.Status status = 1000;
}

///////////////////////////////////////////////////////////////////////////////

// Temporarily stop/pause a relay
message StopTunnelRequest {
  // Every gRPC request must have a valid auth config
  common.Auth auth = 9999;

  string tunnel_id = 1;
}

message StopTunnelResponse {
  common.Status status = 1000;
}

///////////////////////////////////////////////////////////////////////////////

message DeleteTunnelRequest {
  // Every gRPC request must have a valid auth config
  common.Auth auth = 9999;

  string tunnel_id = 1;
}

message DeleteTunnelResponse {
  common.Status status = 1000;
}
